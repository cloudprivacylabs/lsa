// Copyright 2021 Cloud Privacy Labs, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package json

import (
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"strings"

	"github.com/cloudprivacylabs/lsa/pkg/ls"
)

var ErrExtraCharacters = errors.New("Extra characters before document")
var ErrMultipleRoots = errors.New("Multiple roots")
var ErrInvalidXML = errors.New("Invalid XML")

// Ingester converts an XML object model into a graph using a schema
type Ingester struct {
	ls.Ingester

	Interner ls.Interner

	IncludeProcessingInstructions bool
}

// IngestDocument inygests an XML using the schema. The output will have all input
// nodes associated with schema nodes.
//
// BaseID is the ID of the root object. All other attribute names are
// generated by appending the attribute path to baseID
func (ingester *Ingester) IngestDocument(baseID string, decoder *xml.Decoder) (ls.Node, error) {
	path, schemaRoot := ingester.Start(baseID)

	filterBOM := func(in []byte) []byte {
		if len(in) == 3 && in[0] == 0xEF && in[1] == 0xBB && in[2] == 0xBF {
			return []byte(" ")
		}
		return in
	}

	// At the top level there can be processing instructions,
	// directives, and the root element
	done := false
	rootSeen := false
	var rootNode ls.Node
	var err error
	for !done {
		var tok xml.Token
		tok, err = decoder.Token()
		if err != nil {
			break
		}
		switch token := tok.(type) {
		case xml.CharData:
			data := token.Copy()
			if !rootSeen {
				data = filterBOM(data)
			}
			if strings.TrimSpace(string(data)) != "" {
				return nil, ErrExtraCharacters
			}

		case xml.StartElement:
			// This is the document root
			if rootSeen {
				return nil, ErrMultipleRoots
			}
			rootSeen = true
			rootNode, err = ingester.parseElement(token, path, decoder, schemaRoot)
			if err != nil {
				return nil, err
			}
			done = true

		case xml.Comment:

		case xml.Directive:

		case xml.ProcInst:

		default:
			return nil, ErrInvalidXML
		}
	}
	if err == io.EOF {
		err = nil
	}

	return rootNode, err
}

func (ingester *Ingester) parseElement(data xml.StartElement, path []interface{}, decoder *xml.Decoder, schemaNode ls.Node) (ls.Node, error) {

	path = append(path, data.Name.Local)

	attributeNodes := make([]ls.Node, 0)
	for index, attribute := range data.Attr {
		attrNode, err := ingester.Value(append(path, fmt.Sprintf("attr-%d", index)), nil, attribute.Value)
		if err != nil {
			return nil, err
		}
		if len(attribute.Name.Space) > 0 {
			attrNode.GetProperties()[NamespaceTerm] = ls.StringPropertyValue(ingester.Interner.Intern(attribute.Name.Space))
		}
		attrNode.GetProperties()[LocalNameTerm] = ls.StringPropertyValue(ingester.Interner.Intern(attribute.Name.Local))
		attrNode.SetValue(attribute.Value)
		attributeNodes = append(attributeNodes, attrNode)
	}
	newNode, err := ingester.Object(path, schemaNode, attributeNodes)
	if err != nil {
		return nil, err
	}
	properties := newNode.GetProperties()
	if len(data.Name.Space) > 0 {
		properties[NamespaceTerm] = ls.StringPropertyValue(ingester.Interner.Intern(data.Name.Space))
	}
	properties[LocalNameTerm] = ls.StringPropertyValue(ingester.Interner.Intern(data.Name.Local))

	for {
		tok, err := decoder.Token()
		if err == io.EOF {
			return nil, ErrElementNodeNotTerminated{data.Name}
		}
		if err != nil {
			return nil, err
		}

		switch token := tok.(type) {
		case xml.StartElement:
			newEl := el.NewElement()
			el.AppendChild(newEl)
			if err = newEl.parse(token, decoder, ls); err != nil {
				return err
			}
		case xml.EndElement:
			return nil
		case xml.CharData:
			x := el.NewCharData()
			x.data = token.Copy()
			el.AppendChild(x)
		case xml.ProcInst:
			x := el.NewProcInst()
			x.Data = token.Copy()
			el.AppendChild(x)
		case xml.Directive:
			x := el.NewDirective()
			x.Data = token.Copy()
			el.AppendChild(x)
		case xml.Comment:
			x := el.NewComment()
			x.Data = token.Copy()
			el.AppendChild(x)
		}
	}
	return newNode, nil
}

// Code generated from Cypher.g4 by ANTLR 4.9. DO NOT EDIT.

package parser // Cypher

import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 129, 1549,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 3, 2, 5, 2, 202, 10,
	2, 3, 2, 3, 2, 5, 2, 206, 10, 2, 3, 2, 5, 2, 209, 10, 2, 3, 2, 5, 2, 212,
	10, 2, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 5, 4, 220, 10, 4, 3, 5, 3, 5,
	5, 5, 224, 10, 5, 3, 5, 7, 5, 227, 10, 5, 12, 5, 14, 5, 230, 11, 5, 3,
	6, 3, 6, 3, 6, 3, 6, 5, 6, 236, 10, 6, 3, 6, 3, 6, 3, 6, 5, 6, 241, 10,
	6, 3, 6, 5, 6, 244, 10, 6, 3, 7, 3, 7, 5, 7, 248, 10, 7, 3, 8, 3, 8, 5,
	8, 252, 10, 8, 7, 8, 254, 10, 8, 12, 8, 14, 8, 257, 11, 8, 3, 8, 3, 8,
	3, 8, 5, 8, 262, 10, 8, 7, 8, 264, 10, 8, 12, 8, 14, 8, 267, 11, 8, 3,
	8, 3, 8, 5, 8, 271, 10, 8, 3, 8, 7, 8, 274, 10, 8, 12, 8, 14, 8, 277, 11,
	8, 3, 8, 5, 8, 280, 10, 8, 3, 8, 5, 8, 283, 10, 8, 5, 8, 285, 10, 8, 3,
	9, 3, 9, 5, 9, 289, 10, 9, 7, 9, 291, 10, 9, 12, 9, 14, 9, 294, 11, 9,
	3, 9, 3, 9, 5, 9, 298, 10, 9, 7, 9, 300, 10, 9, 12, 9, 14, 9, 303, 11,
	9, 3, 9, 3, 9, 5, 9, 307, 10, 9, 6, 9, 309, 10, 9, 13, 9, 14, 9, 310, 3,
	9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 320, 10, 10, 3, 11,
	3, 11, 3, 11, 5, 11, 325, 10, 11, 3, 12, 3, 12, 5, 12, 329, 10, 12, 3,
	12, 3, 12, 5, 12, 333, 10, 12, 3, 12, 3, 12, 5, 12, 337, 10, 12, 3, 12,
	5, 12, 340, 10, 12, 3, 13, 3, 13, 5, 13, 344, 10, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 5, 14, 354, 10, 14, 3, 14, 3, 14,
	3, 14, 7, 14, 359, 10, 14, 12, 14, 14, 14, 362, 11, 14, 3, 15, 3, 15, 3,
	15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 5, 15, 374, 10, 15,
	3, 16, 3, 16, 5, 16, 378, 10, 16, 3, 16, 3, 16, 3, 17, 3, 17, 5, 17, 384,
	10, 17, 3, 17, 3, 17, 5, 17, 388, 10, 17, 3, 17, 3, 17, 5, 17, 392, 10,
	17, 3, 17, 7, 17, 395, 10, 17, 12, 17, 14, 17, 398, 11, 17, 3, 18, 3, 18,
	5, 18, 402, 10, 18, 3, 18, 3, 18, 5, 18, 406, 10, 18, 3, 18, 3, 18, 3,
	18, 3, 18, 5, 18, 412, 10, 18, 3, 18, 3, 18, 5, 18, 416, 10, 18, 3, 18,
	3, 18, 3, 18, 3, 18, 5, 18, 422, 10, 18, 3, 18, 3, 18, 5, 18, 426, 10,
	18, 3, 18, 3, 18, 3, 18, 3, 18, 5, 18, 432, 10, 18, 3, 18, 3, 18, 5, 18,
	436, 10, 18, 3, 19, 3, 19, 5, 19, 440, 10, 19, 3, 19, 3, 19, 5, 19, 444,
	10, 19, 3, 19, 3, 19, 5, 19, 448, 10, 19, 3, 19, 3, 19, 5, 19, 452, 10,
	19, 3, 19, 7, 19, 455, 10, 19, 12, 19, 14, 19, 458, 11, 19, 3, 20, 3, 20,
	3, 20, 3, 20, 5, 20, 464, 10, 20, 3, 20, 3, 20, 5, 20, 468, 10, 20, 3,
	20, 7, 20, 471, 10, 20, 12, 20, 14, 20, 474, 11, 20, 3, 21, 3, 21, 3, 21,
	3, 21, 5, 21, 480, 10, 21, 3, 22, 3, 22, 3, 22, 3, 22, 5, 22, 486, 10,
	22, 3, 22, 3, 22, 3, 22, 5, 22, 491, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23,
	5, 23, 497, 10, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 503, 10, 23, 3,
	24, 3, 24, 3, 24, 5, 24, 508, 10, 24, 3, 24, 3, 24, 5, 24, 512, 10, 24,
	3, 24, 7, 24, 515, 10, 24, 12, 24, 14, 24, 518, 11, 24, 5, 24, 520, 10,
	24, 3, 24, 5, 24, 523, 10, 24, 3, 24, 5, 24, 526, 10, 24, 3, 25, 3, 25,
	3, 25, 3, 25, 3, 25, 5, 25, 533, 10, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3,
	26, 5, 26, 540, 10, 26, 3, 26, 5, 26, 543, 10, 26, 3, 27, 3, 27, 3, 27,
	3, 28, 5, 28, 549, 10, 28, 3, 28, 5, 28, 552, 10, 28, 3, 28, 3, 28, 3,
	28, 3, 28, 5, 28, 558, 10, 28, 3, 28, 3, 28, 5, 28, 562, 10, 28, 3, 28,
	3, 28, 5, 28, 566, 10, 28, 3, 29, 3, 29, 5, 29, 570, 10, 29, 3, 29, 3,
	29, 5, 29, 574, 10, 29, 3, 29, 7, 29, 577, 10, 29, 12, 29, 14, 29, 580,
	11, 29, 3, 29, 3, 29, 5, 29, 584, 10, 29, 3, 29, 3, 29, 5, 29, 588, 10,
	29, 3, 29, 7, 29, 591, 10, 29, 12, 29, 14, 29, 594, 11, 29, 5, 29, 596,
	10, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 5, 30, 605, 10,
	30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 5, 31, 614, 10, 31,
	3, 31, 7, 31, 617, 10, 31, 12, 31, 14, 31, 620, 11, 31, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 34, 3, 34, 5, 34, 632, 10, 34,
	3, 34, 5, 34, 635, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 5,
	36, 643, 10, 36, 3, 36, 3, 36, 5, 36, 647, 10, 36, 3, 36, 7, 36, 650, 10,
	36, 12, 36, 14, 36, 653, 11, 36, 3, 37, 3, 37, 5, 37, 657, 10, 37, 3, 37,
	3, 37, 5, 37, 661, 10, 37, 3, 37, 3, 37, 3, 37, 5, 37, 666, 10, 37, 3,
	38, 3, 38, 3, 39, 3, 39, 5, 39, 672, 10, 39, 3, 39, 7, 39, 675, 10, 39,
	12, 39, 14, 39, 678, 11, 39, 3, 39, 3, 39, 3, 39, 3, 39, 5, 39, 684, 10,
	39, 3, 40, 3, 40, 5, 40, 688, 10, 40, 3, 40, 3, 40, 5, 40, 692, 10, 40,
	5, 40, 694, 10, 40, 3, 40, 3, 40, 5, 40, 698, 10, 40, 5, 40, 700, 10, 40,
	3, 40, 3, 40, 5, 40, 704, 10, 40, 5, 40, 706, 10, 40, 3, 40, 3, 40, 3,
	41, 3, 41, 5, 41, 712, 10, 41, 3, 41, 3, 41, 3, 42, 3, 42, 5, 42, 718,
	10, 42, 3, 42, 3, 42, 5, 42, 722, 10, 42, 3, 42, 5, 42, 725, 10, 42, 3,
	42, 5, 42, 728, 10, 42, 3, 42, 3, 42, 5, 42, 732, 10, 42, 3, 42, 3, 42,
	3, 42, 3, 42, 5, 42, 738, 10, 42, 3, 42, 3, 42, 5, 42, 742, 10, 42, 3,
	42, 5, 42, 745, 10, 42, 3, 42, 5, 42, 748, 10, 42, 3, 42, 3, 42, 3, 42,
	3, 42, 5, 42, 754, 10, 42, 3, 42, 5, 42, 757, 10, 42, 3, 42, 5, 42, 760,
	10, 42, 3, 42, 3, 42, 5, 42, 764, 10, 42, 3, 42, 3, 42, 3, 42, 3, 42, 5,
	42, 770, 10, 42, 3, 42, 5, 42, 773, 10, 42, 3, 42, 5, 42, 776, 10, 42,
	3, 42, 3, 42, 5, 42, 780, 10, 42, 3, 43, 3, 43, 5, 43, 784, 10, 43, 3,
	43, 3, 43, 5, 43, 788, 10, 43, 5, 43, 790, 10, 43, 3, 43, 3, 43, 5, 43,
	794, 10, 43, 5, 43, 796, 10, 43, 3, 43, 5, 43, 799, 10, 43, 3, 43, 3, 43,
	5, 43, 803, 10, 43, 5, 43, 805, 10, 43, 3, 43, 3, 43, 3, 44, 3, 44, 5,
	44, 811, 10, 44, 3, 45, 3, 45, 5, 45, 815, 10, 45, 3, 45, 3, 45, 5, 45,
	819, 10, 45, 3, 45, 3, 45, 5, 45, 823, 10, 45, 3, 45, 5, 45, 826, 10, 45,
	3, 45, 7, 45, 829, 10, 45, 12, 45, 14, 45, 832, 11, 45, 3, 46, 3, 46, 5,
	46, 836, 10, 46, 3, 46, 7, 46, 839, 10, 46, 12, 46, 14, 46, 842, 11, 46,
	3, 47, 3, 47, 5, 47, 846, 10, 47, 3, 47, 3, 47, 3, 48, 3, 48, 5, 48, 852,
	10, 48, 3, 48, 3, 48, 5, 48, 856, 10, 48, 5, 48, 858, 10, 48, 3, 48, 3,
	48, 5, 48, 862, 10, 48, 3, 48, 3, 48, 5, 48, 866, 10, 48, 5, 48, 868, 10,
	48, 5, 48, 870, 10, 48, 3, 49, 3, 49, 3, 50, 3, 50, 3, 51, 3, 51, 3, 52,
	3, 52, 3, 52, 3, 52, 3, 52, 7, 52, 883, 10, 52, 12, 52, 14, 52, 886, 11,
	52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 7, 53, 893, 10, 53, 12, 53, 14,
	53, 896, 11, 53, 3, 54, 3, 54, 3, 54, 3, 54, 3, 54, 7, 54, 903, 10, 54,
	12, 54, 14, 54, 906, 11, 54, 3, 55, 3, 55, 5, 55, 910, 10, 55, 7, 55, 912,
	10, 55, 12, 55, 14, 55, 915, 11, 55, 3, 55, 3, 55, 3, 56, 3, 56, 5, 56,
	921, 10, 56, 3, 56, 7, 56, 924, 10, 56, 12, 56, 14, 56, 927, 11, 56, 3,
	57, 3, 57, 5, 57, 931, 10, 57, 3, 57, 3, 57, 5, 57, 935, 10, 57, 3, 57,
	3, 57, 5, 57, 939, 10, 57, 3, 57, 3, 57, 5, 57, 943, 10, 57, 3, 57, 7,
	57, 946, 10, 57, 12, 57, 14, 57, 949, 11, 57, 3, 58, 3, 58, 5, 58, 953,
	10, 58, 3, 58, 3, 58, 5, 58, 957, 10, 58, 3, 58, 3, 58, 5, 58, 961, 10,
	58, 3, 58, 3, 58, 5, 58, 965, 10, 58, 3, 58, 3, 58, 5, 58, 969, 10, 58,
	3, 58, 3, 58, 5, 58, 973, 10, 58, 3, 58, 7, 58, 976, 10, 58, 12, 58, 14,
	58, 979, 11, 58, 3, 59, 3, 59, 5, 59, 983, 10, 59, 3, 59, 3, 59, 5, 59,
	987, 10, 59, 3, 59, 7, 59, 990, 10, 59, 12, 59, 14, 59, 993, 11, 59, 3,
	60, 3, 60, 5, 60, 997, 10, 60, 7, 60, 999, 10, 60, 12, 60, 14, 60, 1002,
	11, 60, 3, 60, 3, 60, 3, 61, 3, 61, 3, 61, 3, 61, 7, 61, 1010, 10, 61,
	12, 61, 14, 61, 1013, 11, 61, 3, 62, 3, 62, 3, 62, 5, 62, 1018, 10, 62,
	3, 62, 3, 62, 5, 62, 1022, 10, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 5,
	62, 1029, 10, 62, 3, 62, 3, 62, 5, 62, 1033, 10, 62, 3, 62, 3, 62, 5, 62,
	1037, 10, 62, 3, 62, 5, 62, 1040, 10, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3,
	63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 5, 63, 1052, 10, 63, 3, 63, 5, 63,
	1055, 10, 63, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3, 64, 3,
	64, 3, 64, 3, 64, 3, 64, 5, 64, 1069, 10, 64, 3, 65, 3, 65, 5, 65, 1073,
	10, 65, 3, 65, 7, 65, 1076, 10, 65, 12, 65, 14, 65, 1079, 11, 65, 3, 65,
	5, 65, 1082, 10, 65, 3, 65, 5, 65, 1085, 10, 65, 3, 66, 3, 66, 3, 66, 3,
	66, 3, 66, 5, 66, 1092, 10, 66, 3, 66, 3, 66, 5, 66, 1096, 10, 66, 3, 66,
	3, 66, 5, 66, 1100, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1107,
	10, 66, 3, 66, 3, 66, 5, 66, 1111, 10, 66, 3, 66, 3, 66, 5, 66, 1115, 10,
	66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1121, 10, 66, 3, 66, 3, 66, 5, 66,
	1125, 10, 66, 3, 66, 3, 66, 5, 66, 1129, 10, 66, 3, 66, 3, 66, 3, 66, 3,
	66, 5, 66, 1135, 10, 66, 3, 66, 3, 66, 5, 66, 1139, 10, 66, 3, 66, 3, 66,
	5, 66, 1143, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1149, 10, 66, 3,
	66, 3, 66, 5, 66, 1153, 10, 66, 3, 66, 3, 66, 5, 66, 1157, 10, 66, 3, 66,
	3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 5, 66, 1165, 10, 66, 3, 67, 3, 67, 3,
	67, 3, 67, 3, 67, 3, 67, 5, 67, 1173, 10, 67, 3, 68, 3, 68, 3, 69, 3, 69,
	5, 69, 1179, 10, 69, 3, 69, 3, 69, 5, 69, 1183, 10, 69, 3, 69, 3, 69, 5,
	69, 1187, 10, 69, 3, 69, 3, 69, 5, 69, 1191, 10, 69, 7, 69, 1193, 10, 69,
	12, 69, 14, 69, 1196, 11, 69, 5, 69, 1198, 10, 69, 3, 69, 3, 69, 3, 70,
	3, 70, 5, 70, 1204, 10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1209, 10, 70, 3,
	70, 3, 70, 3, 70, 5, 70, 1214, 10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1219,
	10, 70, 3, 70, 3, 70, 3, 70, 5, 70, 1224, 10, 70, 3, 70, 3, 70, 3, 70,
	5, 70, 1229, 10, 70, 3, 70, 5, 70, 1232, 10, 70, 3, 71, 3, 71, 5, 71, 1236,
	10, 71, 3, 71, 3, 71, 5, 71, 1240, 10, 71, 3, 71, 3, 71, 3, 72, 3, 72,
	5, 72, 1246, 10, 72, 3, 72, 6, 72, 1249, 10, 72, 13, 72, 14, 72, 1250,
	3, 73, 3, 73, 5, 73, 1255, 10, 73, 3, 73, 5, 73, 1258, 10, 73, 3, 74, 3,
	74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 75, 3, 75, 5, 75, 1268, 10, 75, 3, 75,
	3, 75, 5, 75, 1272, 10, 75, 3, 75, 3, 75, 5, 75, 1276, 10, 75, 5, 75, 1278,
	10, 75, 3, 75, 3, 75, 5, 75, 1282, 10, 75, 3, 75, 3, 75, 5, 75, 1286, 10,
	75, 3, 75, 3, 75, 5, 75, 1290, 10, 75, 7, 75, 1292, 10, 75, 12, 75, 14,
	75, 1295, 11, 75, 5, 75, 1297, 10, 75, 3, 75, 3, 75, 3, 76, 3, 76, 3, 76,
	3, 76, 5, 76, 1305, 10, 76, 3, 77, 3, 77, 5, 77, 1309, 10, 77, 3, 77, 3,
	77, 5, 77, 1313, 10, 77, 3, 77, 3, 77, 5, 77, 1317, 10, 77, 3, 77, 3, 77,
	5, 77, 1321, 10, 77, 3, 77, 3, 77, 5, 77, 1325, 10, 77, 7, 77, 1327, 10,
	77, 12, 77, 14, 77, 1330, 11, 77, 5, 77, 1332, 10, 77, 3, 77, 3, 77, 3,
	78, 3, 78, 3, 79, 3, 79, 3, 80, 3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 7, 81,
	1346, 10, 81, 12, 81, 14, 81, 1349, 11, 81, 3, 82, 3, 82, 5, 82, 1353,
	10, 82, 3, 82, 3, 82, 5, 82, 1357, 10, 82, 3, 82, 3, 82, 5, 82, 1361, 10,
	82, 3, 82, 5, 82, 1364, 10, 82, 3, 82, 5, 82, 1367, 10, 82, 3, 82, 3, 82,
	3, 83, 3, 83, 5, 83, 1373, 10, 83, 3, 83, 3, 83, 5, 83, 1377, 10, 83, 3,
	83, 3, 83, 5, 83, 1381, 10, 83, 5, 83, 1383, 10, 83, 3, 83, 3, 83, 5, 83,
	1387, 10, 83, 3, 83, 3, 83, 5, 83, 1391, 10, 83, 3, 83, 3, 83, 5, 83, 1395,
	10, 83, 5, 83, 1397, 10, 83, 3, 83, 3, 83, 5, 83, 1401, 10, 83, 3, 83,
	3, 83, 5, 83, 1405, 10, 83, 3, 83, 3, 83, 3, 84, 3, 84, 5, 84, 1411, 10,
	84, 3, 84, 3, 84, 3, 85, 3, 85, 5, 85, 1417, 10, 85, 3, 85, 6, 85, 1420,
	10, 85, 13, 85, 14, 85, 1421, 3, 85, 3, 85, 5, 85, 1426, 10, 85, 3, 85,
	3, 85, 5, 85, 1430, 10, 85, 3, 85, 6, 85, 1433, 10, 85, 13, 85, 14, 85,
	1434, 5, 85, 1437, 10, 85, 3, 85, 5, 85, 1440, 10, 85, 3, 85, 3, 85, 5,
	85, 1444, 10, 85, 3, 85, 5, 85, 1447, 10, 85, 3, 85, 5, 85, 1450, 10, 85,
	3, 85, 3, 85, 3, 86, 3, 86, 5, 86, 1456, 10, 86, 3, 86, 3, 86, 5, 86, 1460,
	10, 86, 3, 86, 3, 86, 5, 86, 1464, 10, 86, 3, 86, 3, 86, 3, 87, 3, 87,
	3, 88, 3, 88, 5, 88, 1472, 10, 88, 3, 89, 3, 89, 5, 89, 1476, 10, 89, 3,
	89, 3, 89, 5, 89, 1480, 10, 89, 3, 89, 3, 89, 5, 89, 1484, 10, 89, 3, 89,
	3, 89, 5, 89, 1488, 10, 89, 3, 89, 3, 89, 5, 89, 1492, 10, 89, 3, 89, 3,
	89, 5, 89, 1496, 10, 89, 3, 89, 3, 89, 5, 89, 1500, 10, 89, 3, 89, 3, 89,
	5, 89, 1504, 10, 89, 7, 89, 1506, 10, 89, 12, 89, 14, 89, 1509, 11, 89,
	5, 89, 1511, 10, 89, 3, 89, 3, 89, 3, 90, 3, 90, 3, 90, 5, 90, 1518, 10,
	90, 3, 91, 3, 91, 5, 91, 1522, 10, 91, 3, 91, 6, 91, 1525, 10, 91, 13,
	91, 14, 91, 1526, 3, 92, 3, 92, 3, 93, 3, 93, 3, 94, 3, 94, 3, 95, 3, 95,
	5, 95, 1537, 10, 95, 3, 96, 3, 96, 3, 97, 3, 97, 3, 98, 3, 98, 3, 99, 3,
	99, 3, 100, 3, 100, 3, 100, 2, 2, 101, 2, 4, 6, 8, 10, 12, 14, 16, 18,
	20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54,
	56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90,
	92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120,
	122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150,
	152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180,
	182, 184, 186, 188, 190, 192, 194, 196, 198, 2, 12, 3, 2, 70, 73, 3, 2,
	15, 16, 3, 2, 89, 90, 3, 2, 99, 101, 3, 2, 109, 110, 6, 2, 48, 60, 63,
	84, 89, 96, 111, 120, 6, 2, 85, 88, 102, 102, 121, 123, 126, 126, 4, 2,
	21, 21, 29, 32, 4, 2, 22, 22, 33, 36, 4, 2, 16, 16, 37, 47, 2, 1766, 2,
	201, 3, 2, 2, 2, 4, 215, 3, 2, 2, 2, 6, 219, 3, 2, 2, 2, 8, 221, 3, 2,
	2, 2, 10, 243, 3, 2, 2, 2, 12, 247, 3, 2, 2, 2, 14, 284, 3, 2, 2, 2, 16,
	308, 3, 2, 2, 2, 18, 319, 3, 2, 2, 2, 20, 324, 3, 2, 2, 2, 22, 328, 3,
	2, 2, 2, 24, 341, 3, 2, 2, 2, 26, 351, 3, 2, 2, 2, 28, 373, 3, 2, 2, 2,
	30, 375, 3, 2, 2, 2, 32, 381, 3, 2, 2, 2, 34, 435, 3, 2, 2, 2, 36, 439,
	3, 2, 2, 2, 38, 459, 3, 2, 2, 2, 40, 479, 3, 2, 2, 2, 42, 481, 3, 2, 2,
	2, 44, 492, 3, 2, 2, 2, 46, 519, 3, 2, 2, 2, 48, 532, 3, 2, 2, 2, 50, 536,
	3, 2, 2, 2, 52, 544, 3, 2, 2, 2, 54, 551, 3, 2, 2, 2, 56, 595, 3, 2, 2,
	2, 58, 604, 3, 2, 2, 2, 60, 606, 3, 2, 2, 2, 62, 621, 3, 2, 2, 2, 64, 625,
	3, 2, 2, 2, 66, 629, 3, 2, 2, 2, 68, 636, 3, 2, 2, 2, 70, 640, 3, 2, 2,
	2, 72, 665, 3, 2, 2, 2, 74, 667, 3, 2, 2, 2, 76, 683, 3, 2, 2, 2, 78, 685,
	3, 2, 2, 2, 80, 709, 3, 2, 2, 2, 82, 779, 3, 2, 2, 2, 84, 781, 3, 2, 2,
	2, 86, 810, 3, 2, 2, 2, 88, 812, 3, 2, 2, 2, 90, 833, 3, 2, 2, 2, 92, 843,
	3, 2, 2, 2, 94, 849, 3, 2, 2, 2, 96, 871, 3, 2, 2, 2, 98, 873, 3, 2, 2,
	2, 100, 875, 3, 2, 2, 2, 102, 877, 3, 2, 2, 2, 104, 887, 3, 2, 2, 2, 106,
	897, 3, 2, 2, 2, 108, 913, 3, 2, 2, 2, 110, 918, 3, 2, 2, 2, 112, 928,
	3, 2, 2, 2, 114, 950, 3, 2, 2, 2, 116, 980, 3, 2, 2, 2, 118, 1000, 3, 2,
	2, 2, 120, 1005, 3, 2, 2, 2, 122, 1039, 3, 2, 2, 2, 124, 1051, 3, 2, 2,
	2, 126, 1068, 3, 2, 2, 2, 128, 1070, 3, 2, 2, 2, 130, 1164, 3, 2, 2, 2,
	132, 1172, 3, 2, 2, 2, 134, 1174, 3, 2, 2, 2, 136, 1176, 3, 2, 2, 2, 138,
	1231, 3, 2, 2, 2, 140, 1233, 3, 2, 2, 2, 142, 1243, 3, 2, 2, 2, 144, 1252,
	3, 2, 2, 2, 146, 1259, 3, 2, 2, 2, 148, 1265, 3, 2, 2, 2, 150, 1304, 3,
	2, 2, 2, 152, 1306, 3, 2, 2, 2, 154, 1335, 3, 2, 2, 2, 156, 1337, 3, 2,
	2, 2, 158, 1339, 3, 2, 2, 2, 160, 1347, 3, 2, 2, 2, 162, 1350, 3, 2, 2,
	2, 164, 1370, 3, 2, 2, 2, 166, 1408, 3, 2, 2, 2, 168, 1436, 3, 2, 2, 2,
	170, 1453, 3, 2, 2, 2, 172, 1467, 3, 2, 2, 2, 174, 1471, 3, 2, 2, 2, 176,
	1473, 3, 2, 2, 2, 178, 1514, 3, 2, 2, 2, 180, 1519, 3, 2, 2, 2, 182, 1528,
	3, 2, 2, 2, 184, 1530, 3, 2, 2, 2, 186, 1532, 3, 2, 2, 2, 188, 1536, 3,
	2, 2, 2, 190, 1538, 3, 2, 2, 2, 192, 1540, 3, 2, 2, 2, 194, 1542, 3, 2,
	2, 2, 196, 1544, 3, 2, 2, 2, 198, 1546, 3, 2, 2, 2, 200, 202, 7, 127, 2,
	2, 201, 200, 3, 2, 2, 2, 201, 202, 3, 2, 2, 2, 202, 203, 3, 2, 2, 2, 203,
	208, 5, 4, 3, 2, 204, 206, 7, 127, 2, 2, 205, 204, 3, 2, 2, 2, 205, 206,
	3, 2, 2, 2, 206, 207, 3, 2, 2, 2, 207, 209, 7, 3, 2, 2, 208, 205, 3, 2,
	2, 2, 208, 209, 3, 2, 2, 2, 209, 211, 3, 2, 2, 2, 210, 212, 7, 127, 2,
	2, 211, 210, 3, 2, 2, 2, 211, 212, 3, 2, 2, 2, 212, 213, 3, 2, 2, 2, 213,
	214, 7, 2, 2, 3, 214, 3, 3, 2, 2, 2, 215, 216, 5, 6, 4, 2, 216, 5, 3, 2,
	2, 2, 217, 220, 5, 8, 5, 2, 218, 220, 5, 44, 23, 2, 219, 217, 3, 2, 2,
	2, 219, 218, 3, 2, 2, 2, 220, 7, 3, 2, 2, 2, 221, 228, 5, 12, 7, 2, 222,
	224, 7, 127, 2, 2, 223, 222, 3, 2, 2, 2, 223, 224, 3, 2, 2, 2, 224, 225,
	3, 2, 2, 2, 225, 227, 5, 10, 6, 2, 226, 223, 3, 2, 2, 2, 227, 230, 3, 2,
	2, 2, 228, 226, 3, 2, 2, 2, 228, 229, 3, 2, 2, 2, 229, 9, 3, 2, 2, 2, 230,
	228, 3, 2, 2, 2, 231, 232, 7, 48, 2, 2, 232, 233, 7, 127, 2, 2, 233, 235,
	7, 49, 2, 2, 234, 236, 7, 127, 2, 2, 235, 234, 3, 2, 2, 2, 235, 236, 3,
	2, 2, 2, 236, 237, 3, 2, 2, 2, 237, 244, 5, 12, 7, 2, 238, 240, 7, 48,
	2, 2, 239, 241, 7, 127, 2, 2, 240, 239, 3, 2, 2, 2, 240, 241, 3, 2, 2,
	2, 241, 242, 3, 2, 2, 2, 242, 244, 5, 12, 7, 2, 243, 231, 3, 2, 2, 2, 243,
	238, 3, 2, 2, 2, 244, 11, 3, 2, 2, 2, 245, 248, 5, 14, 8, 2, 246, 248,
	5, 16, 9, 2, 247, 245, 3, 2, 2, 2, 247, 246, 3, 2, 2, 2, 248, 13, 3, 2,
	2, 2, 249, 251, 5, 20, 11, 2, 250, 252, 7, 127, 2, 2, 251, 250, 3, 2, 2,
	2, 251, 252, 3, 2, 2, 2, 252, 254, 3, 2, 2, 2, 253, 249, 3, 2, 2, 2, 254,
	257, 3, 2, 2, 2, 255, 253, 3, 2, 2, 2, 255, 256, 3, 2, 2, 2, 256, 258,
	3, 2, 2, 2, 257, 255, 3, 2, 2, 2, 258, 285, 5, 52, 27, 2, 259, 261, 5,
	20, 11, 2, 260, 262, 7, 127, 2, 2, 261, 260, 3, 2, 2, 2, 261, 262, 3, 2,
	2, 2, 262, 264, 3, 2, 2, 2, 263, 259, 3, 2, 2, 2, 264, 267, 3, 2, 2, 2,
	265, 263, 3, 2, 2, 2, 265, 266, 3, 2, 2, 2, 266, 268, 3, 2, 2, 2, 267,
	265, 3, 2, 2, 2, 268, 275, 5, 18, 10, 2, 269, 271, 7, 127, 2, 2, 270, 269,
	3, 2, 2, 2, 270, 271, 3, 2, 2, 2, 271, 272, 3, 2, 2, 2, 272, 274, 5, 18,
	10, 2, 273, 270, 3, 2, 2, 2, 274, 277, 3, 2, 2, 2, 275, 273, 3, 2, 2, 2,
	275, 276, 3, 2, 2, 2, 276, 282, 3, 2, 2, 2, 277, 275, 3, 2, 2, 2, 278,
	280, 7, 127, 2, 2, 279, 278, 3, 2, 2, 2, 279, 280, 3, 2, 2, 2, 280, 281,
	3, 2, 2, 2, 281, 283, 5, 52, 27, 2, 282, 279, 3, 2, 2, 2, 282, 283, 3,
	2, 2, 2, 283, 285, 3, 2, 2, 2, 284, 255, 3, 2, 2, 2, 284, 265, 3, 2, 2,
	2, 285, 15, 3, 2, 2, 2, 286, 288, 5, 20, 11, 2, 287, 289, 7, 127, 2, 2,
	288, 287, 3, 2, 2, 2, 288, 289, 3, 2, 2, 2, 289, 291, 3, 2, 2, 2, 290,
	286, 3, 2, 2, 2, 291, 294, 3, 2, 2, 2, 292, 290, 3, 2, 2, 2, 292, 293,
	3, 2, 2, 2, 293, 301, 3, 2, 2, 2, 294, 292, 3, 2, 2, 2, 295, 297, 5, 18,
	10, 2, 296, 298, 7, 127, 2, 2, 297, 296, 3, 2, 2, 2, 297, 298, 3, 2, 2,
	2, 298, 300, 3, 2, 2, 2, 299, 295, 3, 2, 2, 2, 300, 303, 3, 2, 2, 2, 301,
	299, 3, 2, 2, 2, 301, 302, 3, 2, 2, 2, 302, 304, 3, 2, 2, 2, 303, 301,
	3, 2, 2, 2, 304, 306, 5, 50, 26, 2, 305, 307, 7, 127, 2, 2, 306, 305, 3,
	2, 2, 2, 306, 307, 3, 2, 2, 2, 307, 309, 3, 2, 2, 2, 308, 292, 3, 2, 2,
	2, 309, 310, 3, 2, 2, 2, 310, 308, 3, 2, 2, 2, 310, 311, 3, 2, 2, 2, 311,
	312, 3, 2, 2, 2, 312, 313, 5, 14, 8, 2, 313, 17, 3, 2, 2, 2, 314, 320,
	5, 30, 16, 2, 315, 320, 5, 26, 14, 2, 316, 320, 5, 36, 19, 2, 317, 320,
	5, 32, 17, 2, 318, 320, 5, 38, 20, 2, 319, 314, 3, 2, 2, 2, 319, 315, 3,
	2, 2, 2, 319, 316, 3, 2, 2, 2, 319, 317, 3, 2, 2, 2, 319, 318, 3, 2, 2,
	2, 320, 19, 3, 2, 2, 2, 321, 325, 5, 22, 12, 2, 322, 325, 5, 24, 13, 2,
	323, 325, 5, 42, 22, 2, 324, 321, 3, 2, 2, 2, 324, 322, 3, 2, 2, 2, 324,
	323, 3, 2, 2, 2, 325, 21, 3, 2, 2, 2, 326, 327, 7, 50, 2, 2, 327, 329,
	7, 127, 2, 2, 328, 326, 3, 2, 2, 2, 328, 329, 3, 2, 2, 2, 329, 330, 3,
	2, 2, 2, 330, 332, 7, 51, 2, 2, 331, 333, 7, 127, 2, 2, 332, 331, 3, 2,
	2, 2, 332, 333, 3, 2, 2, 2, 333, 334, 3, 2, 2, 2, 334, 339, 5, 70, 36,
	2, 335, 337, 7, 127, 2, 2, 336, 335, 3, 2, 2, 2, 336, 337, 3, 2, 2, 2,
	337, 338, 3, 2, 2, 2, 338, 340, 5, 68, 35, 2, 339, 336, 3, 2, 2, 2, 339,
	340, 3, 2, 2, 2, 340, 23, 3, 2, 2, 2, 341, 343, 7, 52, 2, 2, 342, 344,
	7, 127, 2, 2, 343, 342, 3, 2, 2, 2, 343, 344, 3, 2, 2, 2, 344, 345, 3,
	2, 2, 2, 345, 346, 5, 100, 51, 2, 346, 347, 7, 127, 2, 2, 347, 348, 7,
	53, 2, 2, 348, 349, 7, 127, 2, 2, 349, 350, 5, 172, 87, 2, 350, 25, 3,
	2, 2, 2, 351, 353, 7, 54, 2, 2, 352, 354, 7, 127, 2, 2, 353, 352, 3, 2,
	2, 2, 353, 354, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355, 360, 5, 72, 37,
	2, 356, 357, 7, 127, 2, 2, 357, 359, 5, 28, 15, 2, 358, 356, 3, 2, 2, 2,
	359, 362, 3, 2, 2, 2, 360, 358, 3, 2, 2, 2, 360, 361, 3, 2, 2, 2, 361,
	27, 3, 2, 2, 2, 362, 360, 3, 2, 2, 2, 363, 364, 7, 55, 2, 2, 364, 365,
	7, 127, 2, 2, 365, 366, 7, 51, 2, 2, 366, 367, 7, 127, 2, 2, 367, 374,
	5, 32, 17, 2, 368, 369, 7, 55, 2, 2, 369, 370, 7, 127, 2, 2, 370, 371,
	7, 56, 2, 2, 371, 372, 7, 127, 2, 2, 372, 374, 5, 32, 17, 2, 373, 363,
	3, 2, 2, 2, 373, 368, 3, 2, 2, 2, 374, 29, 3, 2, 2, 2, 375, 377, 7, 56,
	2, 2, 376, 378, 7, 127, 2, 2, 377, 376, 3, 2, 2, 2, 377, 378, 3, 2, 2,
	2, 378, 379, 3, 2, 2, 2, 379, 380, 5, 70, 36, 2, 380, 31, 3, 2, 2, 2, 381,
	383, 7, 57, 2, 2, 382, 384, 7, 127, 2, 2, 383, 382, 3, 2, 2, 2, 383, 384,
	3, 2, 2, 2, 384, 385, 3, 2, 2, 2, 385, 396, 5, 34, 18, 2, 386, 388, 7,
	127, 2, 2, 387, 386, 3, 2, 2, 2, 387, 388, 3, 2, 2, 2, 388, 389, 3, 2,
	2, 2, 389, 391, 7, 4, 2, 2, 390, 392, 7, 127, 2, 2, 391, 390, 3, 2, 2,
	2, 391, 392, 3, 2, 2, 2, 392, 393, 3, 2, 2, 2, 393, 395, 5, 34, 18, 2,
	394, 387, 3, 2, 2, 2, 395, 398, 3, 2, 2, 2, 396, 394, 3, 2, 2, 2, 396,
	397, 3, 2, 2, 2, 397, 33, 3, 2, 2, 2, 398, 396, 3, 2, 2, 2, 399, 401, 5,
	180, 91, 2, 400, 402, 7, 127, 2, 2, 401, 400, 3, 2, 2, 2, 401, 402, 3,
	2, 2, 2, 402, 403, 3, 2, 2, 2, 403, 405, 7, 5, 2, 2, 404, 406, 7, 127,
	2, 2, 405, 404, 3, 2, 2, 2, 405, 406, 3, 2, 2, 2, 406, 407, 3, 2, 2, 2,
	407, 408, 5, 100, 51, 2, 408, 436, 3, 2, 2, 2, 409, 411, 5, 172, 87, 2,
	410, 412, 7, 127, 2, 2, 411, 410, 3, 2, 2, 2, 411, 412, 3, 2, 2, 2, 412,
	413, 3, 2, 2, 2, 413, 415, 7, 5, 2, 2, 414, 416, 7, 127, 2, 2, 415, 414,
	3, 2, 2, 2, 415, 416, 3, 2, 2, 2, 416, 417, 3, 2, 2, 2, 417, 418, 5, 100,
	51, 2, 418, 436, 3, 2, 2, 2, 419, 421, 5, 172, 87, 2, 420, 422, 7, 127,
	2, 2, 421, 420, 3, 2, 2, 2, 421, 422, 3, 2, 2, 2, 422, 423, 3, 2, 2, 2,
	423, 425, 7, 6, 2, 2, 424, 426, 7, 127, 2, 2, 425, 424, 3, 2, 2, 2, 425,
	426, 3, 2, 2, 2, 426, 427, 3, 2, 2, 2, 427, 428, 5, 100, 51, 2, 428, 436,
	3, 2, 2, 2, 429, 431, 5, 172, 87, 2, 430, 432, 7, 127, 2, 2, 431, 430,
	3, 2, 2, 2, 431, 432, 3, 2, 2, 2, 432, 433, 3, 2, 2, 2, 433, 434, 5, 90,
	46, 2, 434, 436, 3, 2, 2, 2, 435, 399, 3, 2, 2, 2, 435, 409, 3, 2, 2, 2,
	435, 419, 3, 2, 2, 2, 435, 429, 3, 2, 2, 2, 436, 35, 3, 2, 2, 2, 437, 438,
	7, 58, 2, 2, 438, 440, 7, 127, 2, 2, 439, 437, 3, 2, 2, 2, 439, 440, 3,
	2, 2, 2, 440, 441, 3, 2, 2, 2, 441, 443, 7, 59, 2, 2, 442, 444, 7, 127,
	2, 2, 443, 442, 3, 2, 2, 2, 443, 444, 3, 2, 2, 2, 444, 445, 3, 2, 2, 2,
	445, 456, 5, 100, 51, 2, 446, 448, 7, 127, 2, 2, 447, 446, 3, 2, 2, 2,
	447, 448, 3, 2, 2, 2, 448, 449, 3, 2, 2, 2, 449, 451, 7, 4, 2, 2, 450,
	452, 7, 127, 2, 2, 451, 450, 3, 2, 2, 2, 451, 452, 3, 2, 2, 2, 452, 453,
	3, 2, 2, 2, 453, 455, 5, 100, 51, 2, 454, 447, 3, 2, 2, 2, 455, 458, 3,
	2, 2, 2, 456, 454, 3, 2, 2, 2, 456, 457, 3, 2, 2, 2, 457, 37, 3, 2, 2,
	2, 458, 456, 3, 2, 2, 2, 459, 460, 7, 60, 2, 2, 460, 461, 7, 127, 2, 2,
	461, 472, 5, 40, 21, 2, 462, 464, 7, 127, 2, 2, 463, 462, 3, 2, 2, 2, 463,
	464, 3, 2, 2, 2, 464, 465, 3, 2, 2, 2, 465, 467, 7, 4, 2, 2, 466, 468,
	7, 127, 2, 2, 467, 466, 3, 2, 2, 2, 467, 468, 3, 2, 2, 2, 468, 469, 3,
	2, 2, 2, 469, 471, 5, 40, 21, 2, 470, 463, 3, 2, 2, 2, 471, 474, 3, 2,
	2, 2, 472, 470, 3, 2, 2, 2, 472, 473, 3, 2, 2, 2, 473, 39, 3, 2, 2, 2,
	474, 472, 3, 2, 2, 2, 475, 476, 5, 172, 87, 2, 476, 477, 5, 90, 46, 2,
	477, 480, 3, 2, 2, 2, 478, 480, 5, 180, 91, 2, 479, 475, 3, 2, 2, 2, 479,
	478, 3, 2, 2, 2, 480, 41, 3, 2, 2, 2, 481, 482, 7, 61, 2, 2, 482, 483,
	7, 127, 2, 2, 483, 490, 5, 152, 77, 2, 484, 486, 7, 127, 2, 2, 485, 484,
	3, 2, 2, 2, 485, 486, 3, 2, 2, 2, 486, 487, 3, 2, 2, 2, 487, 488, 7, 62,
	2, 2, 488, 489, 7, 127, 2, 2, 489, 491, 5, 46, 24, 2, 490, 485, 3, 2, 2,
	2, 490, 491, 3, 2, 2, 2, 491, 43, 3, 2, 2, 2, 492, 493, 7, 61, 2, 2, 493,
	496, 7, 127, 2, 2, 494, 497, 5, 152, 77, 2, 495, 497, 5, 154, 78, 2, 496,
	494, 3, 2, 2, 2, 496, 495, 3, 2, 2, 2, 497, 502, 3, 2, 2, 2, 498, 499,
	7, 127, 2, 2, 499, 500, 7, 62, 2, 2, 500, 501, 7, 127, 2, 2, 501, 503,
	5, 46, 24, 2, 502, 498, 3, 2, 2, 2, 502, 503, 3, 2, 2, 2, 503, 45, 3, 2,
	2, 2, 504, 520, 7, 7, 2, 2, 505, 516, 5, 48, 25, 2, 506, 508, 7, 127, 2,
	2, 507, 506, 3, 2, 2, 2, 507, 508, 3, 2, 2, 2, 508, 509, 3, 2, 2, 2, 509,
	511, 7, 4, 2, 2, 510, 512, 7, 127, 2, 2, 511, 510, 3, 2, 2, 2, 511, 512,
	3, 2, 2, 2, 512, 513, 3, 2, 2, 2, 513, 515, 5, 48, 25, 2, 514, 507, 3,
	2, 2, 2, 515, 518, 3, 2, 2, 2, 516, 514, 3, 2, 2, 2, 516, 517, 3, 2, 2,
	2, 517, 520, 3, 2, 2, 2, 518, 516, 3, 2, 2, 2, 519, 504, 3, 2, 2, 2, 519,
	505, 3, 2, 2, 2, 520, 525, 3, 2, 2, 2, 521, 523, 7, 127, 2, 2, 522, 521,
	3, 2, 2, 2, 522, 523, 3, 2, 2, 2, 523, 524, 3, 2, 2, 2, 524, 526, 5, 68,
	35, 2, 525, 522, 3, 2, 2, 2, 525, 526, 3, 2, 2, 2, 526, 47, 3, 2, 2, 2,
	527, 528, 5, 156, 79, 2, 528, 529, 7, 127, 2, 2, 529, 530, 7, 53, 2, 2,
	530, 531, 7, 127, 2, 2, 531, 533, 3, 2, 2, 2, 532, 527, 3, 2, 2, 2, 532,
	533, 3, 2, 2, 2, 533, 534, 3, 2, 2, 2, 534, 535, 5, 172, 87, 2, 535, 49,
	3, 2, 2, 2, 536, 537, 7, 63, 2, 2, 537, 542, 5, 54, 28, 2, 538, 540, 7,
	127, 2, 2, 539, 538, 3, 2, 2, 2, 539, 540, 3, 2, 2, 2, 540, 541, 3, 2,
	2, 2, 541, 543, 5, 68, 35, 2, 542, 539, 3, 2, 2, 2, 542, 543, 3, 2, 2,
	2, 543, 51, 3, 2, 2, 2, 544, 545, 7, 64, 2, 2, 545, 546, 5, 54, 28, 2,
	546, 53, 3, 2, 2, 2, 547, 549, 7, 127, 2, 2, 548, 547, 3, 2, 2, 2, 548,
	549, 3, 2, 2, 2, 549, 550, 3, 2, 2, 2, 550, 552, 7, 65, 2, 2, 551, 548,
	3, 2, 2, 2, 551, 552, 3, 2, 2, 2, 552, 553, 3, 2, 2, 2, 553, 554, 7, 127,
	2, 2, 554, 557, 5, 56, 29, 2, 555, 556, 7, 127, 2, 2, 556, 558, 5, 60,
	31, 2, 557, 555, 3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 561, 3, 2, 2, 2,
	559, 560, 7, 127, 2, 2, 560, 562, 5, 62, 32, 2, 561, 559, 3, 2, 2, 2, 561,
	562, 3, 2, 2, 2, 562, 565, 3, 2, 2, 2, 563, 564, 7, 127, 2, 2, 564, 566,
	5, 64, 33, 2, 565, 563, 3, 2, 2, 2, 565, 566, 3, 2, 2, 2, 566, 55, 3, 2,
	2, 2, 567, 578, 7, 7, 2, 2, 568, 570, 7, 127, 2, 2, 569, 568, 3, 2, 2,
	2, 569, 570, 3, 2, 2, 2, 570, 571, 3, 2, 2, 2, 571, 573, 7, 4, 2, 2, 572,
	574, 7, 127, 2, 2, 573, 572, 3, 2, 2, 2, 573, 574, 3, 2, 2, 2, 574, 575,
	3, 2, 2, 2, 575, 577, 5, 58, 30, 2, 576, 569, 3, 2, 2, 2, 577, 580, 3,
	2, 2, 2, 578, 576, 3, 2, 2, 2, 578, 579, 3, 2, 2, 2, 579, 596, 3, 2, 2,
	2, 580, 578, 3, 2, 2, 2, 581, 592, 5, 58, 30, 2, 582, 584, 7, 127, 2, 2,
	583, 582, 3, 2, 2, 2, 583, 584, 3, 2, 2, 2, 584, 585, 3, 2, 2, 2, 585,
	587, 7, 4, 2, 2, 586, 588, 7, 127, 2, 2, 587, 586, 3, 2, 2, 2, 587, 588,
	3, 2, 2, 2, 588, 589, 3, 2, 2, 2, 589, 591, 5, 58, 30, 2, 590, 583, 3,
	2, 2, 2, 591, 594, 3, 2, 2, 2, 592, 590, 3, 2, 2, 2, 592, 593, 3, 2, 2,
	2, 593, 596, 3, 2, 2, 2, 594, 592, 3, 2, 2, 2, 595, 567, 3, 2, 2, 2, 595,
	581, 3, 2, 2, 2, 596, 57, 3, 2, 2, 2, 597, 598, 5, 100, 51, 2, 598, 599,
	7, 127, 2, 2, 599, 600, 7, 53, 2, 2, 600, 601, 7, 127, 2, 2, 601, 602,
	5, 172, 87, 2, 602, 605, 3, 2, 2, 2, 603, 605, 5, 100, 51, 2, 604, 597,
	3, 2, 2, 2, 604, 603, 3, 2, 2, 2, 605, 59, 3, 2, 2, 2, 606, 607, 7, 66,
	2, 2, 607, 608, 7, 127, 2, 2, 608, 609, 7, 67, 2, 2, 609, 610, 7, 127,
	2, 2, 610, 618, 5, 66, 34, 2, 611, 613, 7, 4, 2, 2, 612, 614, 7, 127, 2,
	2, 613, 612, 3, 2, 2, 2, 613, 614, 3, 2, 2, 2, 614, 615, 3, 2, 2, 2, 615,
	617, 5, 66, 34, 2, 616, 611, 3, 2, 2, 2, 617, 620, 3, 2, 2, 2, 618, 616,
	3, 2, 2, 2, 618, 619, 3, 2, 2, 2, 619, 61, 3, 2, 2, 2, 620, 618, 3, 2,
	2, 2, 621, 622, 7, 68, 2, 2, 622, 623, 7, 127, 2, 2, 623, 624, 5, 100,
	51, 2, 624, 63, 3, 2, 2, 2, 625, 626, 7, 69, 2, 2, 626, 627, 7, 127, 2,
	2, 627, 628, 5, 100, 51, 2, 628, 65, 3, 2, 2, 2, 629, 634, 5, 100, 51,
	2, 630, 632, 7, 127, 2, 2, 631, 630, 3, 2, 2, 2, 631, 632, 3, 2, 2, 2,
	632, 633, 3, 2, 2, 2, 633, 635, 9, 2, 2, 2, 634, 631, 3, 2, 2, 2, 634,
	635, 3, 2, 2, 2, 635, 67, 3, 2, 2, 2, 636, 637, 7, 74, 2, 2, 637, 638,
	7, 127, 2, 2, 638, 639, 5, 100, 51, 2, 639, 69, 3, 2, 2, 2, 640, 651, 5,
	72, 37, 2, 641, 643, 7, 127, 2, 2, 642, 641, 3, 2, 2, 2, 642, 643, 3, 2,
	2, 2, 643, 644, 3, 2, 2, 2, 644, 646, 7, 4, 2, 2, 645, 647, 7, 127, 2,
	2, 646, 645, 3, 2, 2, 2, 646, 647, 3, 2, 2, 2, 647, 648, 3, 2, 2, 2, 648,
	650, 5, 72, 37, 2, 649, 642, 3, 2, 2, 2, 650, 653, 3, 2, 2, 2, 651, 649,
	3, 2, 2, 2, 651, 652, 3, 2, 2, 2, 652, 71, 3, 2, 2, 2, 653, 651, 3, 2,
	2, 2, 654, 656, 5, 172, 87, 2, 655, 657, 7, 127, 2, 2, 656, 655, 3, 2,
	2, 2, 656, 657, 3, 2, 2, 2, 657, 658, 3, 2, 2, 2, 658, 660, 7, 5, 2, 2,
	659, 661, 7, 127, 2, 2, 660, 659, 3, 2, 2, 2, 660, 661, 3, 2, 2, 2, 661,
	662, 3, 2, 2, 2, 662, 663, 5, 74, 38, 2, 663, 666, 3, 2, 2, 2, 664, 666,
	5, 74, 38, 2, 665, 654, 3, 2, 2, 2, 665, 664, 3, 2, 2, 2, 666, 73, 3, 2,
	2, 2, 667, 668, 5, 76, 39, 2, 668, 75, 3, 2, 2, 2, 669, 676, 5, 78, 40,
	2, 670, 672, 7, 127, 2, 2, 671, 670, 3, 2, 2, 2, 671, 672, 3, 2, 2, 2,
	672, 673, 3, 2, 2, 2, 673, 675, 5, 80, 41, 2, 674, 671, 3, 2, 2, 2, 675,
	678, 3, 2, 2, 2, 676, 674, 3, 2, 2, 2, 676, 677, 3, 2, 2, 2, 677, 684,
	3, 2, 2, 2, 678, 676, 3, 2, 2, 2, 679, 680, 7, 8, 2, 2, 680, 681, 5, 76,
	39, 2, 681, 682, 7, 9, 2, 2, 682, 684, 3, 2, 2, 2, 683, 669, 3, 2, 2, 2,
	683, 679, 3, 2, 2, 2, 684, 77, 3, 2, 2, 2, 685, 687, 7, 8, 2, 2, 686, 688,
	7, 127, 2, 2, 687, 686, 3, 2, 2, 2, 687, 688, 3, 2, 2, 2, 688, 693, 3,
	2, 2, 2, 689, 691, 5, 172, 87, 2, 690, 692, 7, 127, 2, 2, 691, 690, 3,
	2, 2, 2, 691, 692, 3, 2, 2, 2, 692, 694, 3, 2, 2, 2, 693, 689, 3, 2, 2,
	2, 693, 694, 3, 2, 2, 2, 694, 699, 3, 2, 2, 2, 695, 697, 5, 90, 46, 2,
	696, 698, 7, 127, 2, 2, 697, 696, 3, 2, 2, 2, 697, 698, 3, 2, 2, 2, 698,
	700, 3, 2, 2, 2, 699, 695, 3, 2, 2, 2, 699, 700, 3, 2, 2, 2, 700, 705,
	3, 2, 2, 2, 701, 703, 5, 86, 44, 2, 702, 704, 7, 127, 2, 2, 703, 702, 3,
	2, 2, 2, 703, 704, 3, 2, 2, 2, 704, 706, 3, 2, 2, 2, 705, 701, 3, 2, 2,
	2, 705, 706, 3, 2, 2, 2, 706, 707, 3, 2, 2, 2, 707, 708, 7, 9, 2, 2, 708,
	79, 3, 2, 2, 2, 709, 711, 5, 82, 42, 2, 710, 712, 7, 127, 2, 2, 711, 710,
	3, 2, 2, 2, 711, 712, 3, 2, 2, 2, 712, 713, 3, 2, 2, 2, 713, 714, 5, 78,
	40, 2, 714, 81, 3, 2, 2, 2, 715, 717, 5, 194, 98, 2, 716, 718, 7, 127,
	2, 2, 717, 716, 3, 2, 2, 2, 717, 718, 3, 2, 2, 2, 718, 719, 3, 2, 2, 2,
	719, 721, 5, 198, 100, 2, 720, 722, 7, 127, 2, 2, 721, 720, 3, 2, 2, 2,
	721, 722, 3, 2, 2, 2, 722, 724, 3, 2, 2, 2, 723, 725, 5, 84, 43, 2, 724,
	723, 3, 2, 2, 2, 724, 725, 3, 2, 2, 2, 725, 727, 3, 2, 2, 2, 726, 728,
	7, 127, 2, 2, 727, 726, 3, 2, 2, 2, 727, 728, 3, 2, 2, 2, 728, 729, 3,
	2, 2, 2, 729, 731, 5, 198, 100, 2, 730, 732, 7, 127, 2, 2, 731, 730, 3,
	2, 2, 2, 731, 732, 3, 2, 2, 2, 732, 733, 3, 2, 2, 2, 733, 734, 5, 196,
	99, 2, 734, 780, 3, 2, 2, 2, 735, 737, 5, 194, 98, 2, 736, 738, 7, 127,
	2, 2, 737, 736, 3, 2, 2, 2, 737, 738, 3, 2, 2, 2, 738, 739, 3, 2, 2, 2,
	739, 741, 5, 198, 100, 2, 740, 742, 7, 127, 2, 2, 741, 740, 3, 2, 2, 2,
	741, 742, 3, 2, 2, 2, 742, 744, 3, 2, 2, 2, 743, 745, 5, 84, 43, 2, 744,
	743, 3, 2, 2, 2, 744, 745, 3, 2, 2, 2, 745, 747, 3, 2, 2, 2, 746, 748,
	7, 127, 2, 2, 747, 746, 3, 2, 2, 2, 747, 748, 3, 2, 2, 2, 748, 749, 3,
	2, 2, 2, 749, 750, 5, 198, 100, 2, 750, 780, 3, 2, 2, 2, 751, 753, 5, 198,
	100, 2, 752, 754, 7, 127, 2, 2, 753, 752, 3, 2, 2, 2, 753, 754, 3, 2, 2,
	2, 754, 756, 3, 2, 2, 2, 755, 757, 5, 84, 43, 2, 756, 755, 3, 2, 2, 2,
	756, 757, 3, 2, 2, 2, 757, 759, 3, 2, 2, 2, 758, 760, 7, 127, 2, 2, 759,
	758, 3, 2, 2, 2, 759, 760, 3, 2, 2, 2, 760, 761, 3, 2, 2, 2, 761, 763,
	5, 198, 100, 2, 762, 764, 7, 127, 2, 2, 763, 762, 3, 2, 2, 2, 763, 764,
	3, 2, 2, 2, 764, 765, 3, 2, 2, 2, 765, 766, 5, 196, 99, 2, 766, 780, 3,
	2, 2, 2, 767, 769, 5, 198, 100, 2, 768, 770, 7, 127, 2, 2, 769, 768, 3,
	2, 2, 2, 769, 770, 3, 2, 2, 2, 770, 772, 3, 2, 2, 2, 771, 773, 5, 84, 43,
	2, 772, 771, 3, 2, 2, 2, 772, 773, 3, 2, 2, 2, 773, 775, 3, 2, 2, 2, 774,
	776, 7, 127, 2, 2, 775, 774, 3, 2, 2, 2, 775, 776, 3, 2, 2, 2, 776, 777,
	3, 2, 2, 2, 777, 778, 5, 198, 100, 2, 778, 780, 3, 2, 2, 2, 779, 715, 3,
	2, 2, 2, 779, 735, 3, 2, 2, 2, 779, 751, 3, 2, 2, 2, 779, 767, 3, 2, 2,
	2, 780, 83, 3, 2, 2, 2, 781, 783, 7, 10, 2, 2, 782, 784, 7, 127, 2, 2,
	783, 782, 3, 2, 2, 2, 783, 784, 3, 2, 2, 2, 784, 789, 3, 2, 2, 2, 785,
	787, 5, 172, 87, 2, 786, 788, 7, 127, 2, 2, 787, 786, 3, 2, 2, 2, 787,
	788, 3, 2, 2, 2, 788, 790, 3, 2, 2, 2, 789, 785, 3, 2, 2, 2, 789, 790,
	3, 2, 2, 2, 790, 795, 3, 2, 2, 2, 791, 793, 5, 88, 45, 2, 792, 794, 7,
	127, 2, 2, 793, 792, 3, 2, 2, 2, 793, 794, 3, 2, 2, 2, 794, 796, 3, 2,
	2, 2, 795, 791, 3, 2, 2, 2, 795, 796, 3, 2, 2, 2, 796, 798, 3, 2, 2, 2,
	797, 799, 5, 94, 48, 2, 798, 797, 3, 2, 2, 2, 798, 799, 3, 2, 2, 2, 799,
	804, 3, 2, 2, 2, 800, 802, 5, 86, 44, 2, 801, 803, 7, 127, 2, 2, 802, 801,
	3, 2, 2, 2, 802, 803, 3, 2, 2, 2, 803, 805, 3, 2, 2, 2, 804, 800, 3, 2,
	2, 2, 804, 805, 3, 2, 2, 2, 805, 806, 3, 2, 2, 2, 806, 807, 7, 11, 2, 2,
	807, 85, 3, 2, 2, 2, 808, 811, 5, 176, 89, 2, 809, 811, 5, 178, 90, 2,
	810, 808, 3, 2, 2, 2, 810, 809, 3, 2, 2, 2, 811, 87, 3, 2, 2, 2, 812, 814,
	7, 12, 2, 2, 813, 815, 7, 127, 2, 2, 814, 813, 3, 2, 2, 2, 814, 815, 3,
	2, 2, 2, 815, 816, 3, 2, 2, 2, 816, 830, 5, 98, 50, 2, 817, 819, 7, 127,
	2, 2, 818, 817, 3, 2, 2, 2, 818, 819, 3, 2, 2, 2, 819, 820, 3, 2, 2, 2,
	820, 822, 7, 13, 2, 2, 821, 823, 7, 12, 2, 2, 822, 821, 3, 2, 2, 2, 822,
	823, 3, 2, 2, 2, 823, 825, 3, 2, 2, 2, 824, 826, 7, 127, 2, 2, 825, 824,
	3, 2, 2, 2, 825, 826, 3, 2, 2, 2, 826, 827, 3, 2, 2, 2, 827, 829, 5, 98,
	50, 2, 828, 818, 3, 2, 2, 2, 829, 832, 3, 2, 2, 2, 830, 828, 3, 2, 2, 2,
	830, 831, 3, 2, 2, 2, 831, 89, 3, 2, 2, 2, 832, 830, 3, 2, 2, 2, 833, 840,
	5, 92, 47, 2, 834, 836, 7, 127, 2, 2, 835, 834, 3, 2, 2, 2, 835, 836, 3,
	2, 2, 2, 836, 837, 3, 2, 2, 2, 837, 839, 5, 92, 47, 2, 838, 835, 3, 2,
	2, 2, 839, 842, 3, 2, 2, 2, 840, 838, 3, 2, 2, 2, 840, 841, 3, 2, 2, 2,
	841, 91, 3, 2, 2, 2, 842, 840, 3, 2, 2, 2, 843, 845, 7, 12, 2, 2, 844,
	846, 7, 127, 2, 2, 845, 844, 3, 2, 2, 2, 845, 846, 3, 2, 2, 2, 846, 847,
	3, 2, 2, 2, 847, 848, 5, 96, 49, 2, 848, 93, 3, 2, 2, 2, 849, 851, 7, 7,
	2, 2, 850, 852, 7, 127, 2, 2, 851, 850, 3, 2, 2, 2, 851, 852, 3, 2, 2,
	2, 852, 857, 3, 2, 2, 2, 853, 855, 5, 184, 93, 2, 854, 856, 7, 127, 2,
	2, 855, 854, 3, 2, 2, 2, 855, 856, 3, 2, 2, 2, 856, 858, 3, 2, 2, 2, 857,
	853, 3, 2, 2, 2, 857, 858, 3, 2, 2, 2, 858, 869, 3, 2, 2, 2, 859, 861,
	7, 14, 2, 2, 860, 862, 7, 127, 2, 2, 861, 860, 3, 2, 2, 2, 861, 862, 3,
	2, 2, 2, 862, 867, 3, 2, 2, 2, 863, 865, 5, 184, 93, 2, 864, 866, 7, 127,
	2, 2, 865, 864, 3, 2, 2, 2, 865, 866, 3, 2, 2, 2, 866, 868, 3, 2, 2, 2,
	867, 863, 3, 2, 2, 2, 867, 868, 3, 2, 2, 2, 868, 870, 3, 2, 2, 2, 869,
	859, 3, 2, 2, 2, 869, 870, 3, 2, 2, 2, 870, 95, 3, 2, 2, 2, 871, 872, 5,
	188, 95, 2, 872, 97, 3, 2, 2, 2, 873, 874, 5, 188, 95, 2, 874, 99, 3, 2,
	2, 2, 875, 876, 5, 102, 52, 2, 876, 101, 3, 2, 2, 2, 877, 884, 5, 104,
	53, 2, 878, 879, 7, 127, 2, 2, 879, 880, 7, 75, 2, 2, 880, 881, 7, 127,
	2, 2, 881, 883, 5, 104, 53, 2, 882, 878, 3, 2, 2, 2, 883, 886, 3, 2, 2,
	2, 884, 882, 3, 2, 2, 2, 884, 885, 3, 2, 2, 2, 885, 103, 3, 2, 2, 2, 886,
	884, 3, 2, 2, 2, 887, 894, 5, 106, 54, 2, 888, 889, 7, 127, 2, 2, 889,
	890, 7, 76, 2, 2, 890, 891, 7, 127, 2, 2, 891, 893, 5, 106, 54, 2, 892,
	888, 3, 2, 2, 2, 893, 896, 3, 2, 2, 2, 894, 892, 3, 2, 2, 2, 894, 895,
	3, 2, 2, 2, 895, 105, 3, 2, 2, 2, 896, 894, 3, 2, 2, 2, 897, 904, 5, 108,
	55, 2, 898, 899, 7, 127, 2, 2, 899, 900, 7, 77, 2, 2, 900, 901, 7, 127,
	2, 2, 901, 903, 5, 108, 55, 2, 902, 898, 3, 2, 2, 2, 903, 906, 3, 2, 2,
	2, 904, 902, 3, 2, 2, 2, 904, 905, 3, 2, 2, 2, 905, 107, 3, 2, 2, 2, 906,
	904, 3, 2, 2, 2, 907, 909, 7, 78, 2, 2, 908, 910, 7, 127, 2, 2, 909, 908,
	3, 2, 2, 2, 909, 910, 3, 2, 2, 2, 910, 912, 3, 2, 2, 2, 911, 907, 3, 2,
	2, 2, 912, 915, 3, 2, 2, 2, 913, 911, 3, 2, 2, 2, 913, 914, 3, 2, 2, 2,
	914, 916, 3, 2, 2, 2, 915, 913, 3, 2, 2, 2, 916, 917, 5, 110, 56, 2, 917,
	109, 3, 2, 2, 2, 918, 925, 5, 112, 57, 2, 919, 921, 7, 127, 2, 2, 920,
	919, 3, 2, 2, 2, 920, 921, 3, 2, 2, 2, 921, 922, 3, 2, 2, 2, 922, 924,
	5, 138, 70, 2, 923, 920, 3, 2, 2, 2, 924, 927, 3, 2, 2, 2, 925, 923, 3,
	2, 2, 2, 925, 926, 3, 2, 2, 2, 926, 111, 3, 2, 2, 2, 927, 925, 3, 2, 2,
	2, 928, 947, 5, 114, 58, 2, 929, 931, 7, 127, 2, 2, 930, 929, 3, 2, 2,
	2, 930, 931, 3, 2, 2, 2, 931, 932, 3, 2, 2, 2, 932, 934, 7, 15, 2, 2, 933,
	935, 7, 127, 2, 2, 934, 933, 3, 2, 2, 2, 934, 935, 3, 2, 2, 2, 935, 936,
	3, 2, 2, 2, 936, 946, 5, 114, 58, 2, 937, 939, 7, 127, 2, 2, 938, 937,
	3, 2, 2, 2, 938, 939, 3, 2, 2, 2, 939, 940, 3, 2, 2, 2, 940, 942, 7, 16,
	2, 2, 941, 943, 7, 127, 2, 2, 942, 941, 3, 2, 2, 2, 942, 943, 3, 2, 2,
	2, 943, 944, 3, 2, 2, 2, 944, 946, 5, 114, 58, 2, 945, 930, 3, 2, 2, 2,
	945, 938, 3, 2, 2, 2, 946, 949, 3, 2, 2, 2, 947, 945, 3, 2, 2, 2, 947,
	948, 3, 2, 2, 2, 948, 113, 3, 2, 2, 2, 949, 947, 3, 2, 2, 2, 950, 977,
	5, 116, 59, 2, 951, 953, 7, 127, 2, 2, 952, 951, 3, 2, 2, 2, 952, 953,
	3, 2, 2, 2, 953, 954, 3, 2, 2, 2, 954, 956, 7, 7, 2, 2, 955, 957, 7, 127,
	2, 2, 956, 955, 3, 2, 2, 2, 956, 957, 3, 2, 2, 2, 957, 958, 3, 2, 2, 2,
	958, 976, 5, 116, 59, 2, 959, 961, 7, 127, 2, 2, 960, 959, 3, 2, 2, 2,
	960, 961, 3, 2, 2, 2, 961, 962, 3, 2, 2, 2, 962, 964, 7, 17, 2, 2, 963,
	965, 7, 127, 2, 2, 964, 963, 3, 2, 2, 2, 964, 965, 3, 2, 2, 2, 965, 966,
	3, 2, 2, 2, 966, 976, 5, 116, 59, 2, 967, 969, 7, 127, 2, 2, 968, 967,
	3, 2, 2, 2, 968, 969, 3, 2, 2, 2, 969, 970, 3, 2, 2, 2, 970, 972, 7, 18,
	2, 2, 971, 973, 7, 127, 2, 2, 972, 971, 3, 2, 2, 2, 972, 973, 3, 2, 2,
	2, 973, 974, 3, 2, 2, 2, 974, 976, 5, 116, 59, 2, 975, 952, 3, 2, 2, 2,
	975, 960, 3, 2, 2, 2, 975, 968, 3, 2, 2, 2, 976, 979, 3, 2, 2, 2, 977,
	975, 3, 2, 2, 2, 977, 978, 3, 2, 2, 2, 978, 115, 3, 2, 2, 2, 979, 977,
	3, 2, 2, 2, 980, 991, 5, 118, 60, 2, 981, 983, 7, 127, 2, 2, 982, 981,
	3, 2, 2, 2, 982, 983, 3, 2, 2, 2, 983, 984, 3, 2, 2, 2, 984, 986, 7, 19,
	2, 2, 985, 987, 7, 127, 2, 2, 986, 985, 3, 2, 2, 2, 986, 987, 3, 2, 2,
	2, 987, 988, 3, 2, 2, 2, 988, 990, 5, 118, 60, 2, 989, 982, 3, 2, 2, 2,
	990, 993, 3, 2, 2, 2, 991, 989, 3, 2, 2, 2, 991, 992, 3, 2, 2, 2, 992,
	117, 3, 2, 2, 2, 993, 991, 3, 2, 2, 2, 994, 996, 9, 3, 2, 2, 995, 997,
	7, 127, 2, 2, 996, 995, 3, 2, 2, 2, 996, 997, 3, 2, 2, 2, 997, 999, 3,
	2, 2, 2, 998, 994, 3, 2, 2, 2, 999, 1002, 3, 2, 2, 2, 1000, 998, 3, 2,
	2, 2, 1000, 1001, 3, 2, 2, 2, 1001, 1003, 3, 2, 2, 2, 1002, 1000, 3, 2,
	2, 2, 1003, 1004, 5, 120, 61, 2, 1004, 119, 3, 2, 2, 2, 1005, 1011, 5,
	128, 65, 2, 1006, 1010, 5, 124, 63, 2, 1007, 1010, 5, 122, 62, 2, 1008,
	1010, 5, 126, 64, 2, 1009, 1006, 3, 2, 2, 2, 1009, 1007, 3, 2, 2, 2, 1009,
	1008, 3, 2, 2, 2, 1010, 1013, 3, 2, 2, 2, 1011, 1009, 3, 2, 2, 2, 1011,
	1012, 3, 2, 2, 2, 1012, 121, 3, 2, 2, 2, 1013, 1011, 3, 2, 2, 2, 1014,
	1015, 7, 127, 2, 2, 1015, 1017, 7, 79, 2, 2, 1016, 1018, 7, 127, 2, 2,
	1017, 1016, 3, 2, 2, 2, 1017, 1018, 3, 2, 2, 2, 1018, 1019, 3, 2, 2, 2,
	1019, 1040, 5, 128, 65, 2, 1020, 1022, 7, 127, 2, 2, 1021, 1020, 3, 2,
	2, 2, 1021, 1022, 3, 2, 2, 2, 1022, 1023, 3, 2, 2, 2, 1023, 1024, 7, 10,
	2, 2, 1024, 1025, 5, 100, 51, 2, 1025, 1026, 7, 11, 2, 2, 1026, 1040, 3,
	2, 2, 2, 1027, 1029, 7, 127, 2, 2, 1028, 1027, 3, 2, 2, 2, 1028, 1029,
	3, 2, 2, 2, 1029, 1030, 3, 2, 2, 2, 1030, 1032, 7, 10, 2, 2, 1031, 1033,
	5, 100, 51, 2, 1032, 1031, 3, 2, 2, 2, 1032, 1033, 3, 2, 2, 2, 1033, 1034,
	3, 2, 2, 2, 1034, 1036, 7, 14, 2, 2, 1035, 1037, 5, 100, 51, 2, 1036, 1035,
	3, 2, 2, 2, 1036, 1037, 3, 2, 2, 2, 1037, 1038, 3, 2, 2, 2, 1038, 1040,
	7, 11, 2, 2, 1039, 1014, 3, 2, 2, 2, 1039, 1021, 3, 2, 2, 2, 1039, 1028,
	3, 2, 2, 2, 1040, 123, 3, 2, 2, 2, 1041, 1042, 7, 127, 2, 2, 1042, 1043,
	7, 80, 2, 2, 1043, 1044, 7, 127, 2, 2, 1044, 1052, 7, 63, 2, 2, 1045, 1046,
	7, 127, 2, 2, 1046, 1047, 7, 81, 2, 2, 1047, 1048, 7, 127, 2, 2, 1048,
	1052, 7, 63, 2, 2, 1049, 1050, 7, 127, 2, 2, 1050, 1052, 7, 82, 2, 2, 1051,
	1041, 3, 2, 2, 2, 1051, 1045, 3, 2, 2, 2, 1051, 1049, 3, 2, 2, 2, 1052,
	1054, 3, 2, 2, 2, 1053, 1055, 7, 127, 2, 2, 1054, 1053, 3, 2, 2, 2, 1054,
	1055, 3, 2, 2, 2, 1055, 1056, 3, 2, 2, 2, 1056, 1057, 5, 128, 65, 2, 1057,
	125, 3, 2, 2, 2, 1058, 1059, 7, 127, 2, 2, 1059, 1060, 7, 83, 2, 2, 1060,
	1061, 7, 127, 2, 2, 1061, 1069, 7, 84, 2, 2, 1062, 1063, 7, 127, 2, 2,
	1063, 1064, 7, 83, 2, 2, 1064, 1065, 7, 127, 2, 2, 1065, 1066, 7, 78, 2,
	2, 1066, 1067, 7, 127, 2, 2, 1067, 1069, 7, 84, 2, 2, 1068, 1058, 3, 2,
	2, 2, 1068, 1062, 3, 2, 2, 2, 1069, 127, 3, 2, 2, 2, 1070, 1077, 5, 130,
	66, 2, 1071, 1073, 7, 127, 2, 2, 1072, 1071, 3, 2, 2, 2, 1072, 1073, 3,
	2, 2, 2, 1073, 1074, 3, 2, 2, 2, 1074, 1076, 5, 166, 84, 2, 1075, 1072,
	3, 2, 2, 2, 1076, 1079, 3, 2, 2, 2, 1077, 1075, 3, 2, 2, 2, 1077, 1078,
	3, 2, 2, 2, 1078, 1084, 3, 2, 2, 2, 1079, 1077, 3, 2, 2, 2, 1080, 1082,
	7, 127, 2, 2, 1081, 1080, 3, 2, 2, 2, 1081, 1082, 3, 2, 2, 2, 1082, 1083,
	3, 2, 2, 2, 1083, 1085, 5, 90, 46, 2, 1084, 1081, 3, 2, 2, 2, 1084, 1085,
	3, 2, 2, 2, 1085, 129, 3, 2, 2, 2, 1086, 1165, 5, 132, 67, 2, 1087, 1165,
	5, 178, 90, 2, 1088, 1165, 5, 168, 85, 2, 1089, 1091, 7, 85, 2, 2, 1090,
	1092, 7, 127, 2, 2, 1091, 1090, 3, 2, 2, 2, 1091, 1092, 3, 2, 2, 2, 1092,
	1093, 3, 2, 2, 2, 1093, 1095, 7, 8, 2, 2, 1094, 1096, 7, 127, 2, 2, 1095,
	1094, 3, 2, 2, 2, 1095, 1096, 3, 2, 2, 2, 1096, 1097, 3, 2, 2, 2, 1097,
	1099, 7, 7, 2, 2, 1098, 1100, 7, 127, 2, 2, 1099, 1098, 3, 2, 2, 2, 1099,
	1100, 3, 2, 2, 2, 1100, 1101, 3, 2, 2, 2, 1101, 1165, 7, 9, 2, 2, 1102,
	1165, 5, 162, 82, 2, 1103, 1165, 5, 164, 83, 2, 1104, 1106, 7, 49, 2, 2,
	1105, 1107, 7, 127, 2, 2, 1106, 1105, 3, 2, 2, 2, 1106, 1107, 3, 2, 2,
	2, 1107, 1108, 3, 2, 2, 2, 1108, 1110, 7, 8, 2, 2, 1109, 1111, 7, 127,
	2, 2, 1110, 1109, 3, 2, 2, 2, 1110, 1111, 3, 2, 2, 2, 1111, 1112, 3, 2,
	2, 2, 1112, 1114, 5, 144, 73, 2, 1113, 1115, 7, 127, 2, 2, 1114, 1113,
	3, 2, 2, 2, 1114, 1115, 3, 2, 2, 2, 1115, 1116, 3, 2, 2, 2, 1116, 1117,
	7, 9, 2, 2, 1117, 1165, 3, 2, 2, 2, 1118, 1120, 7, 86, 2, 2, 1119, 1121,
	7, 127, 2, 2, 1120, 1119, 3, 2, 2, 2, 1120, 1121, 3, 2, 2, 2, 1121, 1122,
	3, 2, 2, 2, 1122, 1124, 7, 8, 2, 2, 1123, 1125, 7, 127, 2, 2, 1124, 1123,
	3, 2, 2, 2, 1124, 1125, 3, 2, 2, 2, 1125, 1126, 3, 2, 2, 2, 1126, 1128,
	5, 144, 73, 2, 1127, 1129, 7, 127, 2, 2, 1128, 1127, 3, 2, 2, 2, 1128,
	1129, 3, 2, 2, 2, 1129, 1130, 3, 2, 2, 2, 1130, 1131, 7, 9, 2, 2, 1131,
	1165, 3, 2, 2, 2, 1132, 1134, 7, 87, 2, 2, 1133, 1135, 7, 127, 2, 2, 1134,
	1133, 3, 2, 2, 2, 1134, 1135, 3, 2, 2, 2, 1135, 1136, 3, 2, 2, 2, 1136,
	1138, 7, 8, 2, 2, 1137, 1139, 7, 127, 2, 2, 1138, 1137, 3, 2, 2, 2, 1138,
	1139, 3, 2, 2, 2, 1139, 1140, 3, 2, 2, 2, 1140, 1142, 5, 144, 73, 2, 1141,
	1143, 7, 127, 2, 2, 1142, 1141, 3, 2, 2, 2, 1142, 1143, 3, 2, 2, 2, 1143,
	1144, 3, 2, 2, 2, 1144, 1145, 7, 9, 2, 2, 1145, 1165, 3, 2, 2, 2, 1146,
	1148, 7, 88, 2, 2, 1147, 1149, 7, 127, 2, 2, 1148, 1147, 3, 2, 2, 2, 1148,
	1149, 3, 2, 2, 2, 1149, 1150, 3, 2, 2, 2, 1150, 1152, 7, 8, 2, 2, 1151,
	1153, 7, 127, 2, 2, 1152, 1151, 3, 2, 2, 2, 1152, 1153, 3, 2, 2, 2, 1153,
	1154, 3, 2, 2, 2, 1154, 1156, 5, 144, 73, 2, 1155, 1157, 7, 127, 2, 2,
	1156, 1155, 3, 2, 2, 2, 1156, 1157, 3, 2, 2, 2, 1157, 1158, 3, 2, 2, 2,
	1158, 1159, 7, 9, 2, 2, 1159, 1165, 3, 2, 2, 2, 1160, 1165, 5, 142, 72,
	2, 1161, 1165, 5, 140, 71, 2, 1162, 1165, 5, 148, 75, 2, 1163, 1165, 5,
	172, 87, 2, 1164, 1086, 3, 2, 2, 2, 1164, 1087, 3, 2, 2, 2, 1164, 1088,
	3, 2, 2, 2, 1164, 1089, 3, 2, 2, 2, 1164, 1102, 3, 2, 2, 2, 1164, 1103,
	3, 2, 2, 2, 1164, 1104, 3, 2, 2, 2, 1164, 1118, 3, 2, 2, 2, 1164, 1132,
	3, 2, 2, 2, 1164, 1146, 3, 2, 2, 2, 1164, 1160, 3, 2, 2, 2, 1164, 1161,
	3, 2, 2, 2, 1164, 1162, 3, 2, 2, 2, 1164, 1163, 3, 2, 2, 2, 1165, 131,
	3, 2, 2, 2, 1166, 1173, 5, 174, 88, 2, 1167, 1173, 7, 97, 2, 2, 1168, 1173,
	5, 134, 68, 2, 1169, 1173, 7, 84, 2, 2, 1170, 1173, 5, 176, 89, 2, 1171,
	1173, 5, 136, 69, 2, 1172, 1166, 3, 2, 2, 2, 1172, 1167, 3, 2, 2, 2, 1172,
	1168, 3, 2, 2, 2, 1172, 1169, 3, 2, 2, 2, 1172, 1170, 3, 2, 2, 2, 1172,
	1171, 3, 2, 2, 2, 1173, 133, 3, 2, 2, 2, 1174, 1175, 9, 4, 2, 2, 1175,
	135, 3, 2, 2, 2, 1176, 1178, 7, 10, 2, 2, 1177, 1179, 7, 127, 2, 2, 1178,
	1177, 3, 2, 2, 2, 1178, 1179, 3, 2, 2, 2, 1179, 1197, 3, 2, 2, 2, 1180,
	1182, 5, 100, 51, 2, 1181, 1183, 7, 127, 2, 2, 1182, 1181, 3, 2, 2, 2,
	1182, 1183, 3, 2, 2, 2, 1183, 1194, 3, 2, 2, 2, 1184, 1186, 7, 4, 2, 2,
	1185, 1187, 7, 127, 2, 2, 1186, 1185, 3, 2, 2, 2, 1186, 1187, 3, 2, 2,
	2, 1187, 1188, 3, 2, 2, 2, 1188, 1190, 5, 100, 51, 2, 1189, 1191, 7, 127,
	2, 2, 1190, 1189, 3, 2, 2, 2, 1190, 1191, 3, 2, 2, 2, 1191, 1193, 3, 2,
	2, 2, 1192, 1184, 3, 2, 2, 2, 1193, 1196, 3, 2, 2, 2, 1194, 1192, 3, 2,
	2, 2, 1194, 1195, 3, 2, 2, 2, 1195, 1198, 3, 2, 2, 2, 1196, 1194, 3, 2,
	2, 2, 1197, 1180, 3, 2, 2, 2, 1197, 1198, 3, 2, 2, 2, 1198, 1199, 3, 2,
	2, 2, 1199, 1200, 7, 11, 2, 2, 1200, 137, 3, 2, 2, 2, 1201, 1203, 7, 5,
	2, 2, 1202, 1204, 7, 127, 2, 2, 1203, 1202, 3, 2, 2, 2, 1203, 1204, 3,
	2, 2, 2, 1204, 1205, 3, 2, 2, 2, 1205, 1232, 5, 112, 57, 2, 1206, 1208,
	7, 20, 2, 2, 1207, 1209, 7, 127, 2, 2, 1208, 1207, 3, 2, 2, 2, 1208, 1209,
	3, 2, 2, 2, 1209, 1210, 3, 2, 2, 2, 1210, 1232, 5, 112, 57, 2, 1211, 1213,
	7, 21, 2, 2, 1212, 1214, 7, 127, 2, 2, 1213, 1212, 3, 2, 2, 2, 1213, 1214,
	3, 2, 2, 2, 1214, 1215, 3, 2, 2, 2, 1215, 1232, 5, 112, 57, 2, 1216, 1218,
	7, 22, 2, 2, 1217, 1219, 7, 127, 2, 2, 1218, 1217, 3, 2, 2, 2, 1218, 1219,
	3, 2, 2, 2, 1219, 1220, 3, 2, 2, 2, 1220, 1232, 5, 112, 57, 2, 1221, 1223,
	7, 23, 2, 2, 1222, 1224, 7, 127, 2, 2, 1223, 1222, 3, 2, 2, 2, 1223, 1224,
	3, 2, 2, 2, 1224, 1225, 3, 2, 2, 2, 1225, 1232, 5, 112, 57, 2, 1226, 1228,
	7, 24, 2, 2, 1227, 1229, 7, 127, 2, 2, 1228, 1227, 3, 2, 2, 2, 1228, 1229,
	3, 2, 2, 2, 1229, 1230, 3, 2, 2, 2, 1230, 1232, 5, 112, 57, 2, 1231, 1201,
	3, 2, 2, 2, 1231, 1206, 3, 2, 2, 2, 1231, 1211, 3, 2, 2, 2, 1231, 1216,
	3, 2, 2, 2, 1231, 1221, 3, 2, 2, 2, 1231, 1226, 3, 2, 2, 2, 1232, 139,
	3, 2, 2, 2, 1233, 1235, 7, 8, 2, 2, 1234, 1236, 7, 127, 2, 2, 1235, 1234,
	3, 2, 2, 2, 1235, 1236, 3, 2, 2, 2, 1236, 1237, 3, 2, 2, 2, 1237, 1239,
	5, 100, 51, 2, 1238, 1240, 7, 127, 2, 2, 1239, 1238, 3, 2, 2, 2, 1239,
	1240, 3, 2, 2, 2, 1240, 1241, 3, 2, 2, 2, 1241, 1242, 7, 9, 2, 2, 1242,
	141, 3, 2, 2, 2, 1243, 1248, 5, 78, 40, 2, 1244, 1246, 7, 127, 2, 2, 1245,
	1244, 3, 2, 2, 2, 1245, 1246, 3, 2, 2, 2, 1246, 1247, 3, 2, 2, 2, 1247,
	1249, 5, 80, 41, 2, 1248, 1245, 3, 2, 2, 2, 1249, 1250, 3, 2, 2, 2, 1250,
	1248, 3, 2, 2, 2, 1250, 1251, 3, 2, 2, 2, 1251, 143, 3, 2, 2, 2, 1252,
	1257, 5, 146, 74, 2, 1253, 1255, 7, 127, 2, 2, 1254, 1253, 3, 2, 2, 2,
	1254, 1255, 3, 2, 2, 2, 1255, 1256, 3, 2, 2, 2, 1256, 1258, 5, 68, 35,
	2, 1257, 1254, 3, 2, 2, 2, 1257, 1258, 3, 2, 2, 2, 1258, 145, 3, 2, 2,
	2, 1259, 1260, 5, 172, 87, 2, 1260, 1261, 7, 127, 2, 2, 1261, 1262, 7,
	79, 2, 2, 1262, 1263, 7, 127, 2, 2, 1263, 1264, 5, 100, 51, 2, 1264, 147,
	3, 2, 2, 2, 1265, 1267, 5, 150, 76, 2, 1266, 1268, 7, 127, 2, 2, 1267,
	1266, 3, 2, 2, 2, 1267, 1268, 3, 2, 2, 2, 1268, 1269, 3, 2, 2, 2, 1269,
	1271, 7, 8, 2, 2, 1270, 1272, 7, 127, 2, 2, 1271, 1270, 3, 2, 2, 2, 1271,
	1272, 3, 2, 2, 2, 1272, 1277, 3, 2, 2, 2, 1273, 1275, 7, 65, 2, 2, 1274,
	1276, 7, 127, 2, 2, 1275, 1274, 3, 2, 2, 2, 1275, 1276, 3, 2, 2, 2, 1276,
	1278, 3, 2, 2, 2, 1277, 1273, 3, 2, 2, 2, 1277, 1278, 3, 2, 2, 2, 1278,
	1296, 3, 2, 2, 2, 1279, 1281, 5, 100, 51, 2, 1280, 1282, 7, 127, 2, 2,
	1281, 1280, 3, 2, 2, 2, 1281, 1282, 3, 2, 2, 2, 1282, 1293, 3, 2, 2, 2,
	1283, 1285, 7, 4, 2, 2, 1284, 1286, 7, 127, 2, 2, 1285, 1284, 3, 2, 2,
	2, 1285, 1286, 3, 2, 2, 2, 1286, 1287, 3, 2, 2, 2, 1287, 1289, 5, 100,
	51, 2, 1288, 1290, 7, 127, 2, 2, 1289, 1288, 3, 2, 2, 2, 1289, 1290, 3,
	2, 2, 2, 1290, 1292, 3, 2, 2, 2, 1291, 1283, 3, 2, 2, 2, 1292, 1295, 3,
	2, 2, 2, 1293, 1291, 3, 2, 2, 2, 1293, 1294, 3, 2, 2, 2, 1294, 1297, 3,
	2, 2, 2, 1295, 1293, 3, 2, 2, 2, 1296, 1279, 3, 2, 2, 2, 1296, 1297, 3,
	2, 2, 2, 1297, 1298, 3, 2, 2, 2, 1298, 1299, 7, 9, 2, 2, 1299, 149, 3,
	2, 2, 2, 1300, 1301, 5, 160, 81, 2, 1301, 1302, 5, 192, 97, 2, 1302, 1305,
	3, 2, 2, 2, 1303, 1305, 7, 91, 2, 2, 1304, 1300, 3, 2, 2, 2, 1304, 1303,
	3, 2, 2, 2, 1305, 151, 3, 2, 2, 2, 1306, 1308, 5, 158, 80, 2, 1307, 1309,
	7, 127, 2, 2, 1308, 1307, 3, 2, 2, 2, 1308, 1309, 3, 2, 2, 2, 1309, 1310,
	3, 2, 2, 2, 1310, 1312, 7, 8, 2, 2, 1311, 1313, 7, 127, 2, 2, 1312, 1311,
	3, 2, 2, 2, 1312, 1313, 3, 2, 2, 2, 1313, 1331, 3, 2, 2, 2, 1314, 1316,
	5, 100, 51, 2, 1315, 1317, 7, 127, 2, 2, 1316, 1315, 3, 2, 2, 2, 1316,
	1317, 3, 2, 2, 2, 1317, 1328, 3, 2, 2, 2, 1318, 1320, 7, 4, 2, 2, 1319,
	1321, 7, 127, 2, 2, 1320, 1319, 3, 2, 2, 2, 1320, 1321, 3, 2, 2, 2, 1321,
	1322, 3, 2, 2, 2, 1322, 1324, 5, 100, 51, 2, 1323, 1325, 7, 127, 2, 2,
	1324, 1323, 3, 2, 2, 2, 1324, 1325, 3, 2, 2, 2, 1325, 1327, 3, 2, 2, 2,
	1326, 1318, 3, 2, 2, 2, 1327, 1330, 3, 2, 2, 2, 1328, 1326, 3, 2, 2, 2,
	1328, 1329, 3, 2, 2, 2, 1329, 1332, 3, 2, 2, 2, 1330, 1328, 3, 2, 2, 2,
	1331, 1314, 3, 2, 2, 2, 1331, 1332, 3, 2, 2, 2, 1332, 1333, 3, 2, 2, 2,
	1333, 1334, 7, 9, 2, 2, 1334, 153, 3, 2, 2, 2, 1335, 1336, 5, 158, 80,
	2, 1336, 155, 3, 2, 2, 2, 1337, 1338, 5, 192, 97, 2, 1338, 157, 3, 2, 2,
	2, 1339, 1340, 5, 160, 81, 2, 1340, 1341, 5, 192, 97, 2, 1341, 159, 3,
	2, 2, 2, 1342, 1343, 5, 192, 97, 2, 1343, 1344, 7, 25, 2, 2, 1344, 1346,
	3, 2, 2, 2, 1345, 1342, 3, 2, 2, 2, 1346, 1349, 3, 2, 2, 2, 1347, 1345,
	3, 2, 2, 2, 1347, 1348, 3, 2, 2, 2, 1348, 161, 3, 2, 2, 2, 1349, 1347,
	3, 2, 2, 2, 1350, 1352, 7, 10, 2, 2, 1351, 1353, 7, 127, 2, 2, 1352, 1351,
	3, 2, 2, 2, 1352, 1353, 3, 2, 2, 2, 1353, 1354, 3, 2, 2, 2, 1354, 1363,
	5, 144, 73, 2, 1355, 1357, 7, 127, 2, 2, 1356, 1355, 3, 2, 2, 2, 1356,
	1357, 3, 2, 2, 2, 1357, 1358, 3, 2, 2, 2, 1358, 1360, 7, 13, 2, 2, 1359,
	1361, 7, 127, 2, 2, 1360, 1359, 3, 2, 2, 2, 1360, 1361, 3, 2, 2, 2, 1361,
	1362, 3, 2, 2, 2, 1362, 1364, 5, 100, 51, 2, 1363, 1356, 3, 2, 2, 2, 1363,
	1364, 3, 2, 2, 2, 1364, 1366, 3, 2, 2, 2, 1365, 1367, 7, 127, 2, 2, 1366,
	1365, 3, 2, 2, 2, 1366, 1367, 3, 2, 2, 2, 1367, 1368, 3, 2, 2, 2, 1368,
	1369, 7, 11, 2, 2, 1369, 163, 3, 2, 2, 2, 1370, 1372, 7, 10, 2, 2, 1371,
	1373, 7, 127, 2, 2, 1372, 1371, 3, 2, 2, 2, 1372, 1373, 3, 2, 2, 2, 1373,
	1382, 3, 2, 2, 2, 1374, 1376, 5, 172, 87, 2, 1375, 1377, 7, 127, 2, 2,
	1376, 1375, 3, 2, 2, 2, 1376, 1377, 3, 2, 2, 2, 1377, 1378, 3, 2, 2, 2,
	1378, 1380, 7, 5, 2, 2, 1379, 1381, 7, 127, 2, 2, 1380, 1379, 3, 2, 2,
	2, 1380, 1381, 3, 2, 2, 2, 1381, 1383, 3, 2, 2, 2, 1382, 1374, 3, 2, 2,
	2, 1382, 1383, 3, 2, 2, 2, 1383, 1384, 3, 2, 2, 2, 1384, 1386, 5, 142,
	72, 2, 1385, 1387, 7, 127, 2, 2, 1386, 1385, 3, 2, 2, 2, 1386, 1387, 3,
	2, 2, 2, 1387, 1396, 3, 2, 2, 2, 1388, 1390, 7, 74, 2, 2, 1389, 1391, 7,
	127, 2, 2, 1390, 1389, 3, 2, 2, 2, 1390, 1391, 3, 2, 2, 2, 1391, 1392,
	3, 2, 2, 2, 1392, 1394, 5, 100, 51, 2, 1393, 1395, 7, 127, 2, 2, 1394,
	1393, 3, 2, 2, 2, 1394, 1395, 3, 2, 2, 2, 1395, 1397, 3, 2, 2, 2, 1396,
	1388, 3, 2, 2, 2, 1396, 1397, 3, 2, 2, 2, 1397, 1398, 3, 2, 2, 2, 1398,
	1400, 7, 13, 2, 2, 1399, 1401, 7, 127, 2, 2, 1400, 1399, 3, 2, 2, 2, 1400,
	1401, 3, 2, 2, 2, 1401, 1402, 3, 2, 2, 2, 1402, 1404, 5, 100, 51, 2, 1403,
	1405, 7, 127, 2, 2, 1404, 1403, 3, 2, 2, 2, 1404, 1405, 3, 2, 2, 2, 1405,
	1406, 3, 2, 2, 2, 1406, 1407, 7, 11, 2, 2, 1407, 165, 3, 2, 2, 2, 1408,
	1410, 7, 25, 2, 2, 1409, 1411, 7, 127, 2, 2, 1410, 1409, 3, 2, 2, 2, 1410,
	1411, 3, 2, 2, 2, 1411, 1412, 3, 2, 2, 2, 1412, 1413, 5, 182, 92, 2, 1413,
	167, 3, 2, 2, 2, 1414, 1419, 7, 92, 2, 2, 1415, 1417, 7, 127, 2, 2, 1416,
	1415, 3, 2, 2, 2, 1416, 1417, 3, 2, 2, 2, 1417, 1418, 3, 2, 2, 2, 1418,
	1420, 5, 170, 86, 2, 1419, 1416, 3, 2, 2, 2, 1420, 1421, 3, 2, 2, 2, 1421,
	1419, 3, 2, 2, 2, 1421, 1422, 3, 2, 2, 2, 1422, 1437, 3, 2, 2, 2, 1423,
	1425, 7, 92, 2, 2, 1424, 1426, 7, 127, 2, 2, 1425, 1424, 3, 2, 2, 2, 1425,
	1426, 3, 2, 2, 2, 1426, 1427, 3, 2, 2, 2, 1427, 1432, 5, 100, 51, 2, 1428,
	1430, 7, 127, 2, 2, 1429, 1428, 3, 2, 2, 2, 1429, 1430, 3, 2, 2, 2, 1430,
	1431, 3, 2, 2, 2, 1431, 1433, 5, 170, 86, 2, 1432, 1429, 3, 2, 2, 2, 1433,
	1434, 3, 2, 2, 2, 1434, 1432, 3, 2, 2, 2, 1434, 1435, 3, 2, 2, 2, 1435,
	1437, 3, 2, 2, 2, 1436, 1414, 3, 2, 2, 2, 1436, 1423, 3, 2, 2, 2, 1437,
	1446, 3, 2, 2, 2, 1438, 1440, 7, 127, 2, 2, 1439, 1438, 3, 2, 2, 2, 1439,
	1440, 3, 2, 2, 2, 1440, 1441, 3, 2, 2, 2, 1441, 1443, 7, 93, 2, 2, 1442,
	1444, 7, 127, 2, 2, 1443, 1442, 3, 2, 2, 2, 1443, 1444, 3, 2, 2, 2, 1444,
	1445, 3, 2, 2, 2, 1445, 1447, 5, 100, 51, 2, 1446, 1439, 3, 2, 2, 2, 1446,
	1447, 3, 2, 2, 2, 1447, 1449, 3, 2, 2, 2, 1448, 1450, 7, 127, 2, 2, 1449,
	1448, 3, 2, 2, 2, 1449, 1450, 3, 2, 2, 2, 1450, 1451, 3, 2, 2, 2, 1451,
	1452, 7, 94, 2, 2, 1452, 169, 3, 2, 2, 2, 1453, 1455, 7, 95, 2, 2, 1454,
	1456, 7, 127, 2, 2, 1455, 1454, 3, 2, 2, 2, 1455, 1456, 3, 2, 2, 2, 1456,
	1457, 3, 2, 2, 2, 1457, 1459, 5, 100, 51, 2, 1458, 1460, 7, 127, 2, 2,
	1459, 1458, 3, 2, 2, 2, 1459, 1460, 3, 2, 2, 2, 1460, 1461, 3, 2, 2, 2,
	1461, 1463, 7, 96, 2, 2, 1462, 1464, 7, 127, 2, 2, 1463, 1462, 3, 2, 2,
	2, 1463, 1464, 3, 2, 2, 2, 1464, 1465, 3, 2, 2, 2, 1465, 1466, 5, 100,
	51, 2, 1466, 171, 3, 2, 2, 2, 1467, 1468, 5, 192, 97, 2, 1468, 173, 3,
	2, 2, 2, 1469, 1472, 5, 186, 94, 2, 1470, 1472, 5, 184, 93, 2, 1471, 1469,
	3, 2, 2, 2, 1471, 1470, 3, 2, 2, 2, 1472, 175, 3, 2, 2, 2, 1473, 1475,
	7, 26, 2, 2, 1474, 1476, 7, 127, 2, 2, 1475, 1474, 3, 2, 2, 2, 1475, 1476,
	3, 2, 2, 2, 1476, 1510, 3, 2, 2, 2, 1477, 1479, 5, 182, 92, 2, 1478, 1480,
	7, 127, 2, 2, 1479, 1478, 3, 2, 2, 2, 1479, 1480, 3, 2, 2, 2, 1480, 1481,
	3, 2, 2, 2, 1481, 1483, 7, 12, 2, 2, 1482, 1484, 7, 127, 2, 2, 1483, 1482,
	3, 2, 2, 2, 1483, 1484, 3, 2, 2, 2, 1484, 1485, 3, 2, 2, 2, 1485, 1487,
	5, 100, 51, 2, 1486, 1488, 7, 127, 2, 2, 1487, 1486, 3, 2, 2, 2, 1487,
	1488, 3, 2, 2, 2, 1488, 1507, 3, 2, 2, 2, 1489, 1491, 7, 4, 2, 2, 1490,
	1492, 7, 127, 2, 2, 1491, 1490, 3, 2, 2, 2, 1491, 1492, 3, 2, 2, 2, 1492,
	1493, 3, 2, 2, 2, 1493, 1495, 5, 182, 92, 2, 1494, 1496, 7, 127, 2, 2,
	1495, 1494, 3, 2, 2, 2, 1495, 1496, 3, 2, 2, 2, 1496, 1497, 3, 2, 2, 2,
	1497, 1499, 7, 12, 2, 2, 1498, 1500, 7, 127, 2, 2, 1499, 1498, 3, 2, 2,
	2, 1499, 1500, 3, 2, 2, 2, 1500, 1501, 3, 2, 2, 2, 1501, 1503, 5, 100,
	51, 2, 1502, 1504, 7, 127, 2, 2, 1503, 1502, 3, 2, 2, 2, 1503, 1504, 3,
	2, 2, 2, 1504, 1506, 3, 2, 2, 2, 1505, 1489, 3, 2, 2, 2, 1506, 1509, 3,
	2, 2, 2, 1507, 1505, 3, 2, 2, 2, 1507, 1508, 3, 2, 2, 2, 1508, 1511, 3,
	2, 2, 2, 1509, 1507, 3, 2, 2, 2, 1510, 1477, 3, 2, 2, 2, 1510, 1511, 3,
	2, 2, 2, 1511, 1512, 3, 2, 2, 2, 1512, 1513, 7, 27, 2, 2, 1513, 177, 3,
	2, 2, 2, 1514, 1517, 7, 28, 2, 2, 1515, 1518, 5, 192, 97, 2, 1516, 1518,
	7, 100, 2, 2, 1517, 1515, 3, 2, 2, 2, 1517, 1516, 3, 2, 2, 2, 1518, 179,
	3, 2, 2, 2, 1519, 1524, 5, 130, 66, 2, 1520, 1522, 7, 127, 2, 2, 1521,
	1520, 3, 2, 2, 2, 1521, 1522, 3, 2, 2, 2, 1522, 1523, 3, 2, 2, 2, 1523,
	1525, 5, 166, 84, 2, 1524, 1521, 3, 2, 2, 2, 1525, 1526, 3, 2, 2, 2, 1526,
	1524, 3, 2, 2, 2, 1526, 1527, 3, 2, 2, 2, 1527, 181, 3, 2, 2, 2, 1528,
	1529, 5, 188, 95, 2, 1529, 183, 3, 2, 2, 2, 1530, 1531, 9, 5, 2, 2, 1531,
	185, 3, 2, 2, 2, 1532, 1533, 9, 6, 2, 2, 1533, 187, 3, 2, 2, 2, 1534, 1537,
	5, 192, 97, 2, 1535, 1537, 5, 190, 96, 2, 1536, 1534, 3, 2, 2, 2, 1536,
	1535, 3, 2, 2, 2, 1537, 189, 3, 2, 2, 2, 1538, 1539, 9, 7, 2, 2, 1539,
	191, 3, 2, 2, 2, 1540, 1541, 9, 8, 2, 2, 1541, 193, 3, 2, 2, 2, 1542, 1543,
	9, 9, 2, 2, 1543, 195, 3, 2, 2, 2, 1544, 1545, 9, 10, 2, 2, 1545, 197,
	3, 2, 2, 2, 1546, 1547, 9, 11, 2, 2, 1547, 199, 3, 2, 2, 2, 287, 201, 205,
	208, 211, 219, 223, 228, 235, 240, 243, 247, 251, 255, 261, 265, 270, 275,
	279, 282, 284, 288, 292, 297, 301, 306, 310, 319, 324, 328, 332, 336, 339,
	343, 353, 360, 373, 377, 383, 387, 391, 396, 401, 405, 411, 415, 421, 425,
	431, 435, 439, 443, 447, 451, 456, 463, 467, 472, 479, 485, 490, 496, 502,
	507, 511, 516, 519, 522, 525, 532, 539, 542, 548, 551, 557, 561, 565, 569,
	573, 578, 583, 587, 592, 595, 604, 613, 618, 631, 634, 642, 646, 651, 656,
	660, 665, 671, 676, 683, 687, 691, 693, 697, 699, 703, 705, 711, 717, 721,
	724, 727, 731, 737, 741, 744, 747, 753, 756, 759, 763, 769, 772, 775, 779,
	783, 787, 789, 793, 795, 798, 802, 804, 810, 814, 818, 822, 825, 830, 835,
	840, 845, 851, 855, 857, 861, 865, 867, 869, 884, 894, 904, 909, 913, 920,
	925, 930, 934, 938, 942, 945, 947, 952, 956, 960, 964, 968, 972, 975, 977,
	982, 986, 991, 996, 1000, 1009, 1011, 1017, 1021, 1028, 1032, 1036, 1039,
	1051, 1054, 1068, 1072, 1077, 1081, 1084, 1091, 1095, 1099, 1106, 1110,
	1114, 1120, 1124, 1128, 1134, 1138, 1142, 1148, 1152, 1156, 1164, 1172,
	1178, 1182, 1186, 1190, 1194, 1197, 1203, 1208, 1213, 1218, 1223, 1228,
	1231, 1235, 1239, 1245, 1250, 1254, 1257, 1267, 1271, 1275, 1277, 1281,
	1285, 1289, 1293, 1296, 1304, 1308, 1312, 1316, 1320, 1324, 1328, 1331,
	1347, 1352, 1356, 1360, 1363, 1366, 1372, 1376, 1380, 1382, 1386, 1390,
	1394, 1396, 1400, 1404, 1410, 1416, 1421, 1425, 1429, 1434, 1436, 1439,
	1443, 1446, 1449, 1455, 1459, 1463, 1471, 1475, 1479, 1483, 1487, 1491,
	1495, 1499, 1503, 1507, 1510, 1517, 1521, 1526, 1536,
}
var literalNames = []string{
	"", "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "']'", "':'",
	"'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'<>'", "'<'", "'>'",
	"'<='", "'>='", "'.'", "'{'", "'}'", "'$'", "'\u27E8'", "'\u3008'", "'\uFE64'",
	"'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", "'\uFF1E'", "'\u00AD'",
	"'\u2010'", "'\u2011'", "'\u2012'", "'\u2013'", "'\u2014'", "'\u2015'",
	"'\u2212'", "'\uFE58'", "'\uFE63'", "'\uFF0D'", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"'0'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "UNION", "ALL", "OPTIONAL", "MATCH",
	"UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", "DELETE", "REMOVE",
	"CALL", "YIELD", "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP",
	"LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE", "OR", "XOR",
	"AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL", "COUNT",
	"ANY", "NONE", "SINGLE", "TRUE", "FALSE", "EXISTS", "CASE", "ELSE", "END",
	"WHEN", "THEN", "StringLiteral", "EscapedChar", "HexInteger", "DecimalInteger",
	"OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit",
	"OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "CONSTRAINT",
	"DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", "DROP",
	"FILTER", "EXTRACT", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart",
	"EscapedSymbolicName", "SP", "WHITESPACE", "Comment",
}

var ruleNames = []string{
	"oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", "oC_Union",
	"oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "oC_UpdatingClause",
	"oC_ReadingClause", "oC_Match", "oC_Unwind", "oC_Merge", "oC_MergeAction",
	"oC_Create", "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem",
	"oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem",
	"oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem",
	"oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern",
	"oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern",
	"oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail",
	"oC_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel",
	"oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression",
	"oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression",
	"oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression",
	"oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression",
	"oC_ListOperatorExpression", "oC_StringOperatorExpression", "oC_NullOperatorExpression",
	"oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral",
	"oC_ListLiteral", "oC_PartialComparisonExpression", "oC_ParenthesizedExpression",
	"oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", "oC_FunctionInvocation",
	"oC_FunctionName", "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation",
	"oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension",
	"oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternatives",
	"oC_Variable", "oC_NumberLiteral", "oC_MapLiteral", "oC_Parameter", "oC_PropertyExpression",
	"oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName",
	"oC_ReservedWord", "oC_SymbolicName", "oC_LeftArrowHead", "oC_RightArrowHead",
	"oC_Dash",
}

type CypherParser struct {
	*antlr.BaseParser
}

// NewCypherParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *CypherParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewCypherParser(input antlr.TokenStream) *CypherParser {
	this := new(CypherParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Cypher.g4"

	return this
}

// CypherParser tokens.
const (
	CypherParserEOF                   = antlr.TokenEOF
	CypherParserT__0                  = 1
	CypherParserT__1                  = 2
	CypherParserT__2                  = 3
	CypherParserT__3                  = 4
	CypherParserT__4                  = 5
	CypherParserT__5                  = 6
	CypherParserT__6                  = 7
	CypherParserT__7                  = 8
	CypherParserT__8                  = 9
	CypherParserT__9                  = 10
	CypherParserT__10                 = 11
	CypherParserT__11                 = 12
	CypherParserT__12                 = 13
	CypherParserT__13                 = 14
	CypherParserT__14                 = 15
	CypherParserT__15                 = 16
	CypherParserT__16                 = 17
	CypherParserT__17                 = 18
	CypherParserT__18                 = 19
	CypherParserT__19                 = 20
	CypherParserT__20                 = 21
	CypherParserT__21                 = 22
	CypherParserT__22                 = 23
	CypherParserT__23                 = 24
	CypherParserT__24                 = 25
	CypherParserT__25                 = 26
	CypherParserT__26                 = 27
	CypherParserT__27                 = 28
	CypherParserT__28                 = 29
	CypherParserT__29                 = 30
	CypherParserT__30                 = 31
	CypherParserT__31                 = 32
	CypherParserT__32                 = 33
	CypherParserT__33                 = 34
	CypherParserT__34                 = 35
	CypherParserT__35                 = 36
	CypherParserT__36                 = 37
	CypherParserT__37                 = 38
	CypherParserT__38                 = 39
	CypherParserT__39                 = 40
	CypherParserT__40                 = 41
	CypherParserT__41                 = 42
	CypherParserT__42                 = 43
	CypherParserT__43                 = 44
	CypherParserT__44                 = 45
	CypherParserUNION                 = 46
	CypherParserALL                   = 47
	CypherParserOPTIONAL              = 48
	CypherParserMATCH                 = 49
	CypherParserUNWIND                = 50
	CypherParserAS                    = 51
	CypherParserMERGE                 = 52
	CypherParserON                    = 53
	CypherParserCREATE                = 54
	CypherParserSET                   = 55
	CypherParserDETACH                = 56
	CypherParserDELETE                = 57
	CypherParserREMOVE                = 58
	CypherParserCALL                  = 59
	CypherParserYIELD                 = 60
	CypherParserWITH                  = 61
	CypherParserRETURN                = 62
	CypherParserDISTINCT              = 63
	CypherParserORDER                 = 64
	CypherParserBY                    = 65
	CypherParserL_SKIP                = 66
	CypherParserLIMIT                 = 67
	CypherParserASCENDING             = 68
	CypherParserASC                   = 69
	CypherParserDESCENDING            = 70
	CypherParserDESC                  = 71
	CypherParserWHERE                 = 72
	CypherParserOR                    = 73
	CypherParserXOR                   = 74
	CypherParserAND                   = 75
	CypherParserNOT                   = 76
	CypherParserIN                    = 77
	CypherParserSTARTS                = 78
	CypherParserENDS                  = 79
	CypherParserCONTAINS              = 80
	CypherParserIS                    = 81
	CypherParserNULL                  = 82
	CypherParserCOUNT                 = 83
	CypherParserANY                   = 84
	CypherParserNONE                  = 85
	CypherParserSINGLE                = 86
	CypherParserTRUE                  = 87
	CypherParserFALSE                 = 88
	CypherParserEXISTS                = 89
	CypherParserCASE                  = 90
	CypherParserELSE                  = 91
	CypherParserEND                   = 92
	CypherParserWHEN                  = 93
	CypherParserTHEN                  = 94
	CypherParserStringLiteral         = 95
	CypherParserEscapedChar           = 96
	CypherParserHexInteger            = 97
	CypherParserDecimalInteger        = 98
	CypherParserOctalInteger          = 99
	CypherParserHexLetter             = 100
	CypherParserHexDigit              = 101
	CypherParserDigit                 = 102
	CypherParserNonZeroDigit          = 103
	CypherParserNonZeroOctDigit       = 104
	CypherParserOctDigit              = 105
	CypherParserZeroDigit             = 106
	CypherParserExponentDecimalReal   = 107
	CypherParserRegularDecimalReal    = 108
	CypherParserCONSTRAINT            = 109
	CypherParserDO                    = 110
	CypherParserFOR                   = 111
	CypherParserREQUIRE               = 112
	CypherParserUNIQUE                = 113
	CypherParserMANDATORY             = 114
	CypherParserSCALAR                = 115
	CypherParserOF                    = 116
	CypherParserADD                   = 117
	CypherParserDROP                  = 118
	CypherParserFILTER                = 119
	CypherParserEXTRACT               = 120
	CypherParserUnescapedSymbolicName = 121
	CypherParserIdentifierStart       = 122
	CypherParserIdentifierPart        = 123
	CypherParserEscapedSymbolicName   = 124
	CypherParserSP                    = 125
	CypherParserWHITESPACE            = 126
	CypherParserComment               = 127
)

// CypherParser rules.
const (
	CypherParserRULE_oC_Cypher                           = 0
	CypherParserRULE_oC_Statement                        = 1
	CypherParserRULE_oC_Query                            = 2
	CypherParserRULE_oC_RegularQuery                     = 3
	CypherParserRULE_oC_Union                            = 4
	CypherParserRULE_oC_SingleQuery                      = 5
	CypherParserRULE_oC_SinglePartQuery                  = 6
	CypherParserRULE_oC_MultiPartQuery                   = 7
	CypherParserRULE_oC_UpdatingClause                   = 8
	CypherParserRULE_oC_ReadingClause                    = 9
	CypherParserRULE_oC_Match                            = 10
	CypherParserRULE_oC_Unwind                           = 11
	CypherParserRULE_oC_Merge                            = 12
	CypherParserRULE_oC_MergeAction                      = 13
	CypherParserRULE_oC_Create                           = 14
	CypherParserRULE_oC_Set                              = 15
	CypherParserRULE_oC_SetItem                          = 16
	CypherParserRULE_oC_Delete                           = 17
	CypherParserRULE_oC_Remove                           = 18
	CypherParserRULE_oC_RemoveItem                       = 19
	CypherParserRULE_oC_InQueryCall                      = 20
	CypherParserRULE_oC_StandaloneCall                   = 21
	CypherParserRULE_oC_YieldItems                       = 22
	CypherParserRULE_oC_YieldItem                        = 23
	CypherParserRULE_oC_With                             = 24
	CypherParserRULE_oC_Return                           = 25
	CypherParserRULE_oC_ProjectionBody                   = 26
	CypherParserRULE_oC_ProjectionItems                  = 27
	CypherParserRULE_oC_ProjectionItem                   = 28
	CypherParserRULE_oC_Order                            = 29
	CypherParserRULE_oC_Skip                             = 30
	CypherParserRULE_oC_Limit                            = 31
	CypherParserRULE_oC_SortItem                         = 32
	CypherParserRULE_oC_Where                            = 33
	CypherParserRULE_oC_Pattern                          = 34
	CypherParserRULE_oC_PatternPart                      = 35
	CypherParserRULE_oC_AnonymousPatternPart             = 36
	CypherParserRULE_oC_PatternElement                   = 37
	CypherParserRULE_oC_NodePattern                      = 38
	CypherParserRULE_oC_PatternElementChain              = 39
	CypherParserRULE_oC_RelationshipPattern              = 40
	CypherParserRULE_oC_RelationshipDetail               = 41
	CypherParserRULE_oC_Properties                       = 42
	CypherParserRULE_oC_RelationshipTypes                = 43
	CypherParserRULE_oC_NodeLabels                       = 44
	CypherParserRULE_oC_NodeLabel                        = 45
	CypherParserRULE_oC_RangeLiteral                     = 46
	CypherParserRULE_oC_LabelName                        = 47
	CypherParserRULE_oC_RelTypeName                      = 48
	CypherParserRULE_oC_Expression                       = 49
	CypherParserRULE_oC_OrExpression                     = 50
	CypherParserRULE_oC_XorExpression                    = 51
	CypherParserRULE_oC_AndExpression                    = 52
	CypherParserRULE_oC_NotExpression                    = 53
	CypherParserRULE_oC_ComparisonExpression             = 54
	CypherParserRULE_oC_AddOrSubtractExpression          = 55
	CypherParserRULE_oC_MultiplyDivideModuloExpression   = 56
	CypherParserRULE_oC_PowerOfExpression                = 57
	CypherParserRULE_oC_UnaryAddOrSubtractExpression     = 58
	CypherParserRULE_oC_StringListNullOperatorExpression = 59
	CypherParserRULE_oC_ListOperatorExpression           = 60
	CypherParserRULE_oC_StringOperatorExpression         = 61
	CypherParserRULE_oC_NullOperatorExpression           = 62
	CypherParserRULE_oC_PropertyOrLabelsExpression       = 63
	CypherParserRULE_oC_Atom                             = 64
	CypherParserRULE_oC_Literal                          = 65
	CypherParserRULE_oC_BooleanLiteral                   = 66
	CypherParserRULE_oC_ListLiteral                      = 67
	CypherParserRULE_oC_PartialComparisonExpression      = 68
	CypherParserRULE_oC_ParenthesizedExpression          = 69
	CypherParserRULE_oC_RelationshipsPattern             = 70
	CypherParserRULE_oC_FilterExpression                 = 71
	CypherParserRULE_oC_IdInColl                         = 72
	CypherParserRULE_oC_FunctionInvocation               = 73
	CypherParserRULE_oC_FunctionName                     = 74
	CypherParserRULE_oC_ExplicitProcedureInvocation      = 75
	CypherParserRULE_oC_ImplicitProcedureInvocation      = 76
	CypherParserRULE_oC_ProcedureResultField             = 77
	CypherParserRULE_oC_ProcedureName                    = 78
	CypherParserRULE_oC_Namespace                        = 79
	CypherParserRULE_oC_ListComprehension                = 80
	CypherParserRULE_oC_PatternComprehension             = 81
	CypherParserRULE_oC_PropertyLookup                   = 82
	CypherParserRULE_oC_CaseExpression                   = 83
	CypherParserRULE_oC_CaseAlternatives                 = 84
	CypherParserRULE_oC_Variable                         = 85
	CypherParserRULE_oC_NumberLiteral                    = 86
	CypherParserRULE_oC_MapLiteral                       = 87
	CypherParserRULE_oC_Parameter                        = 88
	CypherParserRULE_oC_PropertyExpression               = 89
	CypherParserRULE_oC_PropertyKeyName                  = 90
	CypherParserRULE_oC_IntegerLiteral                   = 91
	CypherParserRULE_oC_DoubleLiteral                    = 92
	CypherParserRULE_oC_SchemaName                       = 93
	CypherParserRULE_oC_ReservedWord                     = 94
	CypherParserRULE_oC_SymbolicName                     = 95
	CypherParserRULE_oC_LeftArrowHead                    = 96
	CypherParserRULE_oC_RightArrowHead                   = 97
	CypherParserRULE_oC_Dash                             = 98
)

// IOC_CypherContext is an interface to support dynamic dispatch.
type IOC_CypherContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_CypherContext differentiates from other interfaces.
	IsOC_CypherContext()
}

type OC_CypherContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_CypherContext() *OC_CypherContext {
	var p = new(OC_CypherContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Cypher
	return p
}

func (*OC_CypherContext) IsOC_CypherContext() {}

func NewOC_CypherContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_CypherContext {
	var p = new(OC_CypherContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Cypher

	return p
}

func (s *OC_CypherContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_CypherContext) OC_Statement() IOC_StatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_StatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_StatementContext)
}

func (s *OC_CypherContext) EOF() antlr.TerminalNode {
	return s.GetToken(CypherParserEOF, 0)
}

func (s *OC_CypherContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_CypherContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_CypherContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_CypherContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_CypherContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Cypher(s)
	}
}

func (s *OC_CypherContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Cypher(s)
	}
}

func (p *CypherParser) OC_Cypher() (localctx IOC_CypherContext) {
	localctx = NewOC_CypherContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, CypherParserRULE_oC_Cypher)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(199)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(198)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(201)
		p.OC_Statement()
	}
	p.SetState(206)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) == 1 {
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(202)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(205)
			p.Match(CypherParserT__0)
		}

	}
	p.SetState(209)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(208)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(211)
		p.Match(CypherParserEOF)
	}

	return localctx
}

// IOC_StatementContext is an interface to support dynamic dispatch.
type IOC_StatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_StatementContext differentiates from other interfaces.
	IsOC_StatementContext()
}

type OC_StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_StatementContext() *OC_StatementContext {
	var p = new(OC_StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Statement
	return p
}

func (*OC_StatementContext) IsOC_StatementContext() {}

func NewOC_StatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_StatementContext {
	var p = new(OC_StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Statement

	return p
}

func (s *OC_StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_StatementContext) OC_Query() IOC_QueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_QueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_QueryContext)
}

func (s *OC_StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Statement(s)
	}
}

func (s *OC_StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Statement(s)
	}
}

func (p *CypherParser) OC_Statement() (localctx IOC_StatementContext) {
	localctx = NewOC_StatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, CypherParserRULE_oC_Statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(213)
		p.OC_Query()
	}

	return localctx
}

// IOC_QueryContext is an interface to support dynamic dispatch.
type IOC_QueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_QueryContext differentiates from other interfaces.
	IsOC_QueryContext()
}

type OC_QueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_QueryContext() *OC_QueryContext {
	var p = new(OC_QueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Query
	return p
}

func (*OC_QueryContext) IsOC_QueryContext() {}

func NewOC_QueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_QueryContext {
	var p = new(OC_QueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Query

	return p
}

func (s *OC_QueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_QueryContext) OC_RegularQuery() IOC_RegularQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RegularQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RegularQueryContext)
}

func (s *OC_QueryContext) OC_StandaloneCall() IOC_StandaloneCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_StandaloneCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_StandaloneCallContext)
}

func (s *OC_QueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_QueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_QueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Query(s)
	}
}

func (s *OC_QueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Query(s)
	}
}

func (p *CypherParser) OC_Query() (localctx IOC_QueryContext) {
	localctx = NewOC_QueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, CypherParserRULE_oC_Query)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(217)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(215)
			p.OC_RegularQuery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(216)
			p.OC_StandaloneCall()
		}

	}

	return localctx
}

// IOC_RegularQueryContext is an interface to support dynamic dispatch.
type IOC_RegularQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RegularQueryContext differentiates from other interfaces.
	IsOC_RegularQueryContext()
}

type OC_RegularQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RegularQueryContext() *OC_RegularQueryContext {
	var p = new(OC_RegularQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RegularQuery
	return p
}

func (*OC_RegularQueryContext) IsOC_RegularQueryContext() {}

func NewOC_RegularQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RegularQueryContext {
	var p = new(OC_RegularQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RegularQuery

	return p
}

func (s *OC_RegularQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RegularQueryContext) OC_SingleQuery() IOC_SingleQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SingleQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SingleQueryContext)
}

func (s *OC_RegularQueryContext) AllOC_Union() []IOC_UnionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_UnionContext)(nil)).Elem())
	var tst = make([]IOC_UnionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_UnionContext)
		}
	}

	return tst
}

func (s *OC_RegularQueryContext) OC_Union(i int) IOC_UnionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UnionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_UnionContext)
}

func (s *OC_RegularQueryContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RegularQueryContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RegularQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RegularQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RegularQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RegularQuery(s)
	}
}

func (s *OC_RegularQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RegularQuery(s)
	}
}

func (p *CypherParser) OC_RegularQuery() (localctx IOC_RegularQueryContext) {
	localctx = NewOC_RegularQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, CypherParserRULE_oC_RegularQuery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(219)
		p.OC_SingleQuery()
	}
	p.SetState(226)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(221)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(220)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(223)
				p.OC_Union()
			}

		}
		p.SetState(228)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 6, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_UnionContext is an interface to support dynamic dispatch.
type IOC_UnionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_UnionContext differentiates from other interfaces.
	IsOC_UnionContext()
}

type OC_UnionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_UnionContext() *OC_UnionContext {
	var p = new(OC_UnionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Union
	return p
}

func (*OC_UnionContext) IsOC_UnionContext() {}

func NewOC_UnionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_UnionContext {
	var p = new(OC_UnionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Union

	return p
}

func (s *OC_UnionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_UnionContext) UNION() antlr.TerminalNode {
	return s.GetToken(CypherParserUNION, 0)
}

func (s *OC_UnionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_UnionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_UnionContext) ALL() antlr.TerminalNode {
	return s.GetToken(CypherParserALL, 0)
}

func (s *OC_UnionContext) OC_SingleQuery() IOC_SingleQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SingleQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SingleQueryContext)
}

func (s *OC_UnionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_UnionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_UnionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Union(s)
	}
}

func (s *OC_UnionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Union(s)
	}
}

func (p *CypherParser) OC_Union() (localctx IOC_UnionContext) {
	localctx = NewOC_UnionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, CypherParserRULE_oC_Union)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(241)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(229)
			p.Match(CypherParserUNION)
		}
		{
			p.SetState(230)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(231)
			p.Match(CypherParserALL)
		}
		p.SetState(233)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(232)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(235)
			p.OC_SingleQuery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(236)
			p.Match(CypherParserUNION)
		}
		p.SetState(238)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(237)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(240)
			p.OC_SingleQuery()
		}

	}

	return localctx
}

// IOC_SingleQueryContext is an interface to support dynamic dispatch.
type IOC_SingleQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SingleQueryContext differentiates from other interfaces.
	IsOC_SingleQueryContext()
}

type OC_SingleQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SingleQueryContext() *OC_SingleQueryContext {
	var p = new(OC_SingleQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SingleQuery
	return p
}

func (*OC_SingleQueryContext) IsOC_SingleQueryContext() {}

func NewOC_SingleQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SingleQueryContext {
	var p = new(OC_SingleQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SingleQuery

	return p
}

func (s *OC_SingleQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SingleQueryContext) OC_SinglePartQuery() IOC_SinglePartQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SinglePartQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SinglePartQueryContext)
}

func (s *OC_SingleQueryContext) OC_MultiPartQuery() IOC_MultiPartQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MultiPartQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MultiPartQueryContext)
}

func (s *OC_SingleQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SingleQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SingleQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SingleQuery(s)
	}
}

func (s *OC_SingleQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SingleQuery(s)
	}
}

func (p *CypherParser) OC_SingleQuery() (localctx IOC_SingleQueryContext) {
	localctx = NewOC_SingleQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, CypherParserRULE_oC_SingleQuery)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(245)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(243)
			p.OC_SinglePartQuery()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(244)
			p.OC_MultiPartQuery()
		}

	}

	return localctx
}

// IOC_SinglePartQueryContext is an interface to support dynamic dispatch.
type IOC_SinglePartQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SinglePartQueryContext differentiates from other interfaces.
	IsOC_SinglePartQueryContext()
}

type OC_SinglePartQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SinglePartQueryContext() *OC_SinglePartQueryContext {
	var p = new(OC_SinglePartQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SinglePartQuery
	return p
}

func (*OC_SinglePartQueryContext) IsOC_SinglePartQueryContext() {}

func NewOC_SinglePartQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SinglePartQueryContext {
	var p = new(OC_SinglePartQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SinglePartQuery

	return p
}

func (s *OC_SinglePartQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SinglePartQueryContext) OC_Return() IOC_ReturnContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReturnContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ReturnContext)
}

func (s *OC_SinglePartQueryContext) AllOC_ReadingClause() []IOC_ReadingClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ReadingClauseContext)(nil)).Elem())
	var tst = make([]IOC_ReadingClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ReadingClauseContext)
		}
	}

	return tst
}

func (s *OC_SinglePartQueryContext) OC_ReadingClause(i int) IOC_ReadingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReadingClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ReadingClauseContext)
}

func (s *OC_SinglePartQueryContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_SinglePartQueryContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_SinglePartQueryContext) AllOC_UpdatingClause() []IOC_UpdatingClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_UpdatingClauseContext)(nil)).Elem())
	var tst = make([]IOC_UpdatingClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_UpdatingClauseContext)
		}
	}

	return tst
}

func (s *OC_SinglePartQueryContext) OC_UpdatingClause(i int) IOC_UpdatingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UpdatingClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_UpdatingClauseContext)
}

func (s *OC_SinglePartQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SinglePartQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SinglePartQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SinglePartQuery(s)
	}
}

func (s *OC_SinglePartQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SinglePartQuery(s)
	}
}

func (p *CypherParser) OC_SinglePartQuery() (localctx IOC_SinglePartQueryContext) {
	localctx = NewOC_SinglePartQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, CypherParserRULE_oC_SinglePartQuery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(282)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 19, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(253)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-48)&-(0x1f+1)) == 0 && ((1<<uint((_la-48)))&((1<<(CypherParserOPTIONAL-48))|(1<<(CypherParserMATCH-48))|(1<<(CypherParserUNWIND-48))|(1<<(CypherParserCALL-48)))) != 0 {
			{
				p.SetState(247)
				p.OC_ReadingClause()
			}
			p.SetState(249)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(248)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(255)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(256)
			p.OC_Return()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(263)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ((_la-48)&-(0x1f+1)) == 0 && ((1<<uint((_la-48)))&((1<<(CypherParserOPTIONAL-48))|(1<<(CypherParserMATCH-48))|(1<<(CypherParserUNWIND-48))|(1<<(CypherParserCALL-48)))) != 0 {
			{
				p.SetState(257)
				p.OC_ReadingClause()
			}
			p.SetState(259)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(258)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(265)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(266)
			p.OC_UpdatingClause()
		}
		p.SetState(273)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(268)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(267)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(270)
					p.OC_UpdatingClause()
				}

			}
			p.SetState(275)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 16, p.GetParserRuleContext())
		}
		p.SetState(280)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 18, p.GetParserRuleContext()) == 1 {
			p.SetState(277)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(276)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(279)
				p.OC_Return()
			}

		}

	}

	return localctx
}

// IOC_MultiPartQueryContext is an interface to support dynamic dispatch.
type IOC_MultiPartQueryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MultiPartQueryContext differentiates from other interfaces.
	IsOC_MultiPartQueryContext()
}

type OC_MultiPartQueryContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MultiPartQueryContext() *OC_MultiPartQueryContext {
	var p = new(OC_MultiPartQueryContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_MultiPartQuery
	return p
}

func (*OC_MultiPartQueryContext) IsOC_MultiPartQueryContext() {}

func NewOC_MultiPartQueryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MultiPartQueryContext {
	var p = new(OC_MultiPartQueryContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_MultiPartQuery

	return p
}

func (s *OC_MultiPartQueryContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MultiPartQueryContext) OC_SinglePartQuery() IOC_SinglePartQueryContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SinglePartQueryContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SinglePartQueryContext)
}

func (s *OC_MultiPartQueryContext) AllOC_With() []IOC_WithContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_WithContext)(nil)).Elem())
	var tst = make([]IOC_WithContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_WithContext)
		}
	}

	return tst
}

func (s *OC_MultiPartQueryContext) OC_With(i int) IOC_WithContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WithContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_WithContext)
}

func (s *OC_MultiPartQueryContext) AllOC_ReadingClause() []IOC_ReadingClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ReadingClauseContext)(nil)).Elem())
	var tst = make([]IOC_ReadingClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ReadingClauseContext)
		}
	}

	return tst
}

func (s *OC_MultiPartQueryContext) OC_ReadingClause(i int) IOC_ReadingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReadingClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ReadingClauseContext)
}

func (s *OC_MultiPartQueryContext) AllOC_UpdatingClause() []IOC_UpdatingClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_UpdatingClauseContext)(nil)).Elem())
	var tst = make([]IOC_UpdatingClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_UpdatingClauseContext)
		}
	}

	return tst
}

func (s *OC_MultiPartQueryContext) OC_UpdatingClause(i int) IOC_UpdatingClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UpdatingClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_UpdatingClauseContext)
}

func (s *OC_MultiPartQueryContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MultiPartQueryContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MultiPartQueryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MultiPartQueryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MultiPartQueryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_MultiPartQuery(s)
	}
}

func (s *OC_MultiPartQueryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_MultiPartQuery(s)
	}
}

func (p *CypherParser) OC_MultiPartQuery() (localctx IOC_MultiPartQueryContext) {
	localctx = NewOC_MultiPartQueryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, CypherParserRULE_oC_MultiPartQuery)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(306)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(290)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ((_la-48)&-(0x1f+1)) == 0 && ((1<<uint((_la-48)))&((1<<(CypherParserOPTIONAL-48))|(1<<(CypherParserMATCH-48))|(1<<(CypherParserUNWIND-48))|(1<<(CypherParserCALL-48)))) != 0 {
				{
					p.SetState(284)
					p.OC_ReadingClause()
				}
				p.SetState(286)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(285)
						p.Match(CypherParserSP)
					}

				}

				p.SetState(292)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			p.SetState(299)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for ((_la-52)&-(0x1f+1)) == 0 && ((1<<uint((_la-52)))&((1<<(CypherParserMERGE-52))|(1<<(CypherParserCREATE-52))|(1<<(CypherParserSET-52))|(1<<(CypherParserDETACH-52))|(1<<(CypherParserDELETE-52))|(1<<(CypherParserREMOVE-52)))) != 0 {
				{
					p.SetState(293)
					p.OC_UpdatingClause()
				}
				p.SetState(295)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(294)
						p.Match(CypherParserSP)
					}

				}

				p.SetState(301)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}
			{
				p.SetState(302)
				p.OC_With()
			}
			p.SetState(304)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(303)
					p.Match(CypherParserSP)
				}

			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(308)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext())
	}
	{
		p.SetState(310)
		p.OC_SinglePartQuery()
	}

	return localctx
}

// IOC_UpdatingClauseContext is an interface to support dynamic dispatch.
type IOC_UpdatingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_UpdatingClauseContext differentiates from other interfaces.
	IsOC_UpdatingClauseContext()
}

type OC_UpdatingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_UpdatingClauseContext() *OC_UpdatingClauseContext {
	var p = new(OC_UpdatingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_UpdatingClause
	return p
}

func (*OC_UpdatingClauseContext) IsOC_UpdatingClauseContext() {}

func NewOC_UpdatingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_UpdatingClauseContext {
	var p = new(OC_UpdatingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_UpdatingClause

	return p
}

func (s *OC_UpdatingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_UpdatingClauseContext) OC_Create() IOC_CreateContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_CreateContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_CreateContext)
}

func (s *OC_UpdatingClauseContext) OC_Merge() IOC_MergeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MergeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MergeContext)
}

func (s *OC_UpdatingClauseContext) OC_Delete() IOC_DeleteContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_DeleteContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_DeleteContext)
}

func (s *OC_UpdatingClauseContext) OC_Set() IOC_SetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SetContext)
}

func (s *OC_UpdatingClauseContext) OC_Remove() IOC_RemoveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RemoveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RemoveContext)
}

func (s *OC_UpdatingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_UpdatingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_UpdatingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_UpdatingClause(s)
	}
}

func (s *OC_UpdatingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_UpdatingClause(s)
	}
}

func (p *CypherParser) OC_UpdatingClause() (localctx IOC_UpdatingClauseContext) {
	localctx = NewOC_UpdatingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, CypherParserRULE_oC_UpdatingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(317)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCREATE:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(312)
			p.OC_Create()
		}

	case CypherParserMERGE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(313)
			p.OC_Merge()
		}

	case CypherParserDETACH, CypherParserDELETE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(314)
			p.OC_Delete()
		}

	case CypherParserSET:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(315)
			p.OC_Set()
		}

	case CypherParserREMOVE:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(316)
			p.OC_Remove()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ReadingClauseContext is an interface to support dynamic dispatch.
type IOC_ReadingClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReadingClauseContext differentiates from other interfaces.
	IsOC_ReadingClauseContext()
}

type OC_ReadingClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReadingClauseContext() *OC_ReadingClauseContext {
	var p = new(OC_ReadingClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ReadingClause
	return p
}

func (*OC_ReadingClauseContext) IsOC_ReadingClauseContext() {}

func NewOC_ReadingClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReadingClauseContext {
	var p = new(OC_ReadingClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ReadingClause

	return p
}

func (s *OC_ReadingClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReadingClauseContext) OC_Match() IOC_MatchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MatchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MatchContext)
}

func (s *OC_ReadingClauseContext) OC_Unwind() IOC_UnwindContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UnwindContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_UnwindContext)
}

func (s *OC_ReadingClauseContext) OC_InQueryCall() IOC_InQueryCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_InQueryCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_InQueryCallContext)
}

func (s *OC_ReadingClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReadingClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReadingClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ReadingClause(s)
	}
}

func (s *OC_ReadingClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ReadingClause(s)
	}
}

func (p *CypherParser) OC_ReadingClause() (localctx IOC_ReadingClauseContext) {
	localctx = NewOC_ReadingClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, CypherParserRULE_oC_ReadingClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(322)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserOPTIONAL, CypherParserMATCH:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(319)
			p.OC_Match()
		}

	case CypherParserUNWIND:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(320)
			p.OC_Unwind()
		}

	case CypherParserCALL:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(321)
			p.OC_InQueryCall()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_MatchContext is an interface to support dynamic dispatch.
type IOC_MatchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MatchContext differentiates from other interfaces.
	IsOC_MatchContext()
}

type OC_MatchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MatchContext() *OC_MatchContext {
	var p = new(OC_MatchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Match
	return p
}

func (*OC_MatchContext) IsOC_MatchContext() {}

func NewOC_MatchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MatchContext {
	var p = new(OC_MatchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Match

	return p
}

func (s *OC_MatchContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MatchContext) MATCH() antlr.TerminalNode {
	return s.GetToken(CypherParserMATCH, 0)
}

func (s *OC_MatchContext) OC_Pattern() IOC_PatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternContext)
}

func (s *OC_MatchContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(CypherParserOPTIONAL, 0)
}

func (s *OC_MatchContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MatchContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MatchContext) OC_Where() IOC_WhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_WhereContext)
}

func (s *OC_MatchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MatchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MatchContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Match(s)
	}
}

func (s *OC_MatchContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Match(s)
	}
}

func (p *CypherParser) OC_Match() (localctx IOC_MatchContext) {
	localctx = NewOC_MatchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, CypherParserRULE_oC_Match)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(326)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserOPTIONAL {
		{
			p.SetState(324)
			p.Match(CypherParserOPTIONAL)
		}
		{
			p.SetState(325)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(328)
		p.Match(CypherParserMATCH)
	}
	p.SetState(330)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(329)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(332)
		p.OC_Pattern()
	}
	p.SetState(337)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 31, p.GetParserRuleContext()) == 1 {
		p.SetState(334)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(333)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(336)
			p.OC_Where()
		}

	}

	return localctx
}

// IOC_UnwindContext is an interface to support dynamic dispatch.
type IOC_UnwindContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_UnwindContext differentiates from other interfaces.
	IsOC_UnwindContext()
}

type OC_UnwindContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_UnwindContext() *OC_UnwindContext {
	var p = new(OC_UnwindContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Unwind
	return p
}

func (*OC_UnwindContext) IsOC_UnwindContext() {}

func NewOC_UnwindContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_UnwindContext {
	var p = new(OC_UnwindContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Unwind

	return p
}

func (s *OC_UnwindContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_UnwindContext) UNWIND() antlr.TerminalNode {
	return s.GetToken(CypherParserUNWIND, 0)
}

func (s *OC_UnwindContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_UnwindContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_UnwindContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_UnwindContext) AS() antlr.TerminalNode {
	return s.GetToken(CypherParserAS, 0)
}

func (s *OC_UnwindContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_UnwindContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_UnwindContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_UnwindContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Unwind(s)
	}
}

func (s *OC_UnwindContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Unwind(s)
	}
}

func (p *CypherParser) OC_Unwind() (localctx IOC_UnwindContext) {
	localctx = NewOC_UnwindContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, CypherParserRULE_oC_Unwind)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(339)
		p.Match(CypherParserUNWIND)
	}
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(340)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(343)
		p.OC_Expression()
	}
	{
		p.SetState(344)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(345)
		p.Match(CypherParserAS)
	}
	{
		p.SetState(346)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(347)
		p.OC_Variable()
	}

	return localctx
}

// IOC_MergeContext is an interface to support dynamic dispatch.
type IOC_MergeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MergeContext differentiates from other interfaces.
	IsOC_MergeContext()
}

type OC_MergeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MergeContext() *OC_MergeContext {
	var p = new(OC_MergeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Merge
	return p
}

func (*OC_MergeContext) IsOC_MergeContext() {}

func NewOC_MergeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MergeContext {
	var p = new(OC_MergeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Merge

	return p
}

func (s *OC_MergeContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MergeContext) MERGE() antlr.TerminalNode {
	return s.GetToken(CypherParserMERGE, 0)
}

func (s *OC_MergeContext) OC_PatternPart() IOC_PatternPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternPartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternPartContext)
}

func (s *OC_MergeContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MergeContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MergeContext) AllOC_MergeAction() []IOC_MergeActionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_MergeActionContext)(nil)).Elem())
	var tst = make([]IOC_MergeActionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_MergeActionContext)
		}
	}

	return tst
}

func (s *OC_MergeContext) OC_MergeAction(i int) IOC_MergeActionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MergeActionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_MergeActionContext)
}

func (s *OC_MergeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MergeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MergeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Merge(s)
	}
}

func (s *OC_MergeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Merge(s)
	}
}

func (p *CypherParser) OC_Merge() (localctx IOC_MergeContext) {
	localctx = NewOC_MergeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, CypherParserRULE_oC_Merge)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(349)
		p.Match(CypherParserMERGE)
	}
	p.SetState(351)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(350)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(353)
		p.OC_PatternPart()
	}
	p.SetState(358)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(354)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(355)
				p.OC_MergeAction()
			}

		}
		p.SetState(360)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_MergeActionContext is an interface to support dynamic dispatch.
type IOC_MergeActionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MergeActionContext differentiates from other interfaces.
	IsOC_MergeActionContext()
}

type OC_MergeActionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MergeActionContext() *OC_MergeActionContext {
	var p = new(OC_MergeActionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_MergeAction
	return p
}

func (*OC_MergeActionContext) IsOC_MergeActionContext() {}

func NewOC_MergeActionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MergeActionContext {
	var p = new(OC_MergeActionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_MergeAction

	return p
}

func (s *OC_MergeActionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MergeActionContext) ON() antlr.TerminalNode {
	return s.GetToken(CypherParserON, 0)
}

func (s *OC_MergeActionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MergeActionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MergeActionContext) MATCH() antlr.TerminalNode {
	return s.GetToken(CypherParserMATCH, 0)
}

func (s *OC_MergeActionContext) OC_Set() IOC_SetContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SetContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SetContext)
}

func (s *OC_MergeActionContext) CREATE() antlr.TerminalNode {
	return s.GetToken(CypherParserCREATE, 0)
}

func (s *OC_MergeActionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MergeActionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MergeActionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_MergeAction(s)
	}
}

func (s *OC_MergeActionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_MergeAction(s)
	}
}

func (p *CypherParser) OC_MergeAction() (localctx IOC_MergeActionContext) {
	localctx = NewOC_MergeActionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, CypherParserRULE_oC_MergeAction)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 35, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(361)
			p.Match(CypherParserON)
		}
		{
			p.SetState(362)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(363)
			p.Match(CypherParserMATCH)
		}
		{
			p.SetState(364)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(365)
			p.OC_Set()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(366)
			p.Match(CypherParserON)
		}
		{
			p.SetState(367)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(368)
			p.Match(CypherParserCREATE)
		}
		{
			p.SetState(369)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(370)
			p.OC_Set()
		}

	}

	return localctx
}

// IOC_CreateContext is an interface to support dynamic dispatch.
type IOC_CreateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_CreateContext differentiates from other interfaces.
	IsOC_CreateContext()
}

type OC_CreateContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_CreateContext() *OC_CreateContext {
	var p = new(OC_CreateContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Create
	return p
}

func (*OC_CreateContext) IsOC_CreateContext() {}

func NewOC_CreateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_CreateContext {
	var p = new(OC_CreateContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Create

	return p
}

func (s *OC_CreateContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_CreateContext) CREATE() antlr.TerminalNode {
	return s.GetToken(CypherParserCREATE, 0)
}

func (s *OC_CreateContext) OC_Pattern() IOC_PatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternContext)
}

func (s *OC_CreateContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_CreateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_CreateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_CreateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Create(s)
	}
}

func (s *OC_CreateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Create(s)
	}
}

func (p *CypherParser) OC_Create() (localctx IOC_CreateContext) {
	localctx = NewOC_CreateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, CypherParserRULE_oC_Create)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(373)
		p.Match(CypherParserCREATE)
	}
	p.SetState(375)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(374)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(377)
		p.OC_Pattern()
	}

	return localctx
}

// IOC_SetContext is an interface to support dynamic dispatch.
type IOC_SetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SetContext differentiates from other interfaces.
	IsOC_SetContext()
}

type OC_SetContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SetContext() *OC_SetContext {
	var p = new(OC_SetContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Set
	return p
}

func (*OC_SetContext) IsOC_SetContext() {}

func NewOC_SetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SetContext {
	var p = new(OC_SetContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Set

	return p
}

func (s *OC_SetContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SetContext) SET() antlr.TerminalNode {
	return s.GetToken(CypherParserSET, 0)
}

func (s *OC_SetContext) AllOC_SetItem() []IOC_SetItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_SetItemContext)(nil)).Elem())
	var tst = make([]IOC_SetItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_SetItemContext)
		}
	}

	return tst
}

func (s *OC_SetContext) OC_SetItem(i int) IOC_SetItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SetItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_SetItemContext)
}

func (s *OC_SetContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_SetContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_SetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Set(s)
	}
}

func (s *OC_SetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Set(s)
	}
}

func (p *CypherParser) OC_Set() (localctx IOC_SetContext) {
	localctx = NewOC_SetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, CypherParserRULE_oC_Set)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(379)
		p.Match(CypherParserSET)
	}
	p.SetState(381)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(380)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(383)
		p.OC_SetItem()
	}
	p.SetState(394)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(385)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(384)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(387)
				p.Match(CypherParserT__1)
			}
			p.SetState(389)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(388)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(391)
				p.OC_SetItem()
			}

		}
		p.SetState(396)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_SetItemContext is an interface to support dynamic dispatch.
type IOC_SetItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SetItemContext differentiates from other interfaces.
	IsOC_SetItemContext()
}

type OC_SetItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SetItemContext() *OC_SetItemContext {
	var p = new(OC_SetItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SetItem
	return p
}

func (*OC_SetItemContext) IsOC_SetItemContext() {}

func NewOC_SetItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SetItemContext {
	var p = new(OC_SetItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SetItem

	return p
}

func (s *OC_SetItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SetItemContext) OC_PropertyExpression() IOC_PropertyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyExpressionContext)
}

func (s *OC_SetItemContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_SetItemContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_SetItemContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_SetItemContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_SetItemContext) OC_NodeLabels() IOC_NodeLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelsContext)
}

func (s *OC_SetItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SetItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SetItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SetItem(s)
	}
}

func (s *OC_SetItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SetItem(s)
	}
}

func (p *CypherParser) OC_SetItem() (localctx IOC_SetItemContext) {
	localctx = NewOC_SetItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, CypherParserRULE_oC_SetItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(433)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(397)
			p.OC_PropertyExpression()
		}
		p.SetState(399)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(398)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(401)
			p.Match(CypherParserT__2)
		}
		p.SetState(403)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(402)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(405)
			p.OC_Expression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(407)
			p.OC_Variable()
		}
		p.SetState(409)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(408)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(411)
			p.Match(CypherParserT__2)
		}
		p.SetState(413)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(412)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(415)
			p.OC_Expression()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(417)
			p.OC_Variable()
		}
		p.SetState(419)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(418)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(421)
			p.Match(CypherParserT__3)
		}
		p.SetState(423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(422)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(425)
			p.OC_Expression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(427)
			p.OC_Variable()
		}
		p.SetState(429)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(428)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(431)
			p.OC_NodeLabels()
		}

	}

	return localctx
}

// IOC_DeleteContext is an interface to support dynamic dispatch.
type IOC_DeleteContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_DeleteContext differentiates from other interfaces.
	IsOC_DeleteContext()
}

type OC_DeleteContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_DeleteContext() *OC_DeleteContext {
	var p = new(OC_DeleteContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Delete
	return p
}

func (*OC_DeleteContext) IsOC_DeleteContext() {}

func NewOC_DeleteContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_DeleteContext {
	var p = new(OC_DeleteContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Delete

	return p
}

func (s *OC_DeleteContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_DeleteContext) DELETE() antlr.TerminalNode {
	return s.GetToken(CypherParserDELETE, 0)
}

func (s *OC_DeleteContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_DeleteContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_DeleteContext) DETACH() antlr.TerminalNode {
	return s.GetToken(CypherParserDETACH, 0)
}

func (s *OC_DeleteContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_DeleteContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_DeleteContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_DeleteContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_DeleteContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Delete(s)
	}
}

func (s *OC_DeleteContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Delete(s)
	}
}

func (p *CypherParser) OC_Delete() (localctx IOC_DeleteContext) {
	localctx = NewOC_DeleteContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, CypherParserRULE_oC_Delete)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(437)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserDETACH {
		{
			p.SetState(435)
			p.Match(CypherParserDETACH)
		}
		{
			p.SetState(436)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(439)
		p.Match(CypherParserDELETE)
	}
	p.SetState(441)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(440)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(443)
		p.OC_Expression()
	}
	p.SetState(454)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(445)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(444)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(447)
				p.Match(CypherParserT__1)
			}
			p.SetState(449)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(448)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(451)
				p.OC_Expression()
			}

		}
		p.SetState(456)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_RemoveContext is an interface to support dynamic dispatch.
type IOC_RemoveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RemoveContext differentiates from other interfaces.
	IsOC_RemoveContext()
}

type OC_RemoveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RemoveContext() *OC_RemoveContext {
	var p = new(OC_RemoveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Remove
	return p
}

func (*OC_RemoveContext) IsOC_RemoveContext() {}

func NewOC_RemoveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RemoveContext {
	var p = new(OC_RemoveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Remove

	return p
}

func (s *OC_RemoveContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RemoveContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(CypherParserREMOVE, 0)
}

func (s *OC_RemoveContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RemoveContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RemoveContext) AllOC_RemoveItem() []IOC_RemoveItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_RemoveItemContext)(nil)).Elem())
	var tst = make([]IOC_RemoveItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_RemoveItemContext)
		}
	}

	return tst
}

func (s *OC_RemoveContext) OC_RemoveItem(i int) IOC_RemoveItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RemoveItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_RemoveItemContext)
}

func (s *OC_RemoveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RemoveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RemoveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Remove(s)
	}
}

func (s *OC_RemoveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Remove(s)
	}
}

func (p *CypherParser) OC_Remove() (localctx IOC_RemoveContext) {
	localctx = NewOC_RemoveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, CypherParserRULE_oC_Remove)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(457)
		p.Match(CypherParserREMOVE)
	}
	{
		p.SetState(458)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(459)
		p.OC_RemoveItem()
	}
	p.SetState(470)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(461)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(460)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(463)
				p.Match(CypherParserT__1)
			}
			p.SetState(465)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(464)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(467)
				p.OC_RemoveItem()
			}

		}
		p.SetState(472)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_RemoveItemContext is an interface to support dynamic dispatch.
type IOC_RemoveItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RemoveItemContext differentiates from other interfaces.
	IsOC_RemoveItemContext()
}

type OC_RemoveItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RemoveItemContext() *OC_RemoveItemContext {
	var p = new(OC_RemoveItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RemoveItem
	return p
}

func (*OC_RemoveItemContext) IsOC_RemoveItemContext() {}

func NewOC_RemoveItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RemoveItemContext {
	var p = new(OC_RemoveItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RemoveItem

	return p
}

func (s *OC_RemoveItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RemoveItemContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_RemoveItemContext) OC_NodeLabels() IOC_NodeLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelsContext)
}

func (s *OC_RemoveItemContext) OC_PropertyExpression() IOC_PropertyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyExpressionContext)
}

func (s *OC_RemoveItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RemoveItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RemoveItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RemoveItem(s)
	}
}

func (s *OC_RemoveItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RemoveItem(s)
	}
}

func (p *CypherParser) OC_RemoveItem() (localctx IOC_RemoveItemContext) {
	localctx = NewOC_RemoveItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, CypherParserRULE_oC_RemoveItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(477)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(473)
			p.OC_Variable()
		}
		{
			p.SetState(474)
			p.OC_NodeLabels()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(476)
			p.OC_PropertyExpression()
		}

	}

	return localctx
}

// IOC_InQueryCallContext is an interface to support dynamic dispatch.
type IOC_InQueryCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_InQueryCallContext differentiates from other interfaces.
	IsOC_InQueryCallContext()
}

type OC_InQueryCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_InQueryCallContext() *OC_InQueryCallContext {
	var p = new(OC_InQueryCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_InQueryCall
	return p
}

func (*OC_InQueryCallContext) IsOC_InQueryCallContext() {}

func NewOC_InQueryCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_InQueryCallContext {
	var p = new(OC_InQueryCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_InQueryCall

	return p
}

func (s *OC_InQueryCallContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_InQueryCallContext) CALL() antlr.TerminalNode {
	return s.GetToken(CypherParserCALL, 0)
}

func (s *OC_InQueryCallContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_InQueryCallContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_InQueryCallContext) OC_ExplicitProcedureInvocation() IOC_ExplicitProcedureInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExplicitProcedureInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExplicitProcedureInvocationContext)
}

func (s *OC_InQueryCallContext) YIELD() antlr.TerminalNode {
	return s.GetToken(CypherParserYIELD, 0)
}

func (s *OC_InQueryCallContext) OC_YieldItems() IOC_YieldItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_YieldItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_YieldItemsContext)
}

func (s *OC_InQueryCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_InQueryCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_InQueryCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_InQueryCall(s)
	}
}

func (s *OC_InQueryCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_InQueryCall(s)
	}
}

func (p *CypherParser) OC_InQueryCall() (localctx IOC_InQueryCallContext) {
	localctx = NewOC_InQueryCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, CypherParserRULE_oC_InQueryCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(479)
		p.Match(CypherParserCALL)
	}
	{
		p.SetState(480)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(481)
		p.OC_ExplicitProcedureInvocation()
	}
	p.SetState(488)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) == 1 {
		p.SetState(483)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(482)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(485)
			p.Match(CypherParserYIELD)
		}
		{
			p.SetState(486)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(487)
			p.OC_YieldItems()
		}

	}

	return localctx
}

// IOC_StandaloneCallContext is an interface to support dynamic dispatch.
type IOC_StandaloneCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_StandaloneCallContext differentiates from other interfaces.
	IsOC_StandaloneCallContext()
}

type OC_StandaloneCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_StandaloneCallContext() *OC_StandaloneCallContext {
	var p = new(OC_StandaloneCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_StandaloneCall
	return p
}

func (*OC_StandaloneCallContext) IsOC_StandaloneCallContext() {}

func NewOC_StandaloneCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_StandaloneCallContext {
	var p = new(OC_StandaloneCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_StandaloneCall

	return p
}

func (s *OC_StandaloneCallContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_StandaloneCallContext) CALL() antlr.TerminalNode {
	return s.GetToken(CypherParserCALL, 0)
}

func (s *OC_StandaloneCallContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_StandaloneCallContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_StandaloneCallContext) OC_ExplicitProcedureInvocation() IOC_ExplicitProcedureInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExplicitProcedureInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExplicitProcedureInvocationContext)
}

func (s *OC_StandaloneCallContext) OC_ImplicitProcedureInvocation() IOC_ImplicitProcedureInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ImplicitProcedureInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ImplicitProcedureInvocationContext)
}

func (s *OC_StandaloneCallContext) YIELD() antlr.TerminalNode {
	return s.GetToken(CypherParserYIELD, 0)
}

func (s *OC_StandaloneCallContext) OC_YieldItems() IOC_YieldItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_YieldItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_YieldItemsContext)
}

func (s *OC_StandaloneCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_StandaloneCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_StandaloneCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_StandaloneCall(s)
	}
}

func (s *OC_StandaloneCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_StandaloneCall(s)
	}
}

func (p *CypherParser) OC_StandaloneCall() (localctx IOC_StandaloneCallContext) {
	localctx = NewOC_StandaloneCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, CypherParserRULE_oC_StandaloneCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(490)
		p.Match(CypherParserCALL)
	}
	{
		p.SetState(491)
		p.Match(CypherParserSP)
	}
	p.SetState(494)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(492)
			p.OC_ExplicitProcedureInvocation()
		}

	case 2:
		{
			p.SetState(493)
			p.OC_ImplicitProcedureInvocation()
		}

	}
	p.SetState(500)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(496)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(497)
			p.Match(CypherParserYIELD)
		}
		{
			p.SetState(498)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(499)
			p.OC_YieldItems()
		}

	}

	return localctx
}

// IOC_YieldItemsContext is an interface to support dynamic dispatch.
type IOC_YieldItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_YieldItemsContext differentiates from other interfaces.
	IsOC_YieldItemsContext()
}

type OC_YieldItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_YieldItemsContext() *OC_YieldItemsContext {
	var p = new(OC_YieldItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_YieldItems
	return p
}

func (*OC_YieldItemsContext) IsOC_YieldItemsContext() {}

func NewOC_YieldItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_YieldItemsContext {
	var p = new(OC_YieldItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_YieldItems

	return p
}

func (s *OC_YieldItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_YieldItemsContext) OC_Where() IOC_WhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_WhereContext)
}

func (s *OC_YieldItemsContext) AllOC_YieldItem() []IOC_YieldItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_YieldItemContext)(nil)).Elem())
	var tst = make([]IOC_YieldItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_YieldItemContext)
		}
	}

	return tst
}

func (s *OC_YieldItemsContext) OC_YieldItem(i int) IOC_YieldItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_YieldItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_YieldItemContext)
}

func (s *OC_YieldItemsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_YieldItemsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_YieldItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_YieldItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_YieldItemsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_YieldItems(s)
	}
}

func (s *OC_YieldItemsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_YieldItems(s)
	}
}

func (p *CypherParser) OC_YieldItems() (localctx IOC_YieldItemsContext) {
	localctx = NewOC_YieldItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, CypherParserRULE_oC_YieldItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(517)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserT__4:
		{
			p.SetState(502)
			p.Match(CypherParserT__4)
		}

	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		{
			p.SetState(503)
			p.OC_YieldItem()
		}
		p.SetState(514)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(505)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(504)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(507)
					p.Match(CypherParserT__1)
				}
				p.SetState(509)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(508)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(511)
					p.OC_YieldItem()
				}

			}
			p.SetState(516)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(523)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
		p.SetState(520)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(519)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(522)
			p.OC_Where()
		}

	}

	return localctx
}

// IOC_YieldItemContext is an interface to support dynamic dispatch.
type IOC_YieldItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_YieldItemContext differentiates from other interfaces.
	IsOC_YieldItemContext()
}

type OC_YieldItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_YieldItemContext() *OC_YieldItemContext {
	var p = new(OC_YieldItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_YieldItem
	return p
}

func (*OC_YieldItemContext) IsOC_YieldItemContext() {}

func NewOC_YieldItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_YieldItemContext {
	var p = new(OC_YieldItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_YieldItem

	return p
}

func (s *OC_YieldItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_YieldItemContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_YieldItemContext) OC_ProcedureResultField() IOC_ProcedureResultFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProcedureResultFieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProcedureResultFieldContext)
}

func (s *OC_YieldItemContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_YieldItemContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_YieldItemContext) AS() antlr.TerminalNode {
	return s.GetToken(CypherParserAS, 0)
}

func (s *OC_YieldItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_YieldItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_YieldItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_YieldItem(s)
	}
}

func (s *OC_YieldItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_YieldItem(s)
	}
}

func (p *CypherParser) OC_YieldItem() (localctx IOC_YieldItemContext) {
	localctx = NewOC_YieldItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, CypherParserRULE_oC_YieldItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(530)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(525)
			p.OC_ProcedureResultField()
		}
		{
			p.SetState(526)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(527)
			p.Match(CypherParserAS)
		}
		{
			p.SetState(528)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(532)
		p.OC_Variable()
	}

	return localctx
}

// IOC_WithContext is an interface to support dynamic dispatch.
type IOC_WithContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_WithContext differentiates from other interfaces.
	IsOC_WithContext()
}

type OC_WithContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_WithContext() *OC_WithContext {
	var p = new(OC_WithContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_With
	return p
}

func (*OC_WithContext) IsOC_WithContext() {}

func NewOC_WithContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_WithContext {
	var p = new(OC_WithContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_With

	return p
}

func (s *OC_WithContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_WithContext) WITH() antlr.TerminalNode {
	return s.GetToken(CypherParserWITH, 0)
}

func (s *OC_WithContext) OC_ProjectionBody() IOC_ProjectionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProjectionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProjectionBodyContext)
}

func (s *OC_WithContext) OC_Where() IOC_WhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_WhereContext)
}

func (s *OC_WithContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_WithContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_WithContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_WithContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_With(s)
	}
}

func (s *OC_WithContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_With(s)
	}
}

func (p *CypherParser) OC_With() (localctx IOC_WithContext) {
	localctx = NewOC_WithContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, CypherParserRULE_oC_With)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(534)
		p.Match(CypherParserWITH)
	}
	{
		p.SetState(535)
		p.OC_ProjectionBody()
	}
	p.SetState(540)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) == 1 {
		p.SetState(537)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(536)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(539)
			p.OC_Where()
		}

	}

	return localctx
}

// IOC_ReturnContext is an interface to support dynamic dispatch.
type IOC_ReturnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReturnContext differentiates from other interfaces.
	IsOC_ReturnContext()
}

type OC_ReturnContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReturnContext() *OC_ReturnContext {
	var p = new(OC_ReturnContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Return
	return p
}

func (*OC_ReturnContext) IsOC_ReturnContext() {}

func NewOC_ReturnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReturnContext {
	var p = new(OC_ReturnContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Return

	return p
}

func (s *OC_ReturnContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReturnContext) RETURN() antlr.TerminalNode {
	return s.GetToken(CypherParserRETURN, 0)
}

func (s *OC_ReturnContext) OC_ProjectionBody() IOC_ProjectionBodyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProjectionBodyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProjectionBodyContext)
}

func (s *OC_ReturnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReturnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReturnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Return(s)
	}
}

func (s *OC_ReturnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Return(s)
	}
}

func (p *CypherParser) OC_Return() (localctx IOC_ReturnContext) {
	localctx = NewOC_ReturnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, CypherParserRULE_oC_Return)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(542)
		p.Match(CypherParserRETURN)
	}
	{
		p.SetState(543)
		p.OC_ProjectionBody()
	}

	return localctx
}

// IOC_ProjectionBodyContext is an interface to support dynamic dispatch.
type IOC_ProjectionBodyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ProjectionBodyContext differentiates from other interfaces.
	IsOC_ProjectionBodyContext()
}

type OC_ProjectionBodyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ProjectionBodyContext() *OC_ProjectionBodyContext {
	var p = new(OC_ProjectionBodyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ProjectionBody
	return p
}

func (*OC_ProjectionBodyContext) IsOC_ProjectionBodyContext() {}

func NewOC_ProjectionBodyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ProjectionBodyContext {
	var p = new(OC_ProjectionBodyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ProjectionBody

	return p
}

func (s *OC_ProjectionBodyContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ProjectionBodyContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ProjectionBodyContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ProjectionBodyContext) OC_ProjectionItems() IOC_ProjectionItemsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProjectionItemsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProjectionItemsContext)
}

func (s *OC_ProjectionBodyContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(CypherParserDISTINCT, 0)
}

func (s *OC_ProjectionBodyContext) OC_Order() IOC_OrderContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_OrderContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_OrderContext)
}

func (s *OC_ProjectionBodyContext) OC_Skip() IOC_SkipContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SkipContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SkipContext)
}

func (s *OC_ProjectionBodyContext) OC_Limit() IOC_LimitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_LimitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_LimitContext)
}

func (s *OC_ProjectionBodyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ProjectionBodyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ProjectionBodyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ProjectionBody(s)
	}
}

func (s *OC_ProjectionBodyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ProjectionBody(s)
	}
}

func (p *CypherParser) OC_ProjectionBody() (localctx IOC_ProjectionBodyContext) {
	localctx = NewOC_ProjectionBodyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, CypherParserRULE_oC_ProjectionBody)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(549)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) == 1 {
		p.SetState(546)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(545)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(548)
			p.Match(CypherParserDISTINCT)
		}

	}
	{
		p.SetState(551)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(552)
		p.OC_ProjectionItems()
	}
	p.SetState(555)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(553)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(554)
			p.OC_Order()
		}

	}
	p.SetState(559)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(557)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(558)
			p.OC_Skip()
		}

	}
	p.SetState(563)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(561)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(562)
			p.OC_Limit()
		}

	}

	return localctx
}

// IOC_ProjectionItemsContext is an interface to support dynamic dispatch.
type IOC_ProjectionItemsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ProjectionItemsContext differentiates from other interfaces.
	IsOC_ProjectionItemsContext()
}

type OC_ProjectionItemsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ProjectionItemsContext() *OC_ProjectionItemsContext {
	var p = new(OC_ProjectionItemsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ProjectionItems
	return p
}

func (*OC_ProjectionItemsContext) IsOC_ProjectionItemsContext() {}

func NewOC_ProjectionItemsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ProjectionItemsContext {
	var p = new(OC_ProjectionItemsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ProjectionItems

	return p
}

func (s *OC_ProjectionItemsContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ProjectionItemsContext) AllOC_ProjectionItem() []IOC_ProjectionItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ProjectionItemContext)(nil)).Elem())
	var tst = make([]IOC_ProjectionItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ProjectionItemContext)
		}
	}

	return tst
}

func (s *OC_ProjectionItemsContext) OC_ProjectionItem(i int) IOC_ProjectionItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProjectionItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ProjectionItemContext)
}

func (s *OC_ProjectionItemsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ProjectionItemsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ProjectionItemsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ProjectionItemsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ProjectionItemsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ProjectionItems(s)
	}
}

func (s *OC_ProjectionItemsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ProjectionItems(s)
	}
}

func (p *CypherParser) OC_ProjectionItems() (localctx IOC_ProjectionItemsContext) {
	localctx = NewOC_ProjectionItemsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, CypherParserRULE_oC_ProjectionItems)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(593)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserT__4:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(565)
			p.Match(CypherParserT__4)
		}
		p.SetState(576)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(567)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(566)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(569)
					p.Match(CypherParserT__1)
				}
				p.SetState(571)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(570)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(573)
					p.OC_ProjectionItem()
				}

			}
			p.SetState(578)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext())
		}

	case CypherParserT__5, CypherParserT__7, CypherParserT__12, CypherParserT__13, CypherParserT__23, CypherParserT__25, CypherParserALL, CypherParserNOT, CypherParserNULL, CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserTRUE, CypherParserFALSE, CypherParserEXISTS, CypherParserCASE, CypherParserStringLiteral, CypherParserHexInteger, CypherParserDecimalInteger, CypherParserOctalInteger, CypherParserHexLetter, CypherParserExponentDecimalReal, CypherParserRegularDecimalReal, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(579)
			p.OC_ProjectionItem()
		}
		p.SetState(590)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(581)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(580)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(583)
					p.Match(CypherParserT__1)
				}
				p.SetState(585)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(584)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(587)
					p.OC_ProjectionItem()
				}

			}
			p.SetState(592)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ProjectionItemContext is an interface to support dynamic dispatch.
type IOC_ProjectionItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ProjectionItemContext differentiates from other interfaces.
	IsOC_ProjectionItemContext()
}

type OC_ProjectionItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ProjectionItemContext() *OC_ProjectionItemContext {
	var p = new(OC_ProjectionItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ProjectionItem
	return p
}

func (*OC_ProjectionItemContext) IsOC_ProjectionItemContext() {}

func NewOC_ProjectionItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ProjectionItemContext {
	var p = new(OC_ProjectionItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ProjectionItem

	return p
}

func (s *OC_ProjectionItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ProjectionItemContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ProjectionItemContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ProjectionItemContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ProjectionItemContext) AS() antlr.TerminalNode {
	return s.GetToken(CypherParserAS, 0)
}

func (s *OC_ProjectionItemContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_ProjectionItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ProjectionItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ProjectionItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ProjectionItem(s)
	}
}

func (s *OC_ProjectionItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ProjectionItem(s)
	}
}

func (p *CypherParser) OC_ProjectionItem() (localctx IOC_ProjectionItemContext) {
	localctx = NewOC_ProjectionItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, CypherParserRULE_oC_ProjectionItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(602)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(595)
			p.OC_Expression()
		}
		{
			p.SetState(596)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(597)
			p.Match(CypherParserAS)
		}
		{
			p.SetState(598)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(599)
			p.OC_Variable()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(601)
			p.OC_Expression()
		}

	}

	return localctx
}

// IOC_OrderContext is an interface to support dynamic dispatch.
type IOC_OrderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_OrderContext differentiates from other interfaces.
	IsOC_OrderContext()
}

type OC_OrderContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_OrderContext() *OC_OrderContext {
	var p = new(OC_OrderContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Order
	return p
}

func (*OC_OrderContext) IsOC_OrderContext() {}

func NewOC_OrderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_OrderContext {
	var p = new(OC_OrderContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Order

	return p
}

func (s *OC_OrderContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_OrderContext) ORDER() antlr.TerminalNode {
	return s.GetToken(CypherParserORDER, 0)
}

func (s *OC_OrderContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_OrderContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_OrderContext) BY() antlr.TerminalNode {
	return s.GetToken(CypherParserBY, 0)
}

func (s *OC_OrderContext) AllOC_SortItem() []IOC_SortItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_SortItemContext)(nil)).Elem())
	var tst = make([]IOC_SortItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_SortItemContext)
		}
	}

	return tst
}

func (s *OC_OrderContext) OC_SortItem(i int) IOC_SortItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SortItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_SortItemContext)
}

func (s *OC_OrderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_OrderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_OrderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Order(s)
	}
}

func (s *OC_OrderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Order(s)
	}
}

func (p *CypherParser) OC_Order() (localctx IOC_OrderContext) {
	localctx = NewOC_OrderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, CypherParserRULE_oC_Order)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(604)
		p.Match(CypherParserORDER)
	}
	{
		p.SetState(605)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(606)
		p.Match(CypherParserBY)
	}
	{
		p.SetState(607)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(608)
		p.OC_SortItem()
	}
	p.SetState(616)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CypherParserT__1 {
		{
			p.SetState(609)
			p.Match(CypherParserT__1)
		}
		p.SetState(611)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(610)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(613)
			p.OC_SortItem()
		}

		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IOC_SkipContext is an interface to support dynamic dispatch.
type IOC_SkipContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SkipContext differentiates from other interfaces.
	IsOC_SkipContext()
}

type OC_SkipContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SkipContext() *OC_SkipContext {
	var p = new(OC_SkipContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Skip
	return p
}

func (*OC_SkipContext) IsOC_SkipContext() {}

func NewOC_SkipContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SkipContext {
	var p = new(OC_SkipContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Skip

	return p
}

func (s *OC_SkipContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SkipContext) L_SKIP() antlr.TerminalNode {
	return s.GetToken(CypherParserL_SKIP, 0)
}

func (s *OC_SkipContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_SkipContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_SkipContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SkipContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SkipContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Skip(s)
	}
}

func (s *OC_SkipContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Skip(s)
	}
}

func (p *CypherParser) OC_Skip() (localctx IOC_SkipContext) {
	localctx = NewOC_SkipContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, CypherParserRULE_oC_Skip)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(619)
		p.Match(CypherParserL_SKIP)
	}
	{
		p.SetState(620)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(621)
		p.OC_Expression()
	}

	return localctx
}

// IOC_LimitContext is an interface to support dynamic dispatch.
type IOC_LimitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_LimitContext differentiates from other interfaces.
	IsOC_LimitContext()
}

type OC_LimitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_LimitContext() *OC_LimitContext {
	var p = new(OC_LimitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Limit
	return p
}

func (*OC_LimitContext) IsOC_LimitContext() {}

func NewOC_LimitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_LimitContext {
	var p = new(OC_LimitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Limit

	return p
}

func (s *OC_LimitContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_LimitContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(CypherParserLIMIT, 0)
}

func (s *OC_LimitContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_LimitContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_LimitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_LimitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_LimitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Limit(s)
	}
}

func (s *OC_LimitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Limit(s)
	}
}

func (p *CypherParser) OC_Limit() (localctx IOC_LimitContext) {
	localctx = NewOC_LimitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, CypherParserRULE_oC_Limit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(623)
		p.Match(CypherParserLIMIT)
	}
	{
		p.SetState(624)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(625)
		p.OC_Expression()
	}

	return localctx
}

// IOC_SortItemContext is an interface to support dynamic dispatch.
type IOC_SortItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SortItemContext differentiates from other interfaces.
	IsOC_SortItemContext()
}

type OC_SortItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SortItemContext() *OC_SortItemContext {
	var p = new(OC_SortItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SortItem
	return p
}

func (*OC_SortItemContext) IsOC_SortItemContext() {}

func NewOC_SortItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SortItemContext {
	var p = new(OC_SortItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SortItem

	return p
}

func (s *OC_SortItemContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SortItemContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_SortItemContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(CypherParserASCENDING, 0)
}

func (s *OC_SortItemContext) ASC() antlr.TerminalNode {
	return s.GetToken(CypherParserASC, 0)
}

func (s *OC_SortItemContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(CypherParserDESCENDING, 0)
}

func (s *OC_SortItemContext) DESC() antlr.TerminalNode {
	return s.GetToken(CypherParserDESC, 0)
}

func (s *OC_SortItemContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_SortItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SortItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SortItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SortItem(s)
	}
}

func (s *OC_SortItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SortItem(s)
	}
}

func (p *CypherParser) OC_SortItem() (localctx IOC_SortItemContext) {
	localctx = NewOC_SortItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, CypherParserRULE_oC_SortItem)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(627)
		p.OC_Expression()
	}
	p.SetState(632)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
		p.SetState(629)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(628)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(631)
			_la = p.GetTokenStream().LA(1)

			if !(((_la-68)&-(0x1f+1)) == 0 && ((1<<uint((_la-68)))&((1<<(CypherParserASCENDING-68))|(1<<(CypherParserASC-68))|(1<<(CypherParserDESCENDING-68))|(1<<(CypherParserDESC-68)))) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

	}

	return localctx
}

// IOC_WhereContext is an interface to support dynamic dispatch.
type IOC_WhereContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_WhereContext differentiates from other interfaces.
	IsOC_WhereContext()
}

type OC_WhereContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_WhereContext() *OC_WhereContext {
	var p = new(OC_WhereContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Where
	return p
}

func (*OC_WhereContext) IsOC_WhereContext() {}

func NewOC_WhereContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_WhereContext {
	var p = new(OC_WhereContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Where

	return p
}

func (s *OC_WhereContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_WhereContext) WHERE() antlr.TerminalNode {
	return s.GetToken(CypherParserWHERE, 0)
}

func (s *OC_WhereContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_WhereContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_WhereContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_WhereContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_WhereContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Where(s)
	}
}

func (s *OC_WhereContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Where(s)
	}
}

func (p *CypherParser) OC_Where() (localctx IOC_WhereContext) {
	localctx = NewOC_WhereContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, CypherParserRULE_oC_Where)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(634)
		p.Match(CypherParserWHERE)
	}
	{
		p.SetState(635)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(636)
		p.OC_Expression()
	}

	return localctx
}

// IOC_PatternContext is an interface to support dynamic dispatch.
type IOC_PatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternContext differentiates from other interfaces.
	IsOC_PatternContext()
}

type OC_PatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternContext() *OC_PatternContext {
	var p = new(OC_PatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Pattern
	return p
}

func (*OC_PatternContext) IsOC_PatternContext() {}

func NewOC_PatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternContext {
	var p = new(OC_PatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Pattern

	return p
}

func (s *OC_PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternContext) AllOC_PatternPart() []IOC_PatternPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PatternPartContext)(nil)).Elem())
	var tst = make([]IOC_PatternPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PatternPartContext)
		}
	}

	return tst
}

func (s *OC_PatternContext) OC_PatternPart(i int) IOC_PatternPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternPartContext)
}

func (s *OC_PatternContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PatternContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Pattern(s)
	}
}

func (s *OC_PatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Pattern(s)
	}
}

func (p *CypherParser) OC_Pattern() (localctx IOC_PatternContext) {
	localctx = NewOC_PatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, CypherParserRULE_oC_Pattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(638)
		p.OC_PatternPart()
	}
	p.SetState(649)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(640)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(639)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(642)
				p.Match(CypherParserT__1)
			}
			p.SetState(644)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(643)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(646)
				p.OC_PatternPart()
			}

		}
		p.SetState(651)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_PatternPartContext is an interface to support dynamic dispatch.
type IOC_PatternPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternPartContext differentiates from other interfaces.
	IsOC_PatternPartContext()
}

type OC_PatternPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternPartContext() *OC_PatternPartContext {
	var p = new(OC_PatternPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PatternPart
	return p
}

func (*OC_PatternPartContext) IsOC_PatternPartContext() {}

func NewOC_PatternPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternPartContext {
	var p = new(OC_PatternPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PatternPart

	return p
}

func (s *OC_PatternPartContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternPartContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_PatternPartContext) OC_AnonymousPatternPart() IOC_AnonymousPatternPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AnonymousPatternPartContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AnonymousPatternPartContext)
}

func (s *OC_PatternPartContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PatternPartContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PatternPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PatternPart(s)
	}
}

func (s *OC_PatternPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PatternPart(s)
	}
}

func (p *CypherParser) OC_PatternPart() (localctx IOC_PatternPartContext) {
	localctx = NewOC_PatternPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, CypherParserRULE_oC_PatternPart)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(663)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(652)
			p.OC_Variable()
		}
		p.SetState(654)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(653)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(656)
			p.Match(CypherParserT__2)
		}
		p.SetState(658)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(657)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(660)
			p.OC_AnonymousPatternPart()
		}

	case CypherParserT__5:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(662)
			p.OC_AnonymousPatternPart()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_AnonymousPatternPartContext is an interface to support dynamic dispatch.
type IOC_AnonymousPatternPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_AnonymousPatternPartContext differentiates from other interfaces.
	IsOC_AnonymousPatternPartContext()
}

type OC_AnonymousPatternPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_AnonymousPatternPartContext() *OC_AnonymousPatternPartContext {
	var p = new(OC_AnonymousPatternPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_AnonymousPatternPart
	return p
}

func (*OC_AnonymousPatternPartContext) IsOC_AnonymousPatternPartContext() {}

func NewOC_AnonymousPatternPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_AnonymousPatternPartContext {
	var p = new(OC_AnonymousPatternPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_AnonymousPatternPart

	return p
}

func (s *OC_AnonymousPatternPartContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_AnonymousPatternPartContext) OC_PatternElement() IOC_PatternElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternElementContext)
}

func (s *OC_AnonymousPatternPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_AnonymousPatternPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_AnonymousPatternPartContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_AnonymousPatternPart(s)
	}
}

func (s *OC_AnonymousPatternPartContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_AnonymousPatternPart(s)
	}
}

func (p *CypherParser) OC_AnonymousPatternPart() (localctx IOC_AnonymousPatternPartContext) {
	localctx = NewOC_AnonymousPatternPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, CypherParserRULE_oC_AnonymousPatternPart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(665)
		p.OC_PatternElement()
	}

	return localctx
}

// IOC_PatternElementContext is an interface to support dynamic dispatch.
type IOC_PatternElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternElementContext differentiates from other interfaces.
	IsOC_PatternElementContext()
}

type OC_PatternElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternElementContext() *OC_PatternElementContext {
	var p = new(OC_PatternElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PatternElement
	return p
}

func (*OC_PatternElementContext) IsOC_PatternElementContext() {}

func NewOC_PatternElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternElementContext {
	var p = new(OC_PatternElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PatternElement

	return p
}

func (s *OC_PatternElementContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternElementContext) OC_NodePattern() IOC_NodePatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodePatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodePatternContext)
}

func (s *OC_PatternElementContext) AllOC_PatternElementChain() []IOC_PatternElementChainContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PatternElementChainContext)(nil)).Elem())
	var tst = make([]IOC_PatternElementChainContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PatternElementChainContext)
		}
	}

	return tst
}

func (s *OC_PatternElementContext) OC_PatternElementChain(i int) IOC_PatternElementChainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternElementChainContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternElementChainContext)
}

func (s *OC_PatternElementContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PatternElementContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PatternElementContext) OC_PatternElement() IOC_PatternElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternElementContext)
}

func (s *OC_PatternElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PatternElement(s)
	}
}

func (s *OC_PatternElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PatternElement(s)
	}
}

func (p *CypherParser) OC_PatternElement() (localctx IOC_PatternElementContext) {
	localctx = NewOC_PatternElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, CypherParserRULE_oC_PatternElement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(667)
			p.OC_NodePattern()
		}
		p.SetState(674)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext())

		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				p.SetState(669)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(668)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(671)
					p.OC_PatternElementChain()
				}

			}
			p.SetState(676)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext())
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(677)
			p.Match(CypherParserT__5)
		}
		{
			p.SetState(678)
			p.OC_PatternElement()
		}
		{
			p.SetState(679)
			p.Match(CypherParserT__6)
		}

	}

	return localctx
}

// IOC_NodePatternContext is an interface to support dynamic dispatch.
type IOC_NodePatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NodePatternContext differentiates from other interfaces.
	IsOC_NodePatternContext()
}

type OC_NodePatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NodePatternContext() *OC_NodePatternContext {
	var p = new(OC_NodePatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NodePattern
	return p
}

func (*OC_NodePatternContext) IsOC_NodePatternContext() {}

func NewOC_NodePatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NodePatternContext {
	var p = new(OC_NodePatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NodePattern

	return p
}

func (s *OC_NodePatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NodePatternContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_NodePatternContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_NodePatternContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_NodePatternContext) OC_NodeLabels() IOC_NodeLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelsContext)
}

func (s *OC_NodePatternContext) OC_Properties() IOC_PropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertiesContext)
}

func (s *OC_NodePatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NodePatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NodePatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NodePattern(s)
	}
}

func (s *OC_NodePatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NodePattern(s)
	}
}

func (p *CypherParser) OC_NodePattern() (localctx IOC_NodePatternContext) {
	localctx = NewOC_NodePatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, CypherParserRULE_oC_NodePattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(683)
		p.Match(CypherParserT__5)
	}
	p.SetState(685)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(684)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(691)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(CypherParserCOUNT-83))|(1<<(CypherParserANY-83))|(1<<(CypherParserNONE-83))|(1<<(CypherParserSINGLE-83))|(1<<(CypherParserHexLetter-83)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(687)
			p.OC_Variable()
		}
		p.SetState(689)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(688)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(697)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__9 {
		{
			p.SetState(693)
			p.OC_NodeLabels()
		}
		p.SetState(695)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(694)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(703)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__23 || _la == CypherParserT__25 {
		{
			p.SetState(699)
			p.OC_Properties()
		}
		p.SetState(701)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(700)
				p.Match(CypherParserSP)
			}

		}

	}
	{
		p.SetState(705)
		p.Match(CypherParserT__6)
	}

	return localctx
}

// IOC_PatternElementChainContext is an interface to support dynamic dispatch.
type IOC_PatternElementChainContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternElementChainContext differentiates from other interfaces.
	IsOC_PatternElementChainContext()
}

type OC_PatternElementChainContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternElementChainContext() *OC_PatternElementChainContext {
	var p = new(OC_PatternElementChainContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PatternElementChain
	return p
}

func (*OC_PatternElementChainContext) IsOC_PatternElementChainContext() {}

func NewOC_PatternElementChainContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternElementChainContext {
	var p = new(OC_PatternElementChainContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PatternElementChain

	return p
}

func (s *OC_PatternElementChainContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternElementChainContext) OC_RelationshipPattern() IOC_RelationshipPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipPatternContext)
}

func (s *OC_PatternElementChainContext) OC_NodePattern() IOC_NodePatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodePatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodePatternContext)
}

func (s *OC_PatternElementChainContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_PatternElementChainContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternElementChainContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternElementChainContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PatternElementChain(s)
	}
}

func (s *OC_PatternElementChainContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PatternElementChain(s)
	}
}

func (p *CypherParser) OC_PatternElementChain() (localctx IOC_PatternElementChainContext) {
	localctx = NewOC_PatternElementChainContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, CypherParserRULE_oC_PatternElementChain)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(707)
		p.OC_RelationshipPattern()
	}
	p.SetState(709)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(708)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(711)
		p.OC_NodePattern()
	}

	return localctx
}

// IOC_RelationshipPatternContext is an interface to support dynamic dispatch.
type IOC_RelationshipPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelationshipPatternContext differentiates from other interfaces.
	IsOC_RelationshipPatternContext()
}

type OC_RelationshipPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelationshipPatternContext() *OC_RelationshipPatternContext {
	var p = new(OC_RelationshipPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelationshipPattern
	return p
}

func (*OC_RelationshipPatternContext) IsOC_RelationshipPatternContext() {}

func NewOC_RelationshipPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelationshipPatternContext {
	var p = new(OC_RelationshipPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelationshipPattern

	return p
}

func (s *OC_RelationshipPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelationshipPatternContext) OC_LeftArrowHead() IOC_LeftArrowHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_LeftArrowHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_LeftArrowHeadContext)
}

func (s *OC_RelationshipPatternContext) AllOC_Dash() []IOC_DashContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_DashContext)(nil)).Elem())
	var tst = make([]IOC_DashContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_DashContext)
		}
	}

	return tst
}

func (s *OC_RelationshipPatternContext) OC_Dash(i int) IOC_DashContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_DashContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_DashContext)
}

func (s *OC_RelationshipPatternContext) OC_RightArrowHead() IOC_RightArrowHeadContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RightArrowHeadContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RightArrowHeadContext)
}

func (s *OC_RelationshipPatternContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RelationshipPatternContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RelationshipPatternContext) OC_RelationshipDetail() IOC_RelationshipDetailContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipDetailContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipDetailContext)
}

func (s *OC_RelationshipPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelationshipPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelationshipPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelationshipPattern(s)
	}
}

func (s *OC_RelationshipPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelationshipPattern(s)
	}
}

func (p *CypherParser) OC_RelationshipPattern() (localctx IOC_RelationshipPatternContext) {
	localctx = NewOC_RelationshipPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, CypherParserRULE_oC_RelationshipPattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(777)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(713)
			p.OC_LeftArrowHead()
		}
		p.SetState(715)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(714)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(717)
			p.OC_Dash()
		}
		p.SetState(719)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 106, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(718)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(722)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserT__7 {
			{
				p.SetState(721)
				p.OC_RelationshipDetail()
			}

		}
		p.SetState(725)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(724)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(727)
			p.OC_Dash()
		}
		p.SetState(729)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(728)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(731)
			p.OC_RightArrowHead()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(733)
			p.OC_LeftArrowHead()
		}
		p.SetState(735)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(734)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(737)
			p.OC_Dash()
		}
		p.SetState(739)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 111, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(738)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(742)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserT__7 {
			{
				p.SetState(741)
				p.OC_RelationshipDetail()
			}

		}
		p.SetState(745)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(744)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(747)
			p.OC_Dash()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(749)
			p.OC_Dash()
		}
		p.SetState(751)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(750)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(754)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserT__7 {
			{
				p.SetState(753)
				p.OC_RelationshipDetail()
			}

		}
		p.SetState(757)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(756)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(759)
			p.OC_Dash()
		}
		p.SetState(761)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(760)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(763)
			p.OC_RightArrowHead()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(765)
			p.OC_Dash()
		}
		p.SetState(767)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(766)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(770)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserT__7 {
			{
				p.SetState(769)
				p.OC_RelationshipDetail()
			}

		}
		p.SetState(773)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(772)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(775)
			p.OC_Dash()
		}

	}

	return localctx
}

// IOC_RelationshipDetailContext is an interface to support dynamic dispatch.
type IOC_RelationshipDetailContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelationshipDetailContext differentiates from other interfaces.
	IsOC_RelationshipDetailContext()
}

type OC_RelationshipDetailContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelationshipDetailContext() *OC_RelationshipDetailContext {
	var p = new(OC_RelationshipDetailContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelationshipDetail
	return p
}

func (*OC_RelationshipDetailContext) IsOC_RelationshipDetailContext() {}

func NewOC_RelationshipDetailContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelationshipDetailContext {
	var p = new(OC_RelationshipDetailContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelationshipDetail

	return p
}

func (s *OC_RelationshipDetailContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelationshipDetailContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RelationshipDetailContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RelationshipDetailContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_RelationshipDetailContext) OC_RelationshipTypes() IOC_RelationshipTypesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipTypesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipTypesContext)
}

func (s *OC_RelationshipDetailContext) OC_RangeLiteral() IOC_RangeLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RangeLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RangeLiteralContext)
}

func (s *OC_RelationshipDetailContext) OC_Properties() IOC_PropertiesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertiesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertiesContext)
}

func (s *OC_RelationshipDetailContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelationshipDetailContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelationshipDetailContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelationshipDetail(s)
	}
}

func (s *OC_RelationshipDetailContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelationshipDetail(s)
	}
}

func (p *CypherParser) OC_RelationshipDetail() (localctx IOC_RelationshipDetailContext) {
	localctx = NewOC_RelationshipDetailContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, CypherParserRULE_oC_RelationshipDetail)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(779)
		p.Match(CypherParserT__7)
	}
	p.SetState(781)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(780)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(787)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(CypherParserCOUNT-83))|(1<<(CypherParserANY-83))|(1<<(CypherParserNONE-83))|(1<<(CypherParserSINGLE-83))|(1<<(CypherParserHexLetter-83)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(783)
			p.OC_Variable()
		}
		p.SetState(785)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(784)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(793)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__9 {
		{
			p.SetState(789)
			p.OC_RelationshipTypes()
		}
		p.SetState(791)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(790)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(796)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__4 {
		{
			p.SetState(795)
			p.OC_RangeLiteral()
		}

	}
	p.SetState(802)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__23 || _la == CypherParserT__25 {
		{
			p.SetState(798)
			p.OC_Properties()
		}
		p.SetState(800)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(799)
				p.Match(CypherParserSP)
			}

		}

	}
	{
		p.SetState(804)
		p.Match(CypherParserT__8)
	}

	return localctx
}

// IOC_PropertiesContext is an interface to support dynamic dispatch.
type IOC_PropertiesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertiesContext differentiates from other interfaces.
	IsOC_PropertiesContext()
}

type OC_PropertiesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertiesContext() *OC_PropertiesContext {
	var p = new(OC_PropertiesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Properties
	return p
}

func (*OC_PropertiesContext) IsOC_PropertiesContext() {}

func NewOC_PropertiesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertiesContext {
	var p = new(OC_PropertiesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Properties

	return p
}

func (s *OC_PropertiesContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertiesContext) OC_MapLiteral() IOC_MapLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MapLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MapLiteralContext)
}

func (s *OC_PropertiesContext) OC_Parameter() IOC_ParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ParameterContext)
}

func (s *OC_PropertiesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertiesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertiesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Properties(s)
	}
}

func (s *OC_PropertiesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Properties(s)
	}
}

func (p *CypherParser) OC_Properties() (localctx IOC_PropertiesContext) {
	localctx = NewOC_PropertiesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, CypherParserRULE_oC_Properties)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(808)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserT__23:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(806)
			p.OC_MapLiteral()
		}

	case CypherParserT__25:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(807)
			p.OC_Parameter()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_RelationshipTypesContext is an interface to support dynamic dispatch.
type IOC_RelationshipTypesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelationshipTypesContext differentiates from other interfaces.
	IsOC_RelationshipTypesContext()
}

type OC_RelationshipTypesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelationshipTypesContext() *OC_RelationshipTypesContext {
	var p = new(OC_RelationshipTypesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelationshipTypes
	return p
}

func (*OC_RelationshipTypesContext) IsOC_RelationshipTypesContext() {}

func NewOC_RelationshipTypesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelationshipTypesContext {
	var p = new(OC_RelationshipTypesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelationshipTypes

	return p
}

func (s *OC_RelationshipTypesContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelationshipTypesContext) AllOC_RelTypeName() []IOC_RelTypeNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_RelTypeNameContext)(nil)).Elem())
	var tst = make([]IOC_RelTypeNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_RelTypeNameContext)
		}
	}

	return tst
}

func (s *OC_RelationshipTypesContext) OC_RelTypeName(i int) IOC_RelTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelTypeNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_RelTypeNameContext)
}

func (s *OC_RelationshipTypesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RelationshipTypesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RelationshipTypesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelationshipTypesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelationshipTypesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelationshipTypes(s)
	}
}

func (s *OC_RelationshipTypesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelationshipTypes(s)
	}
}

func (p *CypherParser) OC_RelationshipTypes() (localctx IOC_RelationshipTypesContext) {
	localctx = NewOC_RelationshipTypesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, CypherParserRULE_oC_RelationshipTypes)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(810)
		p.Match(CypherParserT__9)
	}
	p.SetState(812)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(811)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(814)
		p.OC_RelTypeName()
	}
	p.SetState(828)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(816)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(815)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(818)
				p.Match(CypherParserT__10)
			}
			p.SetState(820)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserT__9 {
				{
					p.SetState(819)
					p.Match(CypherParserT__9)
				}

			}
			p.SetState(823)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(822)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(825)
				p.OC_RelTypeName()
			}

		}
		p.SetState(830)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 135, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_NodeLabelsContext is an interface to support dynamic dispatch.
type IOC_NodeLabelsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NodeLabelsContext differentiates from other interfaces.
	IsOC_NodeLabelsContext()
}

type OC_NodeLabelsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NodeLabelsContext() *OC_NodeLabelsContext {
	var p = new(OC_NodeLabelsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NodeLabels
	return p
}

func (*OC_NodeLabelsContext) IsOC_NodeLabelsContext() {}

func NewOC_NodeLabelsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NodeLabelsContext {
	var p = new(OC_NodeLabelsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NodeLabels

	return p
}

func (s *OC_NodeLabelsContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NodeLabelsContext) AllOC_NodeLabel() []IOC_NodeLabelContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_NodeLabelContext)(nil)).Elem())
	var tst = make([]IOC_NodeLabelContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_NodeLabelContext)
		}
	}

	return tst
}

func (s *OC_NodeLabelsContext) OC_NodeLabel(i int) IOC_NodeLabelContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelContext)
}

func (s *OC_NodeLabelsContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_NodeLabelsContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_NodeLabelsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NodeLabelsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NodeLabelsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NodeLabels(s)
	}
}

func (s *OC_NodeLabelsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NodeLabels(s)
	}
}

func (p *CypherParser) OC_NodeLabels() (localctx IOC_NodeLabelsContext) {
	localctx = NewOC_NodeLabelsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, CypherParserRULE_oC_NodeLabels)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(831)
		p.OC_NodeLabel()
	}
	p.SetState(838)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(833)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(832)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(835)
				p.OC_NodeLabel()
			}

		}
		p.SetState(840)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 137, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_NodeLabelContext is an interface to support dynamic dispatch.
type IOC_NodeLabelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NodeLabelContext differentiates from other interfaces.
	IsOC_NodeLabelContext()
}

type OC_NodeLabelContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NodeLabelContext() *OC_NodeLabelContext {
	var p = new(OC_NodeLabelContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NodeLabel
	return p
}

func (*OC_NodeLabelContext) IsOC_NodeLabelContext() {}

func NewOC_NodeLabelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NodeLabelContext {
	var p = new(OC_NodeLabelContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NodeLabel

	return p
}

func (s *OC_NodeLabelContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NodeLabelContext) OC_LabelName() IOC_LabelNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_LabelNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_LabelNameContext)
}

func (s *OC_NodeLabelContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_NodeLabelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NodeLabelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NodeLabelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NodeLabel(s)
	}
}

func (s *OC_NodeLabelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NodeLabel(s)
	}
}

func (p *CypherParser) OC_NodeLabel() (localctx IOC_NodeLabelContext) {
	localctx = NewOC_NodeLabelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, CypherParserRULE_oC_NodeLabel)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(841)
		p.Match(CypherParserT__9)
	}
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(842)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(845)
		p.OC_LabelName()
	}

	return localctx
}

// IOC_RangeLiteralContext is an interface to support dynamic dispatch.
type IOC_RangeLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RangeLiteralContext differentiates from other interfaces.
	IsOC_RangeLiteralContext()
}

type OC_RangeLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RangeLiteralContext() *OC_RangeLiteralContext {
	var p = new(OC_RangeLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RangeLiteral
	return p
}

func (*OC_RangeLiteralContext) IsOC_RangeLiteralContext() {}

func NewOC_RangeLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RangeLiteralContext {
	var p = new(OC_RangeLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RangeLiteral

	return p
}

func (s *OC_RangeLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RangeLiteralContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RangeLiteralContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RangeLiteralContext) AllOC_IntegerLiteral() []IOC_IntegerLiteralContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_IntegerLiteralContext)(nil)).Elem())
	var tst = make([]IOC_IntegerLiteralContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_IntegerLiteralContext)
		}
	}

	return tst
}

func (s *OC_RangeLiteralContext) OC_IntegerLiteral(i int) IOC_IntegerLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_IntegerLiteralContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_IntegerLiteralContext)
}

func (s *OC_RangeLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RangeLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RangeLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RangeLiteral(s)
	}
}

func (s *OC_RangeLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RangeLiteral(s)
	}
}

func (p *CypherParser) OC_RangeLiteral() (localctx IOC_RangeLiteralContext) {
	localctx = NewOC_RangeLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, CypherParserRULE_oC_RangeLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(847)
		p.Match(CypherParserT__4)
	}
	p.SetState(849)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(848)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(855)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CypherParserHexInteger-97))|(1<<(CypherParserDecimalInteger-97))|(1<<(CypherParserOctalInteger-97)))) != 0 {
		{
			p.SetState(851)
			p.OC_IntegerLiteral()
		}
		p.SetState(853)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(852)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(867)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserT__11 {
		{
			p.SetState(857)
			p.Match(CypherParserT__11)
		}
		p.SetState(859)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(858)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(865)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if ((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CypherParserHexInteger-97))|(1<<(CypherParserDecimalInteger-97))|(1<<(CypherParserOctalInteger-97)))) != 0 {
			{
				p.SetState(861)
				p.OC_IntegerLiteral()
			}
			p.SetState(863)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(862)
					p.Match(CypherParserSP)
				}

			}

		}

	}

	return localctx
}

// IOC_LabelNameContext is an interface to support dynamic dispatch.
type IOC_LabelNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_LabelNameContext differentiates from other interfaces.
	IsOC_LabelNameContext()
}

type OC_LabelNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_LabelNameContext() *OC_LabelNameContext {
	var p = new(OC_LabelNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_LabelName
	return p
}

func (*OC_LabelNameContext) IsOC_LabelNameContext() {}

func NewOC_LabelNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_LabelNameContext {
	var p = new(OC_LabelNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_LabelName

	return p
}

func (s *OC_LabelNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_LabelNameContext) OC_SchemaName() IOC_SchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SchemaNameContext)
}

func (s *OC_LabelNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_LabelNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_LabelNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_LabelName(s)
	}
}

func (s *OC_LabelNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_LabelName(s)
	}
}

func (p *CypherParser) OC_LabelName() (localctx IOC_LabelNameContext) {
	localctx = NewOC_LabelNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, CypherParserRULE_oC_LabelName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(869)
		p.OC_SchemaName()
	}

	return localctx
}

// IOC_RelTypeNameContext is an interface to support dynamic dispatch.
type IOC_RelTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelTypeNameContext differentiates from other interfaces.
	IsOC_RelTypeNameContext()
}

type OC_RelTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelTypeNameContext() *OC_RelTypeNameContext {
	var p = new(OC_RelTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelTypeName
	return p
}

func (*OC_RelTypeNameContext) IsOC_RelTypeNameContext() {}

func NewOC_RelTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelTypeNameContext {
	var p = new(OC_RelTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelTypeName

	return p
}

func (s *OC_RelTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelTypeNameContext) OC_SchemaName() IOC_SchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SchemaNameContext)
}

func (s *OC_RelTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelTypeName(s)
	}
}

func (s *OC_RelTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelTypeName(s)
	}
}

func (p *CypherParser) OC_RelTypeName() (localctx IOC_RelTypeNameContext) {
	localctx = NewOC_RelTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, CypherParserRULE_oC_RelTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(871)
		p.OC_SchemaName()
	}

	return localctx
}

// IOC_ExpressionContext is an interface to support dynamic dispatch.
type IOC_ExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ExpressionContext differentiates from other interfaces.
	IsOC_ExpressionContext()
}

type OC_ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ExpressionContext() *OC_ExpressionContext {
	var p = new(OC_ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Expression
	return p
}

func (*OC_ExpressionContext) IsOC_ExpressionContext() {}

func NewOC_ExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ExpressionContext {
	var p = new(OC_ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Expression

	return p
}

func (s *OC_ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ExpressionContext) OC_OrExpression() IOC_OrExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_OrExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_OrExpressionContext)
}

func (s *OC_ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Expression(s)
	}
}

func (s *OC_ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Expression(s)
	}
}

func (p *CypherParser) OC_Expression() (localctx IOC_ExpressionContext) {
	localctx = NewOC_ExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, CypherParserRULE_oC_Expression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(873)
		p.OC_OrExpression()
	}

	return localctx
}

// IOC_OrExpressionContext is an interface to support dynamic dispatch.
type IOC_OrExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_OrExpressionContext differentiates from other interfaces.
	IsOC_OrExpressionContext()
}

type OC_OrExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_OrExpressionContext() *OC_OrExpressionContext {
	var p = new(OC_OrExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_OrExpression
	return p
}

func (*OC_OrExpressionContext) IsOC_OrExpressionContext() {}

func NewOC_OrExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_OrExpressionContext {
	var p = new(OC_OrExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_OrExpression

	return p
}

func (s *OC_OrExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_OrExpressionContext) AllOC_XorExpression() []IOC_XorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_XorExpressionContext)(nil)).Elem())
	var tst = make([]IOC_XorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_XorExpressionContext)
		}
	}

	return tst
}

func (s *OC_OrExpressionContext) OC_XorExpression(i int) IOC_XorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_XorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_XorExpressionContext)
}

func (s *OC_OrExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_OrExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_OrExpressionContext) AllOR() []antlr.TerminalNode {
	return s.GetTokens(CypherParserOR)
}

func (s *OC_OrExpressionContext) OR(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserOR, i)
}

func (s *OC_OrExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_OrExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_OrExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_OrExpression(s)
	}
}

func (s *OC_OrExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_OrExpression(s)
	}
}

func (p *CypherParser) OC_OrExpression() (localctx IOC_OrExpressionContext) {
	localctx = NewOC_OrExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, CypherParserRULE_oC_OrExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(875)
		p.OC_XorExpression()
	}
	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(876)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(877)
				p.Match(CypherParserOR)
			}
			{
				p.SetState(878)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(879)
				p.OC_XorExpression()
			}

		}
		p.SetState(884)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 146, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_XorExpressionContext is an interface to support dynamic dispatch.
type IOC_XorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_XorExpressionContext differentiates from other interfaces.
	IsOC_XorExpressionContext()
}

type OC_XorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_XorExpressionContext() *OC_XorExpressionContext {
	var p = new(OC_XorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_XorExpression
	return p
}

func (*OC_XorExpressionContext) IsOC_XorExpressionContext() {}

func NewOC_XorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_XorExpressionContext {
	var p = new(OC_XorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_XorExpression

	return p
}

func (s *OC_XorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_XorExpressionContext) AllOC_AndExpression() []IOC_AndExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_AndExpressionContext)(nil)).Elem())
	var tst = make([]IOC_AndExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_AndExpressionContext)
		}
	}

	return tst
}

func (s *OC_XorExpressionContext) OC_AndExpression(i int) IOC_AndExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AndExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_AndExpressionContext)
}

func (s *OC_XorExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_XorExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_XorExpressionContext) AllXOR() []antlr.TerminalNode {
	return s.GetTokens(CypherParserXOR)
}

func (s *OC_XorExpressionContext) XOR(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserXOR, i)
}

func (s *OC_XorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_XorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_XorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_XorExpression(s)
	}
}

func (s *OC_XorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_XorExpression(s)
	}
}

func (p *CypherParser) OC_XorExpression() (localctx IOC_XorExpressionContext) {
	localctx = NewOC_XorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, CypherParserRULE_oC_XorExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(885)
		p.OC_AndExpression()
	}
	p.SetState(892)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(886)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(887)
				p.Match(CypherParserXOR)
			}
			{
				p.SetState(888)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(889)
				p.OC_AndExpression()
			}

		}
		p.SetState(894)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 147, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_AndExpressionContext is an interface to support dynamic dispatch.
type IOC_AndExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_AndExpressionContext differentiates from other interfaces.
	IsOC_AndExpressionContext()
}

type OC_AndExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_AndExpressionContext() *OC_AndExpressionContext {
	var p = new(OC_AndExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_AndExpression
	return p
}

func (*OC_AndExpressionContext) IsOC_AndExpressionContext() {}

func NewOC_AndExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_AndExpressionContext {
	var p = new(OC_AndExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_AndExpression

	return p
}

func (s *OC_AndExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_AndExpressionContext) AllOC_NotExpression() []IOC_NotExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_NotExpressionContext)(nil)).Elem())
	var tst = make([]IOC_NotExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_NotExpressionContext)
		}
	}

	return tst
}

func (s *OC_AndExpressionContext) OC_NotExpression(i int) IOC_NotExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NotExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_NotExpressionContext)
}

func (s *OC_AndExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_AndExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_AndExpressionContext) AllAND() []antlr.TerminalNode {
	return s.GetTokens(CypherParserAND)
}

func (s *OC_AndExpressionContext) AND(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserAND, i)
}

func (s *OC_AndExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_AndExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_AndExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_AndExpression(s)
	}
}

func (s *OC_AndExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_AndExpression(s)
	}
}

func (p *CypherParser) OC_AndExpression() (localctx IOC_AndExpressionContext) {
	localctx = NewOC_AndExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, CypherParserRULE_oC_AndExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(895)
		p.OC_NotExpression()
	}
	p.SetState(902)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(896)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(897)
				p.Match(CypherParserAND)
			}
			{
				p.SetState(898)
				p.Match(CypherParserSP)
			}
			{
				p.SetState(899)
				p.OC_NotExpression()
			}

		}
		p.SetState(904)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 148, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_NotExpressionContext is an interface to support dynamic dispatch.
type IOC_NotExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NotExpressionContext differentiates from other interfaces.
	IsOC_NotExpressionContext()
}

type OC_NotExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NotExpressionContext() *OC_NotExpressionContext {
	var p = new(OC_NotExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NotExpression
	return p
}

func (*OC_NotExpressionContext) IsOC_NotExpressionContext() {}

func NewOC_NotExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NotExpressionContext {
	var p = new(OC_NotExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NotExpression

	return p
}

func (s *OC_NotExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NotExpressionContext) OC_ComparisonExpression() IOC_ComparisonExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ComparisonExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ComparisonExpressionContext)
}

func (s *OC_NotExpressionContext) AllNOT() []antlr.TerminalNode {
	return s.GetTokens(CypherParserNOT)
}

func (s *OC_NotExpressionContext) NOT(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserNOT, i)
}

func (s *OC_NotExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_NotExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_NotExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NotExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NotExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NotExpression(s)
	}
}

func (s *OC_NotExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NotExpression(s)
	}
}

func (p *CypherParser) OC_NotExpression() (localctx IOC_NotExpressionContext) {
	localctx = NewOC_NotExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, CypherParserRULE_oC_NotExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(911)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CypherParserNOT {
		{
			p.SetState(905)
			p.Match(CypherParserNOT)
		}
		p.SetState(907)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(906)
				p.Match(CypherParserSP)
			}

		}

		p.SetState(913)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(914)
		p.OC_ComparisonExpression()
	}

	return localctx
}

// IOC_ComparisonExpressionContext is an interface to support dynamic dispatch.
type IOC_ComparisonExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ComparisonExpressionContext differentiates from other interfaces.
	IsOC_ComparisonExpressionContext()
}

type OC_ComparisonExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ComparisonExpressionContext() *OC_ComparisonExpressionContext {
	var p = new(OC_ComparisonExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ComparisonExpression
	return p
}

func (*OC_ComparisonExpressionContext) IsOC_ComparisonExpressionContext() {}

func NewOC_ComparisonExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ComparisonExpressionContext {
	var p = new(OC_ComparisonExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ComparisonExpression

	return p
}

func (s *OC_ComparisonExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ComparisonExpressionContext) OC_AddOrSubtractExpression() IOC_AddOrSubtractExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AddOrSubtractExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AddOrSubtractExpressionContext)
}

func (s *OC_ComparisonExpressionContext) AllOC_PartialComparisonExpression() []IOC_PartialComparisonExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PartialComparisonExpressionContext)(nil)).Elem())
	var tst = make([]IOC_PartialComparisonExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PartialComparisonExpressionContext)
		}
	}

	return tst
}

func (s *OC_ComparisonExpressionContext) OC_PartialComparisonExpression(i int) IOC_PartialComparisonExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PartialComparisonExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PartialComparisonExpressionContext)
}

func (s *OC_ComparisonExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ComparisonExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ComparisonExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ComparisonExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ComparisonExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ComparisonExpression(s)
	}
}

func (s *OC_ComparisonExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ComparisonExpression(s)
	}
}

func (p *CypherParser) OC_ComparisonExpression() (localctx IOC_ComparisonExpressionContext) {
	localctx = NewOC_ComparisonExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, CypherParserRULE_oC_ComparisonExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(916)
		p.OC_AddOrSubtractExpression()
	}
	p.SetState(923)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(918)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(917)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(920)
				p.OC_PartialComparisonExpression()
			}

		}
		p.SetState(925)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 152, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_AddOrSubtractExpressionContext is an interface to support dynamic dispatch.
type IOC_AddOrSubtractExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_AddOrSubtractExpressionContext differentiates from other interfaces.
	IsOC_AddOrSubtractExpressionContext()
}

type OC_AddOrSubtractExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_AddOrSubtractExpressionContext() *OC_AddOrSubtractExpressionContext {
	var p = new(OC_AddOrSubtractExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_AddOrSubtractExpression
	return p
}

func (*OC_AddOrSubtractExpressionContext) IsOC_AddOrSubtractExpressionContext() {}

func NewOC_AddOrSubtractExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_AddOrSubtractExpressionContext {
	var p = new(OC_AddOrSubtractExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_AddOrSubtractExpression

	return p
}

func (s *OC_AddOrSubtractExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_AddOrSubtractExpressionContext) AllOC_MultiplyDivideModuloExpression() []IOC_MultiplyDivideModuloExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_MultiplyDivideModuloExpressionContext)(nil)).Elem())
	var tst = make([]IOC_MultiplyDivideModuloExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_MultiplyDivideModuloExpressionContext)
		}
	}

	return tst
}

func (s *OC_AddOrSubtractExpressionContext) OC_MultiplyDivideModuloExpression(i int) IOC_MultiplyDivideModuloExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MultiplyDivideModuloExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_MultiplyDivideModuloExpressionContext)
}

func (s *OC_AddOrSubtractExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_AddOrSubtractExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_AddOrSubtractExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_AddOrSubtractExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_AddOrSubtractExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_AddOrSubtractExpression(s)
	}
}

func (s *OC_AddOrSubtractExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_AddOrSubtractExpression(s)
	}
}

func (p *CypherParser) OC_AddOrSubtractExpression() (localctx IOC_AddOrSubtractExpressionContext) {
	localctx = NewOC_AddOrSubtractExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, CypherParserRULE_oC_AddOrSubtractExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(926)
		p.OC_MultiplyDivideModuloExpression()
	}
	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(943)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 157, p.GetParserRuleContext()) {
			case 1:
				p.SetState(928)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(927)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(930)
					p.Match(CypherParserT__12)
				}
				p.SetState(932)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(931)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(934)
					p.OC_MultiplyDivideModuloExpression()
				}

			case 2:
				p.SetState(936)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(935)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(938)
					p.Match(CypherParserT__13)
				}
				p.SetState(940)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(939)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(942)
					p.OC_MultiplyDivideModuloExpression()
				}

			}

		}
		p.SetState(947)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 158, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_MultiplyDivideModuloExpressionContext is an interface to support dynamic dispatch.
type IOC_MultiplyDivideModuloExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MultiplyDivideModuloExpressionContext differentiates from other interfaces.
	IsOC_MultiplyDivideModuloExpressionContext()
}

type OC_MultiplyDivideModuloExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MultiplyDivideModuloExpressionContext() *OC_MultiplyDivideModuloExpressionContext {
	var p = new(OC_MultiplyDivideModuloExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_MultiplyDivideModuloExpression
	return p
}

func (*OC_MultiplyDivideModuloExpressionContext) IsOC_MultiplyDivideModuloExpressionContext() {}

func NewOC_MultiplyDivideModuloExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MultiplyDivideModuloExpressionContext {
	var p = new(OC_MultiplyDivideModuloExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_MultiplyDivideModuloExpression

	return p
}

func (s *OC_MultiplyDivideModuloExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MultiplyDivideModuloExpressionContext) AllOC_PowerOfExpression() []IOC_PowerOfExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PowerOfExpressionContext)(nil)).Elem())
	var tst = make([]IOC_PowerOfExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PowerOfExpressionContext)
		}
	}

	return tst
}

func (s *OC_MultiplyDivideModuloExpressionContext) OC_PowerOfExpression(i int) IOC_PowerOfExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PowerOfExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PowerOfExpressionContext)
}

func (s *OC_MultiplyDivideModuloExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MultiplyDivideModuloExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MultiplyDivideModuloExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MultiplyDivideModuloExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MultiplyDivideModuloExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_MultiplyDivideModuloExpression(s)
	}
}

func (s *OC_MultiplyDivideModuloExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_MultiplyDivideModuloExpression(s)
	}
}

func (p *CypherParser) OC_MultiplyDivideModuloExpression() (localctx IOC_MultiplyDivideModuloExpressionContext) {
	localctx = NewOC_MultiplyDivideModuloExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, CypherParserRULE_oC_MultiplyDivideModuloExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(948)
		p.OC_PowerOfExpression()
	}
	p.SetState(975)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(973)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 165, p.GetParserRuleContext()) {
			case 1:
				p.SetState(950)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(949)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(952)
					p.Match(CypherParserT__4)
				}
				p.SetState(954)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(953)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(956)
					p.OC_PowerOfExpression()
				}

			case 2:
				p.SetState(958)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(957)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(960)
					p.Match(CypherParserT__14)
				}
				p.SetState(962)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(961)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(964)
					p.OC_PowerOfExpression()
				}

			case 3:
				p.SetState(966)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(965)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(968)
					p.Match(CypherParserT__15)
				}
				p.SetState(970)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(969)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(972)
					p.OC_PowerOfExpression()
				}

			}

		}
		p.SetState(977)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 166, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_PowerOfExpressionContext is an interface to support dynamic dispatch.
type IOC_PowerOfExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PowerOfExpressionContext differentiates from other interfaces.
	IsOC_PowerOfExpressionContext()
}

type OC_PowerOfExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PowerOfExpressionContext() *OC_PowerOfExpressionContext {
	var p = new(OC_PowerOfExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PowerOfExpression
	return p
}

func (*OC_PowerOfExpressionContext) IsOC_PowerOfExpressionContext() {}

func NewOC_PowerOfExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PowerOfExpressionContext {
	var p = new(OC_PowerOfExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PowerOfExpression

	return p
}

func (s *OC_PowerOfExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PowerOfExpressionContext) AllOC_UnaryAddOrSubtractExpression() []IOC_UnaryAddOrSubtractExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_UnaryAddOrSubtractExpressionContext)(nil)).Elem())
	var tst = make([]IOC_UnaryAddOrSubtractExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_UnaryAddOrSubtractExpressionContext)
		}
	}

	return tst
}

func (s *OC_PowerOfExpressionContext) OC_UnaryAddOrSubtractExpression(i int) IOC_UnaryAddOrSubtractExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_UnaryAddOrSubtractExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_UnaryAddOrSubtractExpressionContext)
}

func (s *OC_PowerOfExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PowerOfExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PowerOfExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PowerOfExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PowerOfExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PowerOfExpression(s)
	}
}

func (s *OC_PowerOfExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PowerOfExpression(s)
	}
}

func (p *CypherParser) OC_PowerOfExpression() (localctx IOC_PowerOfExpressionContext) {
	localctx = NewOC_PowerOfExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, CypherParserRULE_oC_PowerOfExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(978)
		p.OC_UnaryAddOrSubtractExpression()
	}
	p.SetState(989)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(980)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(979)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(982)
				p.Match(CypherParserT__16)
			}
			p.SetState(984)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(983)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(986)
				p.OC_UnaryAddOrSubtractExpression()
			}

		}
		p.SetState(991)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 169, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_UnaryAddOrSubtractExpressionContext is an interface to support dynamic dispatch.
type IOC_UnaryAddOrSubtractExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_UnaryAddOrSubtractExpressionContext differentiates from other interfaces.
	IsOC_UnaryAddOrSubtractExpressionContext()
}

type OC_UnaryAddOrSubtractExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_UnaryAddOrSubtractExpressionContext() *OC_UnaryAddOrSubtractExpressionContext {
	var p = new(OC_UnaryAddOrSubtractExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_UnaryAddOrSubtractExpression
	return p
}

func (*OC_UnaryAddOrSubtractExpressionContext) IsOC_UnaryAddOrSubtractExpressionContext() {}

func NewOC_UnaryAddOrSubtractExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_UnaryAddOrSubtractExpressionContext {
	var p = new(OC_UnaryAddOrSubtractExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_UnaryAddOrSubtractExpression

	return p
}

func (s *OC_UnaryAddOrSubtractExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_UnaryAddOrSubtractExpressionContext) OC_StringListNullOperatorExpression() IOC_StringListNullOperatorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_StringListNullOperatorExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_StringListNullOperatorExpressionContext)
}

func (s *OC_UnaryAddOrSubtractExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_UnaryAddOrSubtractExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_UnaryAddOrSubtractExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_UnaryAddOrSubtractExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_UnaryAddOrSubtractExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_UnaryAddOrSubtractExpression(s)
	}
}

func (s *OC_UnaryAddOrSubtractExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_UnaryAddOrSubtractExpression(s)
	}
}

func (p *CypherParser) OC_UnaryAddOrSubtractExpression() (localctx IOC_UnaryAddOrSubtractExpressionContext) {
	localctx = NewOC_UnaryAddOrSubtractExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, CypherParserRULE_oC_UnaryAddOrSubtractExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(998)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == CypherParserT__12 || _la == CypherParserT__13 {
		{
			p.SetState(992)
			_la = p.GetTokenStream().LA(1)

			if !(_la == CypherParserT__12 || _la == CypherParserT__13) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		p.SetState(994)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(993)
				p.Match(CypherParserSP)
			}

		}

		p.SetState(1000)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1001)
		p.OC_StringListNullOperatorExpression()
	}

	return localctx
}

// IOC_StringListNullOperatorExpressionContext is an interface to support dynamic dispatch.
type IOC_StringListNullOperatorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_StringListNullOperatorExpressionContext differentiates from other interfaces.
	IsOC_StringListNullOperatorExpressionContext()
}

type OC_StringListNullOperatorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_StringListNullOperatorExpressionContext() *OC_StringListNullOperatorExpressionContext {
	var p = new(OC_StringListNullOperatorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_StringListNullOperatorExpression
	return p
}

func (*OC_StringListNullOperatorExpressionContext) IsOC_StringListNullOperatorExpressionContext() {}

func NewOC_StringListNullOperatorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_StringListNullOperatorExpressionContext {
	var p = new(OC_StringListNullOperatorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_StringListNullOperatorExpression

	return p
}

func (s *OC_StringListNullOperatorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_StringListNullOperatorExpressionContext) OC_PropertyOrLabelsExpression() IOC_PropertyOrLabelsExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyOrLabelsExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyOrLabelsExpressionContext)
}

func (s *OC_StringListNullOperatorExpressionContext) AllOC_StringOperatorExpression() []IOC_StringOperatorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_StringOperatorExpressionContext)(nil)).Elem())
	var tst = make([]IOC_StringOperatorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_StringOperatorExpressionContext)
		}
	}

	return tst
}

func (s *OC_StringListNullOperatorExpressionContext) OC_StringOperatorExpression(i int) IOC_StringOperatorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_StringOperatorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_StringOperatorExpressionContext)
}

func (s *OC_StringListNullOperatorExpressionContext) AllOC_ListOperatorExpression() []IOC_ListOperatorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ListOperatorExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ListOperatorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ListOperatorExpressionContext)
		}
	}

	return tst
}

func (s *OC_StringListNullOperatorExpressionContext) OC_ListOperatorExpression(i int) IOC_ListOperatorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ListOperatorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ListOperatorExpressionContext)
}

func (s *OC_StringListNullOperatorExpressionContext) AllOC_NullOperatorExpression() []IOC_NullOperatorExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_NullOperatorExpressionContext)(nil)).Elem())
	var tst = make([]IOC_NullOperatorExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_NullOperatorExpressionContext)
		}
	}

	return tst
}

func (s *OC_StringListNullOperatorExpressionContext) OC_NullOperatorExpression(i int) IOC_NullOperatorExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NullOperatorExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_NullOperatorExpressionContext)
}

func (s *OC_StringListNullOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_StringListNullOperatorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_StringListNullOperatorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_StringListNullOperatorExpression(s)
	}
}

func (s *OC_StringListNullOperatorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_StringListNullOperatorExpression(s)
	}
}

func (p *CypherParser) OC_StringListNullOperatorExpression() (localctx IOC_StringListNullOperatorExpressionContext) {
	localctx = NewOC_StringListNullOperatorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, CypherParserRULE_oC_StringListNullOperatorExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1003)
		p.OC_PropertyOrLabelsExpression()
	}
	p.SetState(1009)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1007)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 172, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(1004)
					p.OC_StringOperatorExpression()
				}

			case 2:
				{
					p.SetState(1005)
					p.OC_ListOperatorExpression()
				}

			case 3:
				{
					p.SetState(1006)
					p.OC_NullOperatorExpression()
				}

			}

		}
		p.SetState(1011)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 173, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_ListOperatorExpressionContext is an interface to support dynamic dispatch.
type IOC_ListOperatorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ListOperatorExpressionContext differentiates from other interfaces.
	IsOC_ListOperatorExpressionContext()
}

type OC_ListOperatorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ListOperatorExpressionContext() *OC_ListOperatorExpressionContext {
	var p = new(OC_ListOperatorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ListOperatorExpression
	return p
}

func (*OC_ListOperatorExpressionContext) IsOC_ListOperatorExpressionContext() {}

func NewOC_ListOperatorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ListOperatorExpressionContext {
	var p = new(OC_ListOperatorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ListOperatorExpression

	return p
}

func (s *OC_ListOperatorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ListOperatorExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ListOperatorExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ListOperatorExpressionContext) IN() antlr.TerminalNode {
	return s.GetToken(CypherParserIN, 0)
}

func (s *OC_ListOperatorExpressionContext) OC_PropertyOrLabelsExpression() IOC_PropertyOrLabelsExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyOrLabelsExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyOrLabelsExpressionContext)
}

func (s *OC_ListOperatorExpressionContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_ListOperatorExpressionContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ListOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ListOperatorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ListOperatorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ListOperatorExpression(s)
	}
}

func (s *OC_ListOperatorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ListOperatorExpression(s)
	}
}

func (p *CypherParser) OC_ListOperatorExpression() (localctx IOC_ListOperatorExpressionContext) {
	localctx = NewOC_ListOperatorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, CypherParserRULE_oC_ListOperatorExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1037)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 179, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1012)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1013)
			p.Match(CypherParserIN)
		}
		p.SetState(1015)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1014)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1017)
			p.OC_PropertyOrLabelsExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(1019)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1018)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1021)
			p.Match(CypherParserT__7)
		}
		{
			p.SetState(1022)
			p.OC_Expression()
		}
		{
			p.SetState(1023)
			p.Match(CypherParserT__8)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(1026)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1025)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1028)
			p.Match(CypherParserT__7)
		}
		p.SetState(1030)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
			{
				p.SetState(1029)
				p.OC_Expression()
			}

		}
		{
			p.SetState(1032)
			p.Match(CypherParserT__11)
		}
		p.SetState(1034)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
			{
				p.SetState(1033)
				p.OC_Expression()
			}

		}
		{
			p.SetState(1036)
			p.Match(CypherParserT__8)
		}

	}

	return localctx
}

// IOC_StringOperatorExpressionContext is an interface to support dynamic dispatch.
type IOC_StringOperatorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_StringOperatorExpressionContext differentiates from other interfaces.
	IsOC_StringOperatorExpressionContext()
}

type OC_StringOperatorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_StringOperatorExpressionContext() *OC_StringOperatorExpressionContext {
	var p = new(OC_StringOperatorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_StringOperatorExpression
	return p
}

func (*OC_StringOperatorExpressionContext) IsOC_StringOperatorExpressionContext() {}

func NewOC_StringOperatorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_StringOperatorExpressionContext {
	var p = new(OC_StringOperatorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_StringOperatorExpression

	return p
}

func (s *OC_StringOperatorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_StringOperatorExpressionContext) OC_PropertyOrLabelsExpression() IOC_PropertyOrLabelsExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyOrLabelsExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyOrLabelsExpressionContext)
}

func (s *OC_StringOperatorExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_StringOperatorExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_StringOperatorExpressionContext) STARTS() antlr.TerminalNode {
	return s.GetToken(CypherParserSTARTS, 0)
}

func (s *OC_StringOperatorExpressionContext) WITH() antlr.TerminalNode {
	return s.GetToken(CypherParserWITH, 0)
}

func (s *OC_StringOperatorExpressionContext) ENDS() antlr.TerminalNode {
	return s.GetToken(CypherParserENDS, 0)
}

func (s *OC_StringOperatorExpressionContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(CypherParserCONTAINS, 0)
}

func (s *OC_StringOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_StringOperatorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_StringOperatorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_StringOperatorExpression(s)
	}
}

func (s *OC_StringOperatorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_StringOperatorExpression(s)
	}
}

func (p *CypherParser) OC_StringOperatorExpression() (localctx IOC_StringOperatorExpressionContext) {
	localctx = NewOC_StringOperatorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, CypherParserRULE_oC_StringOperatorExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1049)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 180, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1039)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1040)
			p.Match(CypherParserSTARTS)
		}
		{
			p.SetState(1041)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1042)
			p.Match(CypherParserWITH)
		}

	case 2:
		{
			p.SetState(1043)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1044)
			p.Match(CypherParserENDS)
		}
		{
			p.SetState(1045)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1046)
			p.Match(CypherParserWITH)
		}

	case 3:
		{
			p.SetState(1047)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1048)
			p.Match(CypherParserCONTAINS)
		}

	}
	p.SetState(1052)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1051)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1054)
		p.OC_PropertyOrLabelsExpression()
	}

	return localctx
}

// IOC_NullOperatorExpressionContext is an interface to support dynamic dispatch.
type IOC_NullOperatorExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NullOperatorExpressionContext differentiates from other interfaces.
	IsOC_NullOperatorExpressionContext()
}

type OC_NullOperatorExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NullOperatorExpressionContext() *OC_NullOperatorExpressionContext {
	var p = new(OC_NullOperatorExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NullOperatorExpression
	return p
}

func (*OC_NullOperatorExpressionContext) IsOC_NullOperatorExpressionContext() {}

func NewOC_NullOperatorExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NullOperatorExpressionContext {
	var p = new(OC_NullOperatorExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NullOperatorExpression

	return p
}

func (s *OC_NullOperatorExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NullOperatorExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_NullOperatorExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_NullOperatorExpressionContext) IS() antlr.TerminalNode {
	return s.GetToken(CypherParserIS, 0)
}

func (s *OC_NullOperatorExpressionContext) NULL() antlr.TerminalNode {
	return s.GetToken(CypherParserNULL, 0)
}

func (s *OC_NullOperatorExpressionContext) NOT() antlr.TerminalNode {
	return s.GetToken(CypherParserNOT, 0)
}

func (s *OC_NullOperatorExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NullOperatorExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NullOperatorExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NullOperatorExpression(s)
	}
}

func (s *OC_NullOperatorExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NullOperatorExpression(s)
	}
}

func (p *CypherParser) OC_NullOperatorExpression() (localctx IOC_NullOperatorExpressionContext) {
	localctx = NewOC_NullOperatorExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, CypherParserRULE_oC_NullOperatorExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1066)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 182, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1056)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1057)
			p.Match(CypherParserIS)
		}
		{
			p.SetState(1058)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1059)
			p.Match(CypherParserNULL)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1060)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1061)
			p.Match(CypherParserIS)
		}
		{
			p.SetState(1062)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1063)
			p.Match(CypherParserNOT)
		}
		{
			p.SetState(1064)
			p.Match(CypherParserSP)
		}
		{
			p.SetState(1065)
			p.Match(CypherParserNULL)
		}

	}

	return localctx
}

// IOC_PropertyOrLabelsExpressionContext is an interface to support dynamic dispatch.
type IOC_PropertyOrLabelsExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertyOrLabelsExpressionContext differentiates from other interfaces.
	IsOC_PropertyOrLabelsExpressionContext()
}

type OC_PropertyOrLabelsExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertyOrLabelsExpressionContext() *OC_PropertyOrLabelsExpressionContext {
	var p = new(OC_PropertyOrLabelsExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PropertyOrLabelsExpression
	return p
}

func (*OC_PropertyOrLabelsExpressionContext) IsOC_PropertyOrLabelsExpressionContext() {}

func NewOC_PropertyOrLabelsExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertyOrLabelsExpressionContext {
	var p = new(OC_PropertyOrLabelsExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PropertyOrLabelsExpression

	return p
}

func (s *OC_PropertyOrLabelsExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertyOrLabelsExpressionContext) OC_Atom() IOC_AtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AtomContext)
}

func (s *OC_PropertyOrLabelsExpressionContext) AllOC_PropertyLookup() []IOC_PropertyLookupContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PropertyLookupContext)(nil)).Elem())
	var tst = make([]IOC_PropertyLookupContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PropertyLookupContext)
		}
	}

	return tst
}

func (s *OC_PropertyOrLabelsExpressionContext) OC_PropertyLookup(i int) IOC_PropertyLookupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyLookupContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyLookupContext)
}

func (s *OC_PropertyOrLabelsExpressionContext) OC_NodeLabels() IOC_NodeLabelsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodeLabelsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodeLabelsContext)
}

func (s *OC_PropertyOrLabelsExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PropertyOrLabelsExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PropertyOrLabelsExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertyOrLabelsExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertyOrLabelsExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PropertyOrLabelsExpression(s)
	}
}

func (s *OC_PropertyOrLabelsExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PropertyOrLabelsExpression(s)
	}
}

func (p *CypherParser) OC_PropertyOrLabelsExpression() (localctx IOC_PropertyOrLabelsExpressionContext) {
	localctx = NewOC_PropertyOrLabelsExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, CypherParserRULE_oC_PropertyOrLabelsExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1068)
		p.OC_Atom()
	}
	p.SetState(1075)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(1070)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1069)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1072)
				p.OC_PropertyLookup()
			}

		}
		p.SetState(1077)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 184, p.GetParserRuleContext())
	}
	p.SetState(1082)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 186, p.GetParserRuleContext()) == 1 {
		p.SetState(1079)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1078)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1081)
			p.OC_NodeLabels()
		}

	}

	return localctx
}

// IOC_AtomContext is an interface to support dynamic dispatch.
type IOC_AtomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_AtomContext differentiates from other interfaces.
	IsOC_AtomContext()
}

type OC_AtomContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_AtomContext() *OC_AtomContext {
	var p = new(OC_AtomContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Atom
	return p
}

func (*OC_AtomContext) IsOC_AtomContext() {}

func NewOC_AtomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_AtomContext {
	var p = new(OC_AtomContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Atom

	return p
}

func (s *OC_AtomContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_AtomContext) OC_Literal() IOC_LiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_LiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_LiteralContext)
}

func (s *OC_AtomContext) OC_Parameter() IOC_ParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ParameterContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ParameterContext)
}

func (s *OC_AtomContext) OC_CaseExpression() IOC_CaseExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_CaseExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_CaseExpressionContext)
}

func (s *OC_AtomContext) COUNT() antlr.TerminalNode {
	return s.GetToken(CypherParserCOUNT, 0)
}

func (s *OC_AtomContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_AtomContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_AtomContext) OC_ListComprehension() IOC_ListComprehensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ListComprehensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ListComprehensionContext)
}

func (s *OC_AtomContext) OC_PatternComprehension() IOC_PatternComprehensionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternComprehensionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternComprehensionContext)
}

func (s *OC_AtomContext) ALL() antlr.TerminalNode {
	return s.GetToken(CypherParserALL, 0)
}

func (s *OC_AtomContext) OC_FilterExpression() IOC_FilterExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_FilterExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_FilterExpressionContext)
}

func (s *OC_AtomContext) ANY() antlr.TerminalNode {
	return s.GetToken(CypherParserANY, 0)
}

func (s *OC_AtomContext) NONE() antlr.TerminalNode {
	return s.GetToken(CypherParserNONE, 0)
}

func (s *OC_AtomContext) SINGLE() antlr.TerminalNode {
	return s.GetToken(CypherParserSINGLE, 0)
}

func (s *OC_AtomContext) OC_RelationshipsPattern() IOC_RelationshipsPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipsPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipsPatternContext)
}

func (s *OC_AtomContext) OC_ParenthesizedExpression() IOC_ParenthesizedExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ParenthesizedExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ParenthesizedExpressionContext)
}

func (s *OC_AtomContext) OC_FunctionInvocation() IOC_FunctionInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_FunctionInvocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_FunctionInvocationContext)
}

func (s *OC_AtomContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_AtomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_AtomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_AtomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Atom(s)
	}
}

func (s *OC_AtomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Atom(s)
	}
}

func (p *CypherParser) OC_Atom() (localctx IOC_AtomContext) {
	localctx = NewOC_AtomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, CypherParserRULE_oC_Atom)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1162)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 202, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1084)
			p.OC_Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1085)
			p.OC_Parameter()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1086)
			p.OC_CaseExpression()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1087)
			p.Match(CypherParserCOUNT)
		}
		p.SetState(1089)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1088)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1091)
			p.Match(CypherParserT__5)
		}
		p.SetState(1093)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1092)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1095)
			p.Match(CypherParserT__4)
		}
		p.SetState(1097)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1096)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1099)
			p.Match(CypherParserT__6)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1100)
			p.OC_ListComprehension()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1101)
			p.OC_PatternComprehension()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1102)
			p.Match(CypherParserALL)
		}
		p.SetState(1104)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1103)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1106)
			p.Match(CypherParserT__5)
		}
		p.SetState(1108)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1107)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1110)
			p.OC_FilterExpression()
		}
		p.SetState(1112)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1111)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1114)
			p.Match(CypherParserT__6)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1116)
			p.Match(CypherParserANY)
		}
		p.SetState(1118)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1117)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1120)
			p.Match(CypherParserT__5)
		}
		p.SetState(1122)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1121)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1124)
			p.OC_FilterExpression()
		}
		p.SetState(1126)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1125)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1128)
			p.Match(CypherParserT__6)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1130)
			p.Match(CypherParserNONE)
		}
		p.SetState(1132)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1131)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1134)
			p.Match(CypherParserT__5)
		}
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1135)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1138)
			p.OC_FilterExpression()
		}
		p.SetState(1140)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1139)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1142)
			p.Match(CypherParserT__6)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1144)
			p.Match(CypherParserSINGLE)
		}
		p.SetState(1146)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1145)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1148)
			p.Match(CypherParserT__5)
		}
		p.SetState(1150)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1149)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1152)
			p.OC_FilterExpression()
		}
		p.SetState(1154)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1153)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1156)
			p.Match(CypherParserT__6)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1158)
			p.OC_RelationshipsPattern()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1159)
			p.OC_ParenthesizedExpression()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1160)
			p.OC_FunctionInvocation()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(1161)
			p.OC_Variable()
		}

	}

	return localctx
}

// IOC_LiteralContext is an interface to support dynamic dispatch.
type IOC_LiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_LiteralContext differentiates from other interfaces.
	IsOC_LiteralContext()
}

type OC_LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_LiteralContext() *OC_LiteralContext {
	var p = new(OC_LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Literal
	return p
}

func (*OC_LiteralContext) IsOC_LiteralContext() {}

func NewOC_LiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_LiteralContext {
	var p = new(OC_LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Literal

	return p
}

func (s *OC_LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_LiteralContext) OC_NumberLiteral() IOC_NumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NumberLiteralContext)
}

func (s *OC_LiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(CypherParserStringLiteral, 0)
}

func (s *OC_LiteralContext) OC_BooleanLiteral() IOC_BooleanLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_BooleanLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_BooleanLiteralContext)
}

func (s *OC_LiteralContext) NULL() antlr.TerminalNode {
	return s.GetToken(CypherParserNULL, 0)
}

func (s *OC_LiteralContext) OC_MapLiteral() IOC_MapLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_MapLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_MapLiteralContext)
}

func (s *OC_LiteralContext) OC_ListLiteral() IOC_ListLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ListLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ListLiteralContext)
}

func (s *OC_LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Literal(s)
	}
}

func (s *OC_LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Literal(s)
	}
}

func (p *CypherParser) OC_Literal() (localctx IOC_LiteralContext) {
	localctx = NewOC_LiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, CypherParserRULE_oC_Literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1170)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserHexInteger, CypherParserDecimalInteger, CypherParserOctalInteger, CypherParserExponentDecimalReal, CypherParserRegularDecimalReal:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1164)
			p.OC_NumberLiteral()
		}

	case CypherParserStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1165)
			p.Match(CypherParserStringLiteral)
		}

	case CypherParserTRUE, CypherParserFALSE:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1166)
			p.OC_BooleanLiteral()
		}

	case CypherParserNULL:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1167)
			p.Match(CypherParserNULL)
		}

	case CypherParserT__23:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1168)
			p.OC_MapLiteral()
		}

	case CypherParserT__7:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1169)
			p.OC_ListLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_BooleanLiteralContext is an interface to support dynamic dispatch.
type IOC_BooleanLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_BooleanLiteralContext differentiates from other interfaces.
	IsOC_BooleanLiteralContext()
}

type OC_BooleanLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_BooleanLiteralContext() *OC_BooleanLiteralContext {
	var p = new(OC_BooleanLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_BooleanLiteral
	return p
}

func (*OC_BooleanLiteralContext) IsOC_BooleanLiteralContext() {}

func NewOC_BooleanLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_BooleanLiteralContext {
	var p = new(OC_BooleanLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_BooleanLiteral

	return p
}

func (s *OC_BooleanLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_BooleanLiteralContext) TRUE() antlr.TerminalNode {
	return s.GetToken(CypherParserTRUE, 0)
}

func (s *OC_BooleanLiteralContext) FALSE() antlr.TerminalNode {
	return s.GetToken(CypherParserFALSE, 0)
}

func (s *OC_BooleanLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_BooleanLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_BooleanLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_BooleanLiteral(s)
	}
}

func (s *OC_BooleanLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_BooleanLiteral(s)
	}
}

func (p *CypherParser) OC_BooleanLiteral() (localctx IOC_BooleanLiteralContext) {
	localctx = NewOC_BooleanLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, CypherParserRULE_oC_BooleanLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1172)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CypherParserTRUE || _la == CypherParserFALSE) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_ListLiteralContext is an interface to support dynamic dispatch.
type IOC_ListLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ListLiteralContext differentiates from other interfaces.
	IsOC_ListLiteralContext()
}

type OC_ListLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ListLiteralContext() *OC_ListLiteralContext {
	var p = new(OC_ListLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ListLiteral
	return p
}

func (*OC_ListLiteralContext) IsOC_ListLiteralContext() {}

func NewOC_ListLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ListLiteralContext {
	var p = new(OC_ListLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ListLiteral

	return p
}

func (s *OC_ListLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ListLiteralContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ListLiteralContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ListLiteralContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_ListLiteralContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ListLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ListLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ListLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ListLiteral(s)
	}
}

func (s *OC_ListLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ListLiteral(s)
	}
}

func (p *CypherParser) OC_ListLiteral() (localctx IOC_ListLiteralContext) {
	localctx = NewOC_ListLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, CypherParserRULE_oC_ListLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1174)
		p.Match(CypherParserT__7)
	}
	p.SetState(1176)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1175)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1195)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(1178)
			p.OC_Expression()
		}
		p.SetState(1180)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1179)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(1192)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CypherParserT__1 {
			{
				p.SetState(1182)
				p.Match(CypherParserT__1)
			}
			p.SetState(1184)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1183)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1186)
				p.OC_Expression()
			}
			p.SetState(1188)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1187)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(1194)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1197)
		p.Match(CypherParserT__8)
	}

	return localctx
}

// IOC_PartialComparisonExpressionContext is an interface to support dynamic dispatch.
type IOC_PartialComparisonExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PartialComparisonExpressionContext differentiates from other interfaces.
	IsOC_PartialComparisonExpressionContext()
}

type OC_PartialComparisonExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PartialComparisonExpressionContext() *OC_PartialComparisonExpressionContext {
	var p = new(OC_PartialComparisonExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PartialComparisonExpression
	return p
}

func (*OC_PartialComparisonExpressionContext) IsOC_PartialComparisonExpressionContext() {}

func NewOC_PartialComparisonExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PartialComparisonExpressionContext {
	var p = new(OC_PartialComparisonExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PartialComparisonExpression

	return p
}

func (s *OC_PartialComparisonExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PartialComparisonExpressionContext) OC_AddOrSubtractExpression() IOC_AddOrSubtractExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AddOrSubtractExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AddOrSubtractExpressionContext)
}

func (s *OC_PartialComparisonExpressionContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_PartialComparisonExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PartialComparisonExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PartialComparisonExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PartialComparisonExpression(s)
	}
}

func (s *OC_PartialComparisonExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PartialComparisonExpression(s)
	}
}

func (p *CypherParser) OC_PartialComparisonExpression() (localctx IOC_PartialComparisonExpressionContext) {
	localctx = NewOC_PartialComparisonExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, CypherParserRULE_oC_PartialComparisonExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1229)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserT__2:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1199)
			p.Match(CypherParserT__2)
		}
		p.SetState(1201)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1200)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1203)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__17:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1204)
			p.Match(CypherParserT__17)
		}
		p.SetState(1206)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1205)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1208)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__18:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1209)
			p.Match(CypherParserT__18)
		}
		p.SetState(1211)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1210)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1213)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__19:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1214)
			p.Match(CypherParserT__19)
		}
		p.SetState(1216)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1215)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1218)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__20:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1219)
			p.Match(CypherParserT__20)
		}
		p.SetState(1221)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1220)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1223)
			p.OC_AddOrSubtractExpression()
		}

	case CypherParserT__21:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1224)
			p.Match(CypherParserT__21)
		}
		p.SetState(1226)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1225)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1228)
			p.OC_AddOrSubtractExpression()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ParenthesizedExpressionContext is an interface to support dynamic dispatch.
type IOC_ParenthesizedExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ParenthesizedExpressionContext differentiates from other interfaces.
	IsOC_ParenthesizedExpressionContext()
}

type OC_ParenthesizedExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ParenthesizedExpressionContext() *OC_ParenthesizedExpressionContext {
	var p = new(OC_ParenthesizedExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ParenthesizedExpression
	return p
}

func (*OC_ParenthesizedExpressionContext) IsOC_ParenthesizedExpressionContext() {}

func NewOC_ParenthesizedExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ParenthesizedExpressionContext {
	var p = new(OC_ParenthesizedExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ParenthesizedExpression

	return p
}

func (s *OC_ParenthesizedExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ParenthesizedExpressionContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ParenthesizedExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ParenthesizedExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ParenthesizedExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ParenthesizedExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ParenthesizedExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ParenthesizedExpression(s)
	}
}

func (s *OC_ParenthesizedExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ParenthesizedExpression(s)
	}
}

func (p *CypherParser) OC_ParenthesizedExpression() (localctx IOC_ParenthesizedExpressionContext) {
	localctx = NewOC_ParenthesizedExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, CypherParserRULE_oC_ParenthesizedExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1231)
		p.Match(CypherParserT__5)
	}
	p.SetState(1233)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1232)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1235)
		p.OC_Expression()
	}
	p.SetState(1237)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1236)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1239)
		p.Match(CypherParserT__6)
	}

	return localctx
}

// IOC_RelationshipsPatternContext is an interface to support dynamic dispatch.
type IOC_RelationshipsPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RelationshipsPatternContext differentiates from other interfaces.
	IsOC_RelationshipsPatternContext()
}

type OC_RelationshipsPatternContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RelationshipsPatternContext() *OC_RelationshipsPatternContext {
	var p = new(OC_RelationshipsPatternContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RelationshipsPattern
	return p
}

func (*OC_RelationshipsPatternContext) IsOC_RelationshipsPatternContext() {}

func NewOC_RelationshipsPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RelationshipsPatternContext {
	var p = new(OC_RelationshipsPatternContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RelationshipsPattern

	return p
}

func (s *OC_RelationshipsPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_RelationshipsPatternContext) OC_NodePattern() IOC_NodePatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NodePatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NodePatternContext)
}

func (s *OC_RelationshipsPatternContext) AllOC_PatternElementChain() []IOC_PatternElementChainContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PatternElementChainContext)(nil)).Elem())
	var tst = make([]IOC_PatternElementChainContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PatternElementChainContext)
		}
	}

	return tst
}

func (s *OC_RelationshipsPatternContext) OC_PatternElementChain(i int) IOC_PatternElementChainContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PatternElementChainContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PatternElementChainContext)
}

func (s *OC_RelationshipsPatternContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_RelationshipsPatternContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_RelationshipsPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RelationshipsPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RelationshipsPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RelationshipsPattern(s)
	}
}

func (s *OC_RelationshipsPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RelationshipsPattern(s)
	}
}

func (p *CypherParser) OC_RelationshipsPattern() (localctx IOC_RelationshipsPatternContext) {
	localctx = NewOC_RelationshipsPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, CypherParserRULE_oC_RelationshipsPattern)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1241)
		p.OC_NodePattern()
	}
	p.SetState(1246)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(1243)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1242)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1245)
				p.OC_PatternElementChain()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1248)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 220, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_FilterExpressionContext is an interface to support dynamic dispatch.
type IOC_FilterExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_FilterExpressionContext differentiates from other interfaces.
	IsOC_FilterExpressionContext()
}

type OC_FilterExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_FilterExpressionContext() *OC_FilterExpressionContext {
	var p = new(OC_FilterExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_FilterExpression
	return p
}

func (*OC_FilterExpressionContext) IsOC_FilterExpressionContext() {}

func NewOC_FilterExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_FilterExpressionContext {
	var p = new(OC_FilterExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_FilterExpression

	return p
}

func (s *OC_FilterExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_FilterExpressionContext) OC_IdInColl() IOC_IdInCollContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_IdInCollContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_IdInCollContext)
}

func (s *OC_FilterExpressionContext) OC_Where() IOC_WhereContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_WhereContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_WhereContext)
}

func (s *OC_FilterExpressionContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_FilterExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_FilterExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_FilterExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_FilterExpression(s)
	}
}

func (s *OC_FilterExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_FilterExpression(s)
	}
}

func (p *CypherParser) OC_FilterExpression() (localctx IOC_FilterExpressionContext) {
	localctx = NewOC_FilterExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, CypherParserRULE_oC_FilterExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1250)
		p.OC_IdInColl()
	}
	p.SetState(1255)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 222, p.GetParserRuleContext()) == 1 {
		p.SetState(1252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1251)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1254)
			p.OC_Where()
		}

	}

	return localctx
}

// IOC_IdInCollContext is an interface to support dynamic dispatch.
type IOC_IdInCollContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_IdInCollContext differentiates from other interfaces.
	IsOC_IdInCollContext()
}

type OC_IdInCollContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_IdInCollContext() *OC_IdInCollContext {
	var p = new(OC_IdInCollContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_IdInColl
	return p
}

func (*OC_IdInCollContext) IsOC_IdInCollContext() {}

func NewOC_IdInCollContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_IdInCollContext {
	var p = new(OC_IdInCollContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_IdInColl

	return p
}

func (s *OC_IdInCollContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_IdInCollContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_IdInCollContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_IdInCollContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_IdInCollContext) IN() antlr.TerminalNode {
	return s.GetToken(CypherParserIN, 0)
}

func (s *OC_IdInCollContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_IdInCollContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_IdInCollContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_IdInCollContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_IdInColl(s)
	}
}

func (s *OC_IdInCollContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_IdInColl(s)
	}
}

func (p *CypherParser) OC_IdInColl() (localctx IOC_IdInCollContext) {
	localctx = NewOC_IdInCollContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, CypherParserRULE_oC_IdInColl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1257)
		p.OC_Variable()
	}
	{
		p.SetState(1258)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(1259)
		p.Match(CypherParserIN)
	}
	{
		p.SetState(1260)
		p.Match(CypherParserSP)
	}
	{
		p.SetState(1261)
		p.OC_Expression()
	}

	return localctx
}

// IOC_FunctionInvocationContext is an interface to support dynamic dispatch.
type IOC_FunctionInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_FunctionInvocationContext differentiates from other interfaces.
	IsOC_FunctionInvocationContext()
}

type OC_FunctionInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_FunctionInvocationContext() *OC_FunctionInvocationContext {
	var p = new(OC_FunctionInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_FunctionInvocation
	return p
}

func (*OC_FunctionInvocationContext) IsOC_FunctionInvocationContext() {}

func NewOC_FunctionInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_FunctionInvocationContext {
	var p = new(OC_FunctionInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_FunctionInvocation

	return p
}

func (s *OC_FunctionInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_FunctionInvocationContext) OC_FunctionName() IOC_FunctionNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_FunctionNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_FunctionNameContext)
}

func (s *OC_FunctionInvocationContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_FunctionInvocationContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_FunctionInvocationContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(CypherParserDISTINCT, 0)
}

func (s *OC_FunctionInvocationContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_FunctionInvocationContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_FunctionInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_FunctionInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_FunctionInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_FunctionInvocation(s)
	}
}

func (s *OC_FunctionInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_FunctionInvocation(s)
	}
}

func (p *CypherParser) OC_FunctionInvocation() (localctx IOC_FunctionInvocationContext) {
	localctx = NewOC_FunctionInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, CypherParserRULE_oC_FunctionInvocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1263)
		p.OC_FunctionName()
	}
	p.SetState(1265)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1264)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1267)
		p.Match(CypherParserT__5)
	}
	p.SetState(1269)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1268)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1275)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserDISTINCT {
		{
			p.SetState(1271)
			p.Match(CypherParserDISTINCT)
		}
		p.SetState(1273)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1272)
				p.Match(CypherParserSP)
			}

		}

	}
	p.SetState(1294)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(1277)
			p.OC_Expression()
		}
		p.SetState(1279)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1278)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(1291)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CypherParserT__1 {
			{
				p.SetState(1281)
				p.Match(CypherParserT__1)
			}
			p.SetState(1283)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1282)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1285)
				p.OC_Expression()
			}
			p.SetState(1287)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1286)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(1293)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1296)
		p.Match(CypherParserT__6)
	}

	return localctx
}

// IOC_FunctionNameContext is an interface to support dynamic dispatch.
type IOC_FunctionNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_FunctionNameContext differentiates from other interfaces.
	IsOC_FunctionNameContext()
}

type OC_FunctionNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_FunctionNameContext() *OC_FunctionNameContext {
	var p = new(OC_FunctionNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_FunctionName
	return p
}

func (*OC_FunctionNameContext) IsOC_FunctionNameContext() {}

func NewOC_FunctionNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_FunctionNameContext {
	var p = new(OC_FunctionNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_FunctionName

	return p
}

func (s *OC_FunctionNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_FunctionNameContext) OC_Namespace() IOC_NamespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NamespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NamespaceContext)
}

func (s *OC_FunctionNameContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_FunctionNameContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(CypherParserEXISTS, 0)
}

func (s *OC_FunctionNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_FunctionNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_FunctionNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_FunctionName(s)
	}
}

func (s *OC_FunctionNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_FunctionName(s)
	}
}

func (p *CypherParser) OC_FunctionName() (localctx IOC_FunctionNameContext) {
	localctx = NewOC_FunctionNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, CypherParserRULE_oC_FunctionName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1302)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1298)
			p.OC_Namespace()
		}
		{
			p.SetState(1299)
			p.OC_SymbolicName()
		}

	case CypherParserEXISTS:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1301)
			p.Match(CypherParserEXISTS)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ExplicitProcedureInvocationContext is an interface to support dynamic dispatch.
type IOC_ExplicitProcedureInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ExplicitProcedureInvocationContext differentiates from other interfaces.
	IsOC_ExplicitProcedureInvocationContext()
}

type OC_ExplicitProcedureInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ExplicitProcedureInvocationContext() *OC_ExplicitProcedureInvocationContext {
	var p = new(OC_ExplicitProcedureInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ExplicitProcedureInvocation
	return p
}

func (*OC_ExplicitProcedureInvocationContext) IsOC_ExplicitProcedureInvocationContext() {}

func NewOC_ExplicitProcedureInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ExplicitProcedureInvocationContext {
	var p = new(OC_ExplicitProcedureInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ExplicitProcedureInvocation

	return p
}

func (s *OC_ExplicitProcedureInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ExplicitProcedureInvocationContext) OC_ProcedureName() IOC_ProcedureNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProcedureNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProcedureNameContext)
}

func (s *OC_ExplicitProcedureInvocationContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ExplicitProcedureInvocationContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ExplicitProcedureInvocationContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_ExplicitProcedureInvocationContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ExplicitProcedureInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ExplicitProcedureInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ExplicitProcedureInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ExplicitProcedureInvocation(s)
	}
}

func (s *OC_ExplicitProcedureInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ExplicitProcedureInvocation(s)
	}
}

func (p *CypherParser) OC_ExplicitProcedureInvocation() (localctx IOC_ExplicitProcedureInvocationContext) {
	localctx = NewOC_ExplicitProcedureInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, CypherParserRULE_oC_ExplicitProcedureInvocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1304)
		p.OC_ProcedureName()
	}
	p.SetState(1306)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1305)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1308)
		p.Match(CypherParserT__5)
	}
	p.SetState(1310)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1309)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1329)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__5)|(1<<CypherParserT__7)|(1<<CypherParserT__12)|(1<<CypherParserT__13)|(1<<CypherParserT__23)|(1<<CypherParserT__25))) != 0) || _la == CypherParserALL || _la == CypherParserNOT || (((_la-82)&-(0x1f+1)) == 0 && ((1<<uint((_la-82)))&((1<<(CypherParserNULL-82))|(1<<(CypherParserCOUNT-82))|(1<<(CypherParserANY-82))|(1<<(CypherParserNONE-82))|(1<<(CypherParserSINGLE-82))|(1<<(CypherParserTRUE-82))|(1<<(CypherParserFALSE-82))|(1<<(CypherParserEXISTS-82))|(1<<(CypherParserCASE-82))|(1<<(CypherParserStringLiteral-82))|(1<<(CypherParserHexInteger-82))|(1<<(CypherParserDecimalInteger-82))|(1<<(CypherParserOctalInteger-82))|(1<<(CypherParserHexLetter-82))|(1<<(CypherParserExponentDecimalReal-82))|(1<<(CypherParserRegularDecimalReal-82)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(1312)
			p.OC_Expression()
		}
		p.SetState(1314)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1313)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(1326)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CypherParserT__1 {
			{
				p.SetState(1316)
				p.Match(CypherParserT__1)
			}
			p.SetState(1318)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1317)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1320)
				p.OC_Expression()
			}
			p.SetState(1322)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1321)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(1328)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1331)
		p.Match(CypherParserT__6)
	}

	return localctx
}

// IOC_ImplicitProcedureInvocationContext is an interface to support dynamic dispatch.
type IOC_ImplicitProcedureInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ImplicitProcedureInvocationContext differentiates from other interfaces.
	IsOC_ImplicitProcedureInvocationContext()
}

type OC_ImplicitProcedureInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ImplicitProcedureInvocationContext() *OC_ImplicitProcedureInvocationContext {
	var p = new(OC_ImplicitProcedureInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ImplicitProcedureInvocation
	return p
}

func (*OC_ImplicitProcedureInvocationContext) IsOC_ImplicitProcedureInvocationContext() {}

func NewOC_ImplicitProcedureInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ImplicitProcedureInvocationContext {
	var p = new(OC_ImplicitProcedureInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ImplicitProcedureInvocation

	return p
}

func (s *OC_ImplicitProcedureInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ImplicitProcedureInvocationContext) OC_ProcedureName() IOC_ProcedureNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ProcedureNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ProcedureNameContext)
}

func (s *OC_ImplicitProcedureInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ImplicitProcedureInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ImplicitProcedureInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ImplicitProcedureInvocation(s)
	}
}

func (s *OC_ImplicitProcedureInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ImplicitProcedureInvocation(s)
	}
}

func (p *CypherParser) OC_ImplicitProcedureInvocation() (localctx IOC_ImplicitProcedureInvocationContext) {
	localctx = NewOC_ImplicitProcedureInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, CypherParserRULE_oC_ImplicitProcedureInvocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1333)
		p.OC_ProcedureName()
	}

	return localctx
}

// IOC_ProcedureResultFieldContext is an interface to support dynamic dispatch.
type IOC_ProcedureResultFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ProcedureResultFieldContext differentiates from other interfaces.
	IsOC_ProcedureResultFieldContext()
}

type OC_ProcedureResultFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ProcedureResultFieldContext() *OC_ProcedureResultFieldContext {
	var p = new(OC_ProcedureResultFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ProcedureResultField
	return p
}

func (*OC_ProcedureResultFieldContext) IsOC_ProcedureResultFieldContext() {}

func NewOC_ProcedureResultFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ProcedureResultFieldContext {
	var p = new(OC_ProcedureResultFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ProcedureResultField

	return p
}

func (s *OC_ProcedureResultFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ProcedureResultFieldContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_ProcedureResultFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ProcedureResultFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ProcedureResultFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ProcedureResultField(s)
	}
}

func (s *OC_ProcedureResultFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ProcedureResultField(s)
	}
}

func (p *CypherParser) OC_ProcedureResultField() (localctx IOC_ProcedureResultFieldContext) {
	localctx = NewOC_ProcedureResultFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, CypherParserRULE_oC_ProcedureResultField)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1335)
		p.OC_SymbolicName()
	}

	return localctx
}

// IOC_ProcedureNameContext is an interface to support dynamic dispatch.
type IOC_ProcedureNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ProcedureNameContext differentiates from other interfaces.
	IsOC_ProcedureNameContext()
}

type OC_ProcedureNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ProcedureNameContext() *OC_ProcedureNameContext {
	var p = new(OC_ProcedureNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ProcedureName
	return p
}

func (*OC_ProcedureNameContext) IsOC_ProcedureNameContext() {}

func NewOC_ProcedureNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ProcedureNameContext {
	var p = new(OC_ProcedureNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ProcedureName

	return p
}

func (s *OC_ProcedureNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ProcedureNameContext) OC_Namespace() IOC_NamespaceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_NamespaceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_NamespaceContext)
}

func (s *OC_ProcedureNameContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_ProcedureNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ProcedureNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ProcedureNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ProcedureName(s)
	}
}

func (s *OC_ProcedureNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ProcedureName(s)
	}
}

func (p *CypherParser) OC_ProcedureName() (localctx IOC_ProcedureNameContext) {
	localctx = NewOC_ProcedureNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, CypherParserRULE_oC_ProcedureName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1337)
		p.OC_Namespace()
	}
	{
		p.SetState(1338)
		p.OC_SymbolicName()
	}

	return localctx
}

// IOC_NamespaceContext is an interface to support dynamic dispatch.
type IOC_NamespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NamespaceContext differentiates from other interfaces.
	IsOC_NamespaceContext()
}

type OC_NamespaceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NamespaceContext() *OC_NamespaceContext {
	var p = new(OC_NamespaceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Namespace
	return p
}

func (*OC_NamespaceContext) IsOC_NamespaceContext() {}

func NewOC_NamespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NamespaceContext {
	var p = new(OC_NamespaceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Namespace

	return p
}

func (s *OC_NamespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NamespaceContext) AllOC_SymbolicName() []IOC_SymbolicNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem())
	var tst = make([]IOC_SymbolicNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_SymbolicNameContext)
		}
	}

	return tst
}

func (s *OC_NamespaceContext) OC_SymbolicName(i int) IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_NamespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NamespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NamespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Namespace(s)
	}
}

func (s *OC_NamespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Namespace(s)
	}
}

func (p *CypherParser) OC_Namespace() (localctx IOC_NamespaceContext) {
	localctx = NewOC_NamespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, CypherParserRULE_oC_Namespace)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1345)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1340)
				p.OC_SymbolicName()
			}
			{
				p.SetState(1341)
				p.Match(CypherParserT__22)
			}

		}
		p.SetState(1347)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 240, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_ListComprehensionContext is an interface to support dynamic dispatch.
type IOC_ListComprehensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ListComprehensionContext differentiates from other interfaces.
	IsOC_ListComprehensionContext()
}

type OC_ListComprehensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ListComprehensionContext() *OC_ListComprehensionContext {
	var p = new(OC_ListComprehensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ListComprehension
	return p
}

func (*OC_ListComprehensionContext) IsOC_ListComprehensionContext() {}

func NewOC_ListComprehensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ListComprehensionContext {
	var p = new(OC_ListComprehensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ListComprehension

	return p
}

func (s *OC_ListComprehensionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ListComprehensionContext) OC_FilterExpression() IOC_FilterExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_FilterExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_FilterExpressionContext)
}

func (s *OC_ListComprehensionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_ListComprehensionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_ListComprehensionContext) OC_Expression() IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_ListComprehensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ListComprehensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ListComprehensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ListComprehension(s)
	}
}

func (s *OC_ListComprehensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ListComprehension(s)
	}
}

func (p *CypherParser) OC_ListComprehension() (localctx IOC_ListComprehensionContext) {
	localctx = NewOC_ListComprehensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, CypherParserRULE_oC_ListComprehension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1348)
		p.Match(CypherParserT__7)
	}
	p.SetState(1350)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1349)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1352)
		p.OC_FilterExpression()
	}
	p.SetState(1361)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 244, p.GetParserRuleContext()) == 1 {
		p.SetState(1354)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1353)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1356)
			p.Match(CypherParserT__10)
		}
		p.SetState(1358)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1357)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1360)
			p.OC_Expression()
		}

	}
	p.SetState(1364)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1363)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1366)
		p.Match(CypherParserT__8)
	}

	return localctx
}

// IOC_PatternComprehensionContext is an interface to support dynamic dispatch.
type IOC_PatternComprehensionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PatternComprehensionContext differentiates from other interfaces.
	IsOC_PatternComprehensionContext()
}

type OC_PatternComprehensionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PatternComprehensionContext() *OC_PatternComprehensionContext {
	var p = new(OC_PatternComprehensionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PatternComprehension
	return p
}

func (*OC_PatternComprehensionContext) IsOC_PatternComprehensionContext() {}

func NewOC_PatternComprehensionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PatternComprehensionContext {
	var p = new(OC_PatternComprehensionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PatternComprehension

	return p
}

func (s *OC_PatternComprehensionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PatternComprehensionContext) OC_RelationshipsPattern() IOC_RelationshipsPatternContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_RelationshipsPatternContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_RelationshipsPatternContext)
}

func (s *OC_PatternComprehensionContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_PatternComprehensionContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_PatternComprehensionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PatternComprehensionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PatternComprehensionContext) OC_Variable() IOC_VariableContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_VariableContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_VariableContext)
}

func (s *OC_PatternComprehensionContext) WHERE() antlr.TerminalNode {
	return s.GetToken(CypherParserWHERE, 0)
}

func (s *OC_PatternComprehensionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PatternComprehensionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PatternComprehensionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PatternComprehension(s)
	}
}

func (s *OC_PatternComprehensionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PatternComprehension(s)
	}
}

func (p *CypherParser) OC_PatternComprehension() (localctx IOC_PatternComprehensionContext) {
	localctx = NewOC_PatternComprehensionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, CypherParserRULE_oC_PatternComprehension)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1368)
		p.Match(CypherParserT__7)
	}
	p.SetState(1370)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1369)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1380)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(CypherParserCOUNT-83))|(1<<(CypherParserANY-83))|(1<<(CypherParserNONE-83))|(1<<(CypherParserSINGLE-83))|(1<<(CypherParserHexLetter-83)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0) {
		{
			p.SetState(1372)
			p.OC_Variable()
		}
		p.SetState(1374)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1373)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1376)
			p.Match(CypherParserT__2)
		}
		p.SetState(1378)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1377)
				p.Match(CypherParserSP)
			}

		}

	}
	{
		p.SetState(1382)
		p.OC_RelationshipsPattern()
	}
	p.SetState(1384)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1383)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1394)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserWHERE {
		{
			p.SetState(1386)
			p.Match(CypherParserWHERE)
		}
		p.SetState(1388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1387)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1390)
			p.OC_Expression()
		}
		p.SetState(1392)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1391)
				p.Match(CypherParserSP)
			}

		}

	}
	{
		p.SetState(1396)
		p.Match(CypherParserT__10)
	}
	p.SetState(1398)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1397)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1400)
		p.OC_Expression()
	}
	p.SetState(1402)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1401)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1404)
		p.Match(CypherParserT__8)
	}

	return localctx
}

// IOC_PropertyLookupContext is an interface to support dynamic dispatch.
type IOC_PropertyLookupContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertyLookupContext differentiates from other interfaces.
	IsOC_PropertyLookupContext()
}

type OC_PropertyLookupContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertyLookupContext() *OC_PropertyLookupContext {
	var p = new(OC_PropertyLookupContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PropertyLookup
	return p
}

func (*OC_PropertyLookupContext) IsOC_PropertyLookupContext() {}

func NewOC_PropertyLookupContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertyLookupContext {
	var p = new(OC_PropertyLookupContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PropertyLookup

	return p
}

func (s *OC_PropertyLookupContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertyLookupContext) OC_PropertyKeyName() IOC_PropertyKeyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyKeyNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyKeyNameContext)
}

func (s *OC_PropertyLookupContext) SP() antlr.TerminalNode {
	return s.GetToken(CypherParserSP, 0)
}

func (s *OC_PropertyLookupContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertyLookupContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertyLookupContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PropertyLookup(s)
	}
}

func (s *OC_PropertyLookupContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PropertyLookup(s)
	}
}

func (p *CypherParser) OC_PropertyLookup() (localctx IOC_PropertyLookupContext) {
	localctx = NewOC_PropertyLookupContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, CypherParserRULE_oC_PropertyLookup)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1406)
		p.Match(CypherParserT__22)
	}
	p.SetState(1408)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1407)
			p.Match(CypherParserSP)
		}

	}

	{
		p.SetState(1410)
		p.OC_PropertyKeyName()
	}

	return localctx
}

// IOC_CaseExpressionContext is an interface to support dynamic dispatch.
type IOC_CaseExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_CaseExpressionContext differentiates from other interfaces.
	IsOC_CaseExpressionContext()
}

type OC_CaseExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_CaseExpressionContext() *OC_CaseExpressionContext {
	var p = new(OC_CaseExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_CaseExpression
	return p
}

func (*OC_CaseExpressionContext) IsOC_CaseExpressionContext() {}

func NewOC_CaseExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_CaseExpressionContext {
	var p = new(OC_CaseExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_CaseExpression

	return p
}

func (s *OC_CaseExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_CaseExpressionContext) END() antlr.TerminalNode {
	return s.GetToken(CypherParserEND, 0)
}

func (s *OC_CaseExpressionContext) ELSE() antlr.TerminalNode {
	return s.GetToken(CypherParserELSE, 0)
}

func (s *OC_CaseExpressionContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_CaseExpressionContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_CaseExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_CaseExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_CaseExpressionContext) CASE() antlr.TerminalNode {
	return s.GetToken(CypherParserCASE, 0)
}

func (s *OC_CaseExpressionContext) AllOC_CaseAlternatives() []IOC_CaseAlternativesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_CaseAlternativesContext)(nil)).Elem())
	var tst = make([]IOC_CaseAlternativesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_CaseAlternativesContext)
		}
	}

	return tst
}

func (s *OC_CaseExpressionContext) OC_CaseAlternatives(i int) IOC_CaseAlternativesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_CaseAlternativesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_CaseAlternativesContext)
}

func (s *OC_CaseExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_CaseExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_CaseExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_CaseExpression(s)
	}
}

func (s *OC_CaseExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_CaseExpression(s)
	}
}

func (p *CypherParser) OC_CaseExpression() (localctx IOC_CaseExpressionContext) {
	localctx = NewOC_CaseExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, CypherParserRULE_oC_CaseExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1434)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 262, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1412)
			p.Match(CypherParserCASE)
		}
		p.SetState(1417)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(1414)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(1413)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(1416)
					p.OC_CaseAlternatives()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1419)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 258, p.GetParserRuleContext())
		}

	case 2:
		{
			p.SetState(1421)
			p.Match(CypherParserCASE)
		}
		p.SetState(1423)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1422)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1425)
			p.OC_Expression()
		}
		p.SetState(1430)
		p.GetErrorHandler().Sync(p)
		_alt = 1
		for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			switch _alt {
			case 1:
				p.SetState(1427)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if _la == CypherParserSP {
					{
						p.SetState(1426)
						p.Match(CypherParserSP)
					}

				}
				{
					p.SetState(1429)
					p.OC_CaseAlternatives()
				}

			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

			p.SetState(1432)
			p.GetErrorHandler().Sync(p)
			_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 261, p.GetParserRuleContext())
		}

	}
	p.SetState(1444)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 265, p.GetParserRuleContext()) == 1 {
		p.SetState(1437)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1436)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1439)
			p.Match(CypherParserELSE)
		}
		p.SetState(1441)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1440)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1443)
			p.OC_Expression()
		}

	}
	p.SetState(1447)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1446)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1449)
		p.Match(CypherParserEND)
	}

	return localctx
}

// IOC_CaseAlternativesContext is an interface to support dynamic dispatch.
type IOC_CaseAlternativesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_CaseAlternativesContext differentiates from other interfaces.
	IsOC_CaseAlternativesContext()
}

type OC_CaseAlternativesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_CaseAlternativesContext() *OC_CaseAlternativesContext {
	var p = new(OC_CaseAlternativesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_CaseAlternatives
	return p
}

func (*OC_CaseAlternativesContext) IsOC_CaseAlternativesContext() {}

func NewOC_CaseAlternativesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_CaseAlternativesContext {
	var p = new(OC_CaseAlternativesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_CaseAlternatives

	return p
}

func (s *OC_CaseAlternativesContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_CaseAlternativesContext) WHEN() antlr.TerminalNode {
	return s.GetToken(CypherParserWHEN, 0)
}

func (s *OC_CaseAlternativesContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_CaseAlternativesContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_CaseAlternativesContext) THEN() antlr.TerminalNode {
	return s.GetToken(CypherParserTHEN, 0)
}

func (s *OC_CaseAlternativesContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_CaseAlternativesContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_CaseAlternativesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_CaseAlternativesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_CaseAlternativesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_CaseAlternatives(s)
	}
}

func (s *OC_CaseAlternativesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_CaseAlternatives(s)
	}
}

func (p *CypherParser) OC_CaseAlternatives() (localctx IOC_CaseAlternativesContext) {
	localctx = NewOC_CaseAlternativesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, CypherParserRULE_oC_CaseAlternatives)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1451)
		p.Match(CypherParserWHEN)
	}
	p.SetState(1453)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1452)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1455)
		p.OC_Expression()
	}
	p.SetState(1457)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1456)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1459)
		p.Match(CypherParserTHEN)
	}
	p.SetState(1461)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1460)
			p.Match(CypherParserSP)
		}

	}
	{
		p.SetState(1463)
		p.OC_Expression()
	}

	return localctx
}

// IOC_VariableContext is an interface to support dynamic dispatch.
type IOC_VariableContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_VariableContext differentiates from other interfaces.
	IsOC_VariableContext()
}

type OC_VariableContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_VariableContext() *OC_VariableContext {
	var p = new(OC_VariableContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Variable
	return p
}

func (*OC_VariableContext) IsOC_VariableContext() {}

func NewOC_VariableContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_VariableContext {
	var p = new(OC_VariableContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Variable

	return p
}

func (s *OC_VariableContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_VariableContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_VariableContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_VariableContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_VariableContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Variable(s)
	}
}

func (s *OC_VariableContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Variable(s)
	}
}

func (p *CypherParser) OC_Variable() (localctx IOC_VariableContext) {
	localctx = NewOC_VariableContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, CypherParserRULE_oC_Variable)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1465)
		p.OC_SymbolicName()
	}

	return localctx
}

// IOC_NumberLiteralContext is an interface to support dynamic dispatch.
type IOC_NumberLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_NumberLiteralContext differentiates from other interfaces.
	IsOC_NumberLiteralContext()
}

type OC_NumberLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_NumberLiteralContext() *OC_NumberLiteralContext {
	var p = new(OC_NumberLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_NumberLiteral
	return p
}

func (*OC_NumberLiteralContext) IsOC_NumberLiteralContext() {}

func NewOC_NumberLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_NumberLiteralContext {
	var p = new(OC_NumberLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_NumberLiteral

	return p
}

func (s *OC_NumberLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_NumberLiteralContext) OC_DoubleLiteral() IOC_DoubleLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_DoubleLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_DoubleLiteralContext)
}

func (s *OC_NumberLiteralContext) OC_IntegerLiteral() IOC_IntegerLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_IntegerLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_IntegerLiteralContext)
}

func (s *OC_NumberLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_NumberLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_NumberLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_NumberLiteral(s)
	}
}

func (s *OC_NumberLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_NumberLiteral(s)
	}
}

func (p *CypherParser) OC_NumberLiteral() (localctx IOC_NumberLiteralContext) {
	localctx = NewOC_NumberLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, CypherParserRULE_oC_NumberLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1469)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserExponentDecimalReal, CypherParserRegularDecimalReal:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1467)
			p.OC_DoubleLiteral()
		}

	case CypherParserHexInteger, CypherParserDecimalInteger, CypherParserOctalInteger:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1468)
			p.OC_IntegerLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_MapLiteralContext is an interface to support dynamic dispatch.
type IOC_MapLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_MapLiteralContext differentiates from other interfaces.
	IsOC_MapLiteralContext()
}

type OC_MapLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_MapLiteralContext() *OC_MapLiteralContext {
	var p = new(OC_MapLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_MapLiteral
	return p
}

func (*OC_MapLiteralContext) IsOC_MapLiteralContext() {}

func NewOC_MapLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_MapLiteralContext {
	var p = new(OC_MapLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_MapLiteral

	return p
}

func (s *OC_MapLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_MapLiteralContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_MapLiteralContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_MapLiteralContext) AllOC_PropertyKeyName() []IOC_PropertyKeyNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PropertyKeyNameContext)(nil)).Elem())
	var tst = make([]IOC_PropertyKeyNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PropertyKeyNameContext)
		}
	}

	return tst
}

func (s *OC_MapLiteralContext) OC_PropertyKeyName(i int) IOC_PropertyKeyNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyKeyNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyKeyNameContext)
}

func (s *OC_MapLiteralContext) AllOC_Expression() []IOC_ExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem())
	var tst = make([]IOC_ExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_ExpressionContext)
		}
	}

	return tst
}

func (s *OC_MapLiteralContext) OC_Expression(i int) IOC_ExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_ExpressionContext)
}

func (s *OC_MapLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_MapLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_MapLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_MapLiteral(s)
	}
}

func (s *OC_MapLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_MapLiteral(s)
	}
}

func (p *CypherParser) OC_MapLiteral() (localctx IOC_MapLiteralContext) {
	localctx = NewOC_MapLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, CypherParserRULE_oC_MapLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1471)
		p.Match(CypherParserT__23)
	}
	p.SetState(1473)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == CypherParserSP {
		{
			p.SetState(1472)
			p.Match(CypherParserSP)
		}

	}
	p.SetState(1508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(CypherParserUNION-46))|(1<<(CypherParserALL-46))|(1<<(CypherParserOPTIONAL-46))|(1<<(CypherParserMATCH-46))|(1<<(CypherParserUNWIND-46))|(1<<(CypherParserAS-46))|(1<<(CypherParserMERGE-46))|(1<<(CypherParserON-46))|(1<<(CypherParserCREATE-46))|(1<<(CypherParserSET-46))|(1<<(CypherParserDETACH-46))|(1<<(CypherParserDELETE-46))|(1<<(CypherParserREMOVE-46))|(1<<(CypherParserWITH-46))|(1<<(CypherParserRETURN-46))|(1<<(CypherParserDISTINCT-46))|(1<<(CypherParserORDER-46))|(1<<(CypherParserBY-46))|(1<<(CypherParserL_SKIP-46))|(1<<(CypherParserLIMIT-46))|(1<<(CypherParserASCENDING-46))|(1<<(CypherParserASC-46))|(1<<(CypherParserDESCENDING-46))|(1<<(CypherParserDESC-46))|(1<<(CypherParserWHERE-46))|(1<<(CypherParserOR-46))|(1<<(CypherParserXOR-46))|(1<<(CypherParserAND-46))|(1<<(CypherParserNOT-46))|(1<<(CypherParserIN-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(CypherParserSTARTS-78))|(1<<(CypherParserENDS-78))|(1<<(CypherParserCONTAINS-78))|(1<<(CypherParserIS-78))|(1<<(CypherParserNULL-78))|(1<<(CypherParserCOUNT-78))|(1<<(CypherParserANY-78))|(1<<(CypherParserNONE-78))|(1<<(CypherParserSINGLE-78))|(1<<(CypherParserTRUE-78))|(1<<(CypherParserFALSE-78))|(1<<(CypherParserEXISTS-78))|(1<<(CypherParserCASE-78))|(1<<(CypherParserELSE-78))|(1<<(CypherParserEND-78))|(1<<(CypherParserWHEN-78))|(1<<(CypherParserTHEN-78))|(1<<(CypherParserHexLetter-78))|(1<<(CypherParserCONSTRAINT-78)))) != 0) || (((_la-110)&-(0x1f+1)) == 0 && ((1<<uint((_la-110)))&((1<<(CypherParserDO-110))|(1<<(CypherParserFOR-110))|(1<<(CypherParserREQUIRE-110))|(1<<(CypherParserUNIQUE-110))|(1<<(CypherParserMANDATORY-110))|(1<<(CypherParserSCALAR-110))|(1<<(CypherParserOF-110))|(1<<(CypherParserADD-110))|(1<<(CypherParserDROP-110))|(1<<(CypherParserFILTER-110))|(1<<(CypherParserEXTRACT-110))|(1<<(CypherParserUnescapedSymbolicName-110))|(1<<(CypherParserEscapedSymbolicName-110)))) != 0) {
		{
			p.SetState(1475)
			p.OC_PropertyKeyName()
		}
		p.SetState(1477)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1476)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1479)
			p.Match(CypherParserT__9)
		}
		p.SetState(1481)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1480)
				p.Match(CypherParserSP)
			}

		}
		{
			p.SetState(1483)
			p.OC_Expression()
		}
		p.SetState(1485)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == CypherParserSP {
			{
				p.SetState(1484)
				p.Match(CypherParserSP)
			}

		}
		p.SetState(1505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == CypherParserT__1 {
			{
				p.SetState(1487)
				p.Match(CypherParserT__1)
			}
			p.SetState(1489)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1488)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1491)
				p.OC_PropertyKeyName()
			}
			p.SetState(1493)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1492)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1495)
				p.Match(CypherParserT__9)
			}
			p.SetState(1497)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1496)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1499)
				p.OC_Expression()
			}
			p.SetState(1501)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1500)
					p.Match(CypherParserSP)
				}

			}

			p.SetState(1507)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1510)
		p.Match(CypherParserT__24)
	}

	return localctx
}

// IOC_ParameterContext is an interface to support dynamic dispatch.
type IOC_ParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ParameterContext differentiates from other interfaces.
	IsOC_ParameterContext()
}

type OC_ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ParameterContext() *OC_ParameterContext {
	var p = new(OC_ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Parameter
	return p
}

func (*OC_ParameterContext) IsOC_ParameterContext() {}

func NewOC_ParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ParameterContext {
	var p = new(OC_ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Parameter

	return p
}

func (s *OC_ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ParameterContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_ParameterContext) DecimalInteger() antlr.TerminalNode {
	return s.GetToken(CypherParserDecimalInteger, 0)
}

func (s *OC_ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Parameter(s)
	}
}

func (s *OC_ParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Parameter(s)
	}
}

func (p *CypherParser) OC_Parameter() (localctx IOC_ParameterContext) {
	localctx = NewOC_ParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, CypherParserRULE_oC_Parameter)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1512)
		p.Match(CypherParserT__25)
	}
	p.SetState(1515)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		{
			p.SetState(1513)
			p.OC_SymbolicName()
		}

	case CypherParserDecimalInteger:
		{
			p.SetState(1514)
			p.Match(CypherParserDecimalInteger)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_PropertyExpressionContext is an interface to support dynamic dispatch.
type IOC_PropertyExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertyExpressionContext differentiates from other interfaces.
	IsOC_PropertyExpressionContext()
}

type OC_PropertyExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertyExpressionContext() *OC_PropertyExpressionContext {
	var p = new(OC_PropertyExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PropertyExpression
	return p
}

func (*OC_PropertyExpressionContext) IsOC_PropertyExpressionContext() {}

func NewOC_PropertyExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertyExpressionContext {
	var p = new(OC_PropertyExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PropertyExpression

	return p
}

func (s *OC_PropertyExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertyExpressionContext) OC_Atom() IOC_AtomContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_AtomContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_AtomContext)
}

func (s *OC_PropertyExpressionContext) AllOC_PropertyLookup() []IOC_PropertyLookupContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOC_PropertyLookupContext)(nil)).Elem())
	var tst = make([]IOC_PropertyLookupContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOC_PropertyLookupContext)
		}
	}

	return tst
}

func (s *OC_PropertyExpressionContext) OC_PropertyLookup(i int) IOC_PropertyLookupContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_PropertyLookupContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOC_PropertyLookupContext)
}

func (s *OC_PropertyExpressionContext) AllSP() []antlr.TerminalNode {
	return s.GetTokens(CypherParserSP)
}

func (s *OC_PropertyExpressionContext) SP(i int) antlr.TerminalNode {
	return s.GetToken(CypherParserSP, i)
}

func (s *OC_PropertyExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertyExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertyExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PropertyExpression(s)
	}
}

func (s *OC_PropertyExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PropertyExpression(s)
	}
}

func (p *CypherParser) OC_PropertyExpression() (localctx IOC_PropertyExpressionContext) {
	localctx = NewOC_PropertyExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, CypherParserRULE_oC_PropertyExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1517)
		p.OC_Atom()
	}
	p.SetState(1522)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			p.SetState(1519)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == CypherParserSP {
				{
					p.SetState(1518)
					p.Match(CypherParserSP)
				}

			}
			{
				p.SetState(1521)
				p.OC_PropertyLookup()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1524)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 283, p.GetParserRuleContext())
	}

	return localctx
}

// IOC_PropertyKeyNameContext is an interface to support dynamic dispatch.
type IOC_PropertyKeyNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_PropertyKeyNameContext differentiates from other interfaces.
	IsOC_PropertyKeyNameContext()
}

type OC_PropertyKeyNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_PropertyKeyNameContext() *OC_PropertyKeyNameContext {
	var p = new(OC_PropertyKeyNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_PropertyKeyName
	return p
}

func (*OC_PropertyKeyNameContext) IsOC_PropertyKeyNameContext() {}

func NewOC_PropertyKeyNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_PropertyKeyNameContext {
	var p = new(OC_PropertyKeyNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_PropertyKeyName

	return p
}

func (s *OC_PropertyKeyNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_PropertyKeyNameContext) OC_SchemaName() IOC_SchemaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SchemaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SchemaNameContext)
}

func (s *OC_PropertyKeyNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_PropertyKeyNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_PropertyKeyNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_PropertyKeyName(s)
	}
}

func (s *OC_PropertyKeyNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_PropertyKeyName(s)
	}
}

func (p *CypherParser) OC_PropertyKeyName() (localctx IOC_PropertyKeyNameContext) {
	localctx = NewOC_PropertyKeyNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, CypherParserRULE_oC_PropertyKeyName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1526)
		p.OC_SchemaName()
	}

	return localctx
}

// IOC_IntegerLiteralContext is an interface to support dynamic dispatch.
type IOC_IntegerLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_IntegerLiteralContext differentiates from other interfaces.
	IsOC_IntegerLiteralContext()
}

type OC_IntegerLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_IntegerLiteralContext() *OC_IntegerLiteralContext {
	var p = new(OC_IntegerLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_IntegerLiteral
	return p
}

func (*OC_IntegerLiteralContext) IsOC_IntegerLiteralContext() {}

func NewOC_IntegerLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_IntegerLiteralContext {
	var p = new(OC_IntegerLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_IntegerLiteral

	return p
}

func (s *OC_IntegerLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_IntegerLiteralContext) HexInteger() antlr.TerminalNode {
	return s.GetToken(CypherParserHexInteger, 0)
}

func (s *OC_IntegerLiteralContext) OctalInteger() antlr.TerminalNode {
	return s.GetToken(CypherParserOctalInteger, 0)
}

func (s *OC_IntegerLiteralContext) DecimalInteger() antlr.TerminalNode {
	return s.GetToken(CypherParserDecimalInteger, 0)
}

func (s *OC_IntegerLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_IntegerLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_IntegerLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_IntegerLiteral(s)
	}
}

func (s *OC_IntegerLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_IntegerLiteral(s)
	}
}

func (p *CypherParser) OC_IntegerLiteral() (localctx IOC_IntegerLiteralContext) {
	localctx = NewOC_IntegerLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, CypherParserRULE_oC_IntegerLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1528)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-97)&-(0x1f+1)) == 0 && ((1<<uint((_la-97)))&((1<<(CypherParserHexInteger-97))|(1<<(CypherParserDecimalInteger-97))|(1<<(CypherParserOctalInteger-97)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_DoubleLiteralContext is an interface to support dynamic dispatch.
type IOC_DoubleLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_DoubleLiteralContext differentiates from other interfaces.
	IsOC_DoubleLiteralContext()
}

type OC_DoubleLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_DoubleLiteralContext() *OC_DoubleLiteralContext {
	var p = new(OC_DoubleLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_DoubleLiteral
	return p
}

func (*OC_DoubleLiteralContext) IsOC_DoubleLiteralContext() {}

func NewOC_DoubleLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_DoubleLiteralContext {
	var p = new(OC_DoubleLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_DoubleLiteral

	return p
}

func (s *OC_DoubleLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_DoubleLiteralContext) ExponentDecimalReal() antlr.TerminalNode {
	return s.GetToken(CypherParserExponentDecimalReal, 0)
}

func (s *OC_DoubleLiteralContext) RegularDecimalReal() antlr.TerminalNode {
	return s.GetToken(CypherParserRegularDecimalReal, 0)
}

func (s *OC_DoubleLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_DoubleLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_DoubleLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_DoubleLiteral(s)
	}
}

func (s *OC_DoubleLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_DoubleLiteral(s)
	}
}

func (p *CypherParser) OC_DoubleLiteral() (localctx IOC_DoubleLiteralContext) {
	localctx = NewOC_DoubleLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, CypherParserRULE_oC_DoubleLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1530)
		_la = p.GetTokenStream().LA(1)

		if !(_la == CypherParserExponentDecimalReal || _la == CypherParserRegularDecimalReal) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_SchemaNameContext is an interface to support dynamic dispatch.
type IOC_SchemaNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SchemaNameContext differentiates from other interfaces.
	IsOC_SchemaNameContext()
}

type OC_SchemaNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SchemaNameContext() *OC_SchemaNameContext {
	var p = new(OC_SchemaNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SchemaName
	return p
}

func (*OC_SchemaNameContext) IsOC_SchemaNameContext() {}

func NewOC_SchemaNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SchemaNameContext {
	var p = new(OC_SchemaNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SchemaName

	return p
}

func (s *OC_SchemaNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SchemaNameContext) OC_SymbolicName() IOC_SymbolicNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_SymbolicNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_SymbolicNameContext)
}

func (s *OC_SchemaNameContext) OC_ReservedWord() IOC_ReservedWordContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOC_ReservedWordContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOC_ReservedWordContext)
}

func (s *OC_SchemaNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SchemaNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SchemaNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SchemaName(s)
	}
}

func (s *OC_SchemaNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SchemaName(s)
	}
}

func (p *CypherParser) OC_SchemaName() (localctx IOC_SchemaNameContext) {
	localctx = NewOC_SchemaNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, CypherParserRULE_oC_SchemaName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1534)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case CypherParserCOUNT, CypherParserANY, CypherParserNONE, CypherParserSINGLE, CypherParserHexLetter, CypherParserFILTER, CypherParserEXTRACT, CypherParserUnescapedSymbolicName, CypherParserEscapedSymbolicName:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1532)
			p.OC_SymbolicName()
		}

	case CypherParserUNION, CypherParserALL, CypherParserOPTIONAL, CypherParserMATCH, CypherParserUNWIND, CypherParserAS, CypherParserMERGE, CypherParserON, CypherParserCREATE, CypherParserSET, CypherParserDETACH, CypherParserDELETE, CypherParserREMOVE, CypherParserWITH, CypherParserRETURN, CypherParserDISTINCT, CypherParserORDER, CypherParserBY, CypherParserL_SKIP, CypherParserLIMIT, CypherParserASCENDING, CypherParserASC, CypherParserDESCENDING, CypherParserDESC, CypherParserWHERE, CypherParserOR, CypherParserXOR, CypherParserAND, CypherParserNOT, CypherParserIN, CypherParserSTARTS, CypherParserENDS, CypherParserCONTAINS, CypherParserIS, CypherParserNULL, CypherParserTRUE, CypherParserFALSE, CypherParserEXISTS, CypherParserCASE, CypherParserELSE, CypherParserEND, CypherParserWHEN, CypherParserTHEN, CypherParserCONSTRAINT, CypherParserDO, CypherParserFOR, CypherParserREQUIRE, CypherParserUNIQUE, CypherParserMANDATORY, CypherParserSCALAR, CypherParserOF, CypherParserADD, CypherParserDROP:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1533)
			p.OC_ReservedWord()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOC_ReservedWordContext is an interface to support dynamic dispatch.
type IOC_ReservedWordContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_ReservedWordContext differentiates from other interfaces.
	IsOC_ReservedWordContext()
}

type OC_ReservedWordContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_ReservedWordContext() *OC_ReservedWordContext {
	var p = new(OC_ReservedWordContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_ReservedWord
	return p
}

func (*OC_ReservedWordContext) IsOC_ReservedWordContext() {}

func NewOC_ReservedWordContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_ReservedWordContext {
	var p = new(OC_ReservedWordContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_ReservedWord

	return p
}

func (s *OC_ReservedWordContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_ReservedWordContext) ALL() antlr.TerminalNode {
	return s.GetToken(CypherParserALL, 0)
}

func (s *OC_ReservedWordContext) ASC() antlr.TerminalNode {
	return s.GetToken(CypherParserASC, 0)
}

func (s *OC_ReservedWordContext) ASCENDING() antlr.TerminalNode {
	return s.GetToken(CypherParserASCENDING, 0)
}

func (s *OC_ReservedWordContext) BY() antlr.TerminalNode {
	return s.GetToken(CypherParserBY, 0)
}

func (s *OC_ReservedWordContext) CREATE() antlr.TerminalNode {
	return s.GetToken(CypherParserCREATE, 0)
}

func (s *OC_ReservedWordContext) DELETE() antlr.TerminalNode {
	return s.GetToken(CypherParserDELETE, 0)
}

func (s *OC_ReservedWordContext) DESC() antlr.TerminalNode {
	return s.GetToken(CypherParserDESC, 0)
}

func (s *OC_ReservedWordContext) DESCENDING() antlr.TerminalNode {
	return s.GetToken(CypherParserDESCENDING, 0)
}

func (s *OC_ReservedWordContext) DETACH() antlr.TerminalNode {
	return s.GetToken(CypherParserDETACH, 0)
}

func (s *OC_ReservedWordContext) EXISTS() antlr.TerminalNode {
	return s.GetToken(CypherParserEXISTS, 0)
}

func (s *OC_ReservedWordContext) LIMIT() antlr.TerminalNode {
	return s.GetToken(CypherParserLIMIT, 0)
}

func (s *OC_ReservedWordContext) MATCH() antlr.TerminalNode {
	return s.GetToken(CypherParserMATCH, 0)
}

func (s *OC_ReservedWordContext) MERGE() antlr.TerminalNode {
	return s.GetToken(CypherParserMERGE, 0)
}

func (s *OC_ReservedWordContext) ON() antlr.TerminalNode {
	return s.GetToken(CypherParserON, 0)
}

func (s *OC_ReservedWordContext) OPTIONAL() antlr.TerminalNode {
	return s.GetToken(CypherParserOPTIONAL, 0)
}

func (s *OC_ReservedWordContext) ORDER() antlr.TerminalNode {
	return s.GetToken(CypherParserORDER, 0)
}

func (s *OC_ReservedWordContext) REMOVE() antlr.TerminalNode {
	return s.GetToken(CypherParserREMOVE, 0)
}

func (s *OC_ReservedWordContext) RETURN() antlr.TerminalNode {
	return s.GetToken(CypherParserRETURN, 0)
}

func (s *OC_ReservedWordContext) SET() antlr.TerminalNode {
	return s.GetToken(CypherParserSET, 0)
}

func (s *OC_ReservedWordContext) L_SKIP() antlr.TerminalNode {
	return s.GetToken(CypherParserL_SKIP, 0)
}

func (s *OC_ReservedWordContext) WHERE() antlr.TerminalNode {
	return s.GetToken(CypherParserWHERE, 0)
}

func (s *OC_ReservedWordContext) WITH() antlr.TerminalNode {
	return s.GetToken(CypherParserWITH, 0)
}

func (s *OC_ReservedWordContext) UNION() antlr.TerminalNode {
	return s.GetToken(CypherParserUNION, 0)
}

func (s *OC_ReservedWordContext) UNWIND() antlr.TerminalNode {
	return s.GetToken(CypherParserUNWIND, 0)
}

func (s *OC_ReservedWordContext) AND() antlr.TerminalNode {
	return s.GetToken(CypherParserAND, 0)
}

func (s *OC_ReservedWordContext) AS() antlr.TerminalNode {
	return s.GetToken(CypherParserAS, 0)
}

func (s *OC_ReservedWordContext) CONTAINS() antlr.TerminalNode {
	return s.GetToken(CypherParserCONTAINS, 0)
}

func (s *OC_ReservedWordContext) DISTINCT() antlr.TerminalNode {
	return s.GetToken(CypherParserDISTINCT, 0)
}

func (s *OC_ReservedWordContext) ENDS() antlr.TerminalNode {
	return s.GetToken(CypherParserENDS, 0)
}

func (s *OC_ReservedWordContext) IN() antlr.TerminalNode {
	return s.GetToken(CypherParserIN, 0)
}

func (s *OC_ReservedWordContext) IS() antlr.TerminalNode {
	return s.GetToken(CypherParserIS, 0)
}

func (s *OC_ReservedWordContext) NOT() antlr.TerminalNode {
	return s.GetToken(CypherParserNOT, 0)
}

func (s *OC_ReservedWordContext) OR() antlr.TerminalNode {
	return s.GetToken(CypherParserOR, 0)
}

func (s *OC_ReservedWordContext) STARTS() antlr.TerminalNode {
	return s.GetToken(CypherParserSTARTS, 0)
}

func (s *OC_ReservedWordContext) XOR() antlr.TerminalNode {
	return s.GetToken(CypherParserXOR, 0)
}

func (s *OC_ReservedWordContext) FALSE() antlr.TerminalNode {
	return s.GetToken(CypherParserFALSE, 0)
}

func (s *OC_ReservedWordContext) TRUE() antlr.TerminalNode {
	return s.GetToken(CypherParserTRUE, 0)
}

func (s *OC_ReservedWordContext) NULL() antlr.TerminalNode {
	return s.GetToken(CypherParserNULL, 0)
}

func (s *OC_ReservedWordContext) CONSTRAINT() antlr.TerminalNode {
	return s.GetToken(CypherParserCONSTRAINT, 0)
}

func (s *OC_ReservedWordContext) DO() antlr.TerminalNode {
	return s.GetToken(CypherParserDO, 0)
}

func (s *OC_ReservedWordContext) FOR() antlr.TerminalNode {
	return s.GetToken(CypherParserFOR, 0)
}

func (s *OC_ReservedWordContext) REQUIRE() antlr.TerminalNode {
	return s.GetToken(CypherParserREQUIRE, 0)
}

func (s *OC_ReservedWordContext) UNIQUE() antlr.TerminalNode {
	return s.GetToken(CypherParserUNIQUE, 0)
}

func (s *OC_ReservedWordContext) CASE() antlr.TerminalNode {
	return s.GetToken(CypherParserCASE, 0)
}

func (s *OC_ReservedWordContext) WHEN() antlr.TerminalNode {
	return s.GetToken(CypherParserWHEN, 0)
}

func (s *OC_ReservedWordContext) THEN() antlr.TerminalNode {
	return s.GetToken(CypherParserTHEN, 0)
}

func (s *OC_ReservedWordContext) ELSE() antlr.TerminalNode {
	return s.GetToken(CypherParserELSE, 0)
}

func (s *OC_ReservedWordContext) END() antlr.TerminalNode {
	return s.GetToken(CypherParserEND, 0)
}

func (s *OC_ReservedWordContext) MANDATORY() antlr.TerminalNode {
	return s.GetToken(CypherParserMANDATORY, 0)
}

func (s *OC_ReservedWordContext) SCALAR() antlr.TerminalNode {
	return s.GetToken(CypherParserSCALAR, 0)
}

func (s *OC_ReservedWordContext) OF() antlr.TerminalNode {
	return s.GetToken(CypherParserOF, 0)
}

func (s *OC_ReservedWordContext) ADD() antlr.TerminalNode {
	return s.GetToken(CypherParserADD, 0)
}

func (s *OC_ReservedWordContext) DROP() antlr.TerminalNode {
	return s.GetToken(CypherParserDROP, 0)
}

func (s *OC_ReservedWordContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_ReservedWordContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_ReservedWordContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_ReservedWord(s)
	}
}

func (s *OC_ReservedWordContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_ReservedWord(s)
	}
}

func (p *CypherParser) OC_ReservedWord() (localctx IOC_ReservedWordContext) {
	localctx = NewOC_ReservedWordContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, CypherParserRULE_oC_ReservedWord)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1536)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-46)&-(0x1f+1)) == 0 && ((1<<uint((_la-46)))&((1<<(CypherParserUNION-46))|(1<<(CypherParserALL-46))|(1<<(CypherParserOPTIONAL-46))|(1<<(CypherParserMATCH-46))|(1<<(CypherParserUNWIND-46))|(1<<(CypherParserAS-46))|(1<<(CypherParserMERGE-46))|(1<<(CypherParserON-46))|(1<<(CypherParserCREATE-46))|(1<<(CypherParserSET-46))|(1<<(CypherParserDETACH-46))|(1<<(CypherParserDELETE-46))|(1<<(CypherParserREMOVE-46))|(1<<(CypherParserWITH-46))|(1<<(CypherParserRETURN-46))|(1<<(CypherParserDISTINCT-46))|(1<<(CypherParserORDER-46))|(1<<(CypherParserBY-46))|(1<<(CypherParserL_SKIP-46))|(1<<(CypherParserLIMIT-46))|(1<<(CypherParserASCENDING-46))|(1<<(CypherParserASC-46))|(1<<(CypherParserDESCENDING-46))|(1<<(CypherParserDESC-46))|(1<<(CypherParserWHERE-46))|(1<<(CypherParserOR-46))|(1<<(CypherParserXOR-46))|(1<<(CypherParserAND-46))|(1<<(CypherParserNOT-46))|(1<<(CypherParserIN-46)))) != 0) || (((_la-78)&-(0x1f+1)) == 0 && ((1<<uint((_la-78)))&((1<<(CypherParserSTARTS-78))|(1<<(CypherParserENDS-78))|(1<<(CypherParserCONTAINS-78))|(1<<(CypherParserIS-78))|(1<<(CypherParserNULL-78))|(1<<(CypherParserTRUE-78))|(1<<(CypherParserFALSE-78))|(1<<(CypherParserEXISTS-78))|(1<<(CypherParserCASE-78))|(1<<(CypherParserELSE-78))|(1<<(CypherParserEND-78))|(1<<(CypherParserWHEN-78))|(1<<(CypherParserTHEN-78))|(1<<(CypherParserCONSTRAINT-78)))) != 0) || (((_la-110)&-(0x1f+1)) == 0 && ((1<<uint((_la-110)))&((1<<(CypherParserDO-110))|(1<<(CypherParserFOR-110))|(1<<(CypherParserREQUIRE-110))|(1<<(CypherParserUNIQUE-110))|(1<<(CypherParserMANDATORY-110))|(1<<(CypherParserSCALAR-110))|(1<<(CypherParserOF-110))|(1<<(CypherParserADD-110))|(1<<(CypherParserDROP-110)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_SymbolicNameContext is an interface to support dynamic dispatch.
type IOC_SymbolicNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_SymbolicNameContext differentiates from other interfaces.
	IsOC_SymbolicNameContext()
}

type OC_SymbolicNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_SymbolicNameContext() *OC_SymbolicNameContext {
	var p = new(OC_SymbolicNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_SymbolicName
	return p
}

func (*OC_SymbolicNameContext) IsOC_SymbolicNameContext() {}

func NewOC_SymbolicNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_SymbolicNameContext {
	var p = new(OC_SymbolicNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_SymbolicName

	return p
}

func (s *OC_SymbolicNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OC_SymbolicNameContext) UnescapedSymbolicName() antlr.TerminalNode {
	return s.GetToken(CypherParserUnescapedSymbolicName, 0)
}

func (s *OC_SymbolicNameContext) EscapedSymbolicName() antlr.TerminalNode {
	return s.GetToken(CypherParserEscapedSymbolicName, 0)
}

func (s *OC_SymbolicNameContext) HexLetter() antlr.TerminalNode {
	return s.GetToken(CypherParserHexLetter, 0)
}

func (s *OC_SymbolicNameContext) COUNT() antlr.TerminalNode {
	return s.GetToken(CypherParserCOUNT, 0)
}

func (s *OC_SymbolicNameContext) FILTER() antlr.TerminalNode {
	return s.GetToken(CypherParserFILTER, 0)
}

func (s *OC_SymbolicNameContext) EXTRACT() antlr.TerminalNode {
	return s.GetToken(CypherParserEXTRACT, 0)
}

func (s *OC_SymbolicNameContext) ANY() antlr.TerminalNode {
	return s.GetToken(CypherParserANY, 0)
}

func (s *OC_SymbolicNameContext) NONE() antlr.TerminalNode {
	return s.GetToken(CypherParserNONE, 0)
}

func (s *OC_SymbolicNameContext) SINGLE() antlr.TerminalNode {
	return s.GetToken(CypherParserSINGLE, 0)
}

func (s *OC_SymbolicNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_SymbolicNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_SymbolicNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_SymbolicName(s)
	}
}

func (s *OC_SymbolicNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_SymbolicName(s)
	}
}

func (p *CypherParser) OC_SymbolicName() (localctx IOC_SymbolicNameContext) {
	localctx = NewOC_SymbolicNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, CypherParserRULE_oC_SymbolicName)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1538)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-83)&-(0x1f+1)) == 0 && ((1<<uint((_la-83)))&((1<<(CypherParserCOUNT-83))|(1<<(CypherParserANY-83))|(1<<(CypherParserNONE-83))|(1<<(CypherParserSINGLE-83))|(1<<(CypherParserHexLetter-83)))) != 0) || (((_la-119)&-(0x1f+1)) == 0 && ((1<<uint((_la-119)))&((1<<(CypherParserFILTER-119))|(1<<(CypherParserEXTRACT-119))|(1<<(CypherParserUnescapedSymbolicName-119))|(1<<(CypherParserEscapedSymbolicName-119)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_LeftArrowHeadContext is an interface to support dynamic dispatch.
type IOC_LeftArrowHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_LeftArrowHeadContext differentiates from other interfaces.
	IsOC_LeftArrowHeadContext()
}

type OC_LeftArrowHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_LeftArrowHeadContext() *OC_LeftArrowHeadContext {
	var p = new(OC_LeftArrowHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_LeftArrowHead
	return p
}

func (*OC_LeftArrowHeadContext) IsOC_LeftArrowHeadContext() {}

func NewOC_LeftArrowHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_LeftArrowHeadContext {
	var p = new(OC_LeftArrowHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_LeftArrowHead

	return p
}

func (s *OC_LeftArrowHeadContext) GetParser() antlr.Parser { return s.parser }
func (s *OC_LeftArrowHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_LeftArrowHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_LeftArrowHeadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_LeftArrowHead(s)
	}
}

func (s *OC_LeftArrowHeadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_LeftArrowHead(s)
	}
}

func (p *CypherParser) OC_LeftArrowHead() (localctx IOC_LeftArrowHeadContext) {
	localctx = NewOC_LeftArrowHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, CypherParserRULE_oC_LeftArrowHead)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1540)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<CypherParserT__18)|(1<<CypherParserT__26)|(1<<CypherParserT__27)|(1<<CypherParserT__28)|(1<<CypherParserT__29))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_RightArrowHeadContext is an interface to support dynamic dispatch.
type IOC_RightArrowHeadContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_RightArrowHeadContext differentiates from other interfaces.
	IsOC_RightArrowHeadContext()
}

type OC_RightArrowHeadContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_RightArrowHeadContext() *OC_RightArrowHeadContext {
	var p = new(OC_RightArrowHeadContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_RightArrowHead
	return p
}

func (*OC_RightArrowHeadContext) IsOC_RightArrowHeadContext() {}

func NewOC_RightArrowHeadContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_RightArrowHeadContext {
	var p = new(OC_RightArrowHeadContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_RightArrowHead

	return p
}

func (s *OC_RightArrowHeadContext) GetParser() antlr.Parser { return s.parser }
func (s *OC_RightArrowHeadContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_RightArrowHeadContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_RightArrowHeadContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_RightArrowHead(s)
	}
}

func (s *OC_RightArrowHeadContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_RightArrowHead(s)
	}
}

func (p *CypherParser) OC_RightArrowHead() (localctx IOC_RightArrowHeadContext) {
	localctx = NewOC_RightArrowHeadContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, CypherParserRULE_oC_RightArrowHead)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1542)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-20)&-(0x1f+1)) == 0 && ((1<<uint((_la-20)))&((1<<(CypherParserT__19-20))|(1<<(CypherParserT__30-20))|(1<<(CypherParserT__31-20))|(1<<(CypherParserT__32-20))|(1<<(CypherParserT__33-20)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOC_DashContext is an interface to support dynamic dispatch.
type IOC_DashContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOC_DashContext differentiates from other interfaces.
	IsOC_DashContext()
}

type OC_DashContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOC_DashContext() *OC_DashContext {
	var p = new(OC_DashContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = CypherParserRULE_oC_Dash
	return p
}

func (*OC_DashContext) IsOC_DashContext() {}

func NewOC_DashContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OC_DashContext {
	var p = new(OC_DashContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = CypherParserRULE_oC_Dash

	return p
}

func (s *OC_DashContext) GetParser() antlr.Parser { return s.parser }
func (s *OC_DashContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OC_DashContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OC_DashContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.EnterOC_Dash(s)
	}
}

func (s *OC_DashContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(CypherListener); ok {
		listenerT.ExitOC_Dash(s)
	}
}

func (p *CypherParser) OC_Dash() (localctx IOC_DashContext) {
	localctx = NewOC_DashContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, CypherParserRULE_oC_Dash)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1544)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-14)&-(0x1f+1)) == 0 && ((1<<uint((_la-14)))&((1<<(CypherParserT__13-14))|(1<<(CypherParserT__34-14))|(1<<(CypherParserT__35-14))|(1<<(CypherParserT__36-14))|(1<<(CypherParserT__37-14))|(1<<(CypherParserT__38-14))|(1<<(CypherParserT__39-14))|(1<<(CypherParserT__40-14))|(1<<(CypherParserT__41-14))|(1<<(CypherParserT__42-14))|(1<<(CypherParserT__43-14))|(1<<(CypherParserT__44-14)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}
